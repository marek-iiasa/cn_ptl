GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 1
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


   2  $ONDOLLAR
   3  $ONTEXT
       
         Copyright 2017â€“2021 IIASA Energy, Climate, and Environment (ECE) Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system optimization model MESSAGEix
      For the most recent version of the framework, please visit `github.com/iiasa/message_ix`.
      For a comprehensive documentation of the latest release of the MESSAGEix framework
      and the ix modeling platform, please visit `MESSAGEix.iiasa.ac.at/`.
       
      When using the MESSAGEix framework, please cite as:
       
         Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp, Clara Orthofer,
         Michael Pimmer, Nikolay Kushin, Adriano Vinca, Alessio Mastrucci,
         Keywan Riahi, and Volker Krey.
         "The |MESSAGEix| Integrated Assessment Model and the ix modeling platform".
         Environmental Modelling & Software 112:143-156, 2019.
         doi: 10.1016/j.envsoft.2018.11.012
         electronic pre-print available at pure.iiasa.ac.at/15157/
       
      Please review the NOTICE at `MESSAGEix.iiasa.ac.at/notice.html`
      and included in the GitHub repository for further user guidelines.
      The community forum and mailing list is hosted at `groups.google.com/d/forum/message_ix`.
       
  38  $OFFTEXT
  39   
  40  ***
  41  * Run script for |MESSAGEix| (stand-alone)
  42  * ========================================
  43  *
  44  * This is |MESSAGEix| version |version|. The version number must match the version number
  45  * of the ``ixmp`` ``MESSAGE``-scheme specifications used for exporting data and importing results.
  46  *
  47  * This file contains the workflow of a |MESSAGEix|-standalone run. It can be called:
  48  *
  49  * - Via the scientific programming API's using the packages/libraries ``ixmp`` and ``message_ix``,
  50  *   calling the method ``solve()`` of the ``message_ix.Scenario`` class (see the tutorials).
  51  * - using the file ``MESSAGE_master.gms`` with the option ``$SETGLOBAL macromode "none"``,
  52  *   where the input data file name and other options are stated explicitly, or
  53  * - directly from the command line, with the input data file name
  54  *   and other options specific as command line parameters, e.g.::
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 2
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


  55  *
  56  *   ``gams MESSAGE_run.gms --in="<data-file>" [--out="<output-file>"]``
  57  *
  58  * By default, the data file (in gdx format) should be located in the ``model/data`` folder
  59  * and be named in the format ``MsgData_<name>.gdx``. Upon completion of the GAMS execution,
  60  * a results file ``<output-file>`` will be written
  61  * (or ``model\output\MsgOutput.gdx`` if ``--out`` is not provided).
  62  ***
  63   
  64  $EOLCOM #
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_setup.gms
  65  $INCLUDE MESSAGE/model_setup.gms
  66  *----------------------------------------------------------------------------------------------------------------------*
  67  * sanity check of model run parameters, set defaults if not specified                                                  *
  68  *----------------------------------------------------------------------------------------------------------------------*
  69   
  70  * set # as end-of-line comment; all text after # is ignored
  71  * (for proper display in GAMS IDE, this needs to be specified in the options, too)
  72   
  73  *----------------------------------------------------------------------------------------------------------------------*
  74  * sanity check of model run parameters, set defaults if not specified                                                  *
  75  *----------------------------------------------------------------------------------------------------------------------*
  76   
  77  * a datastructure name is mandatory to load the gdx file - abort the run if not specified or file does not exist
  78  $IF NOT SET in       $ABORT "no input data file provided!"
  79  $IF NOT EXIST 'data/demand.gdx' $ABORT "input GDX file 'data/demand.gdx' does not exist!"
  80  $SETGLOBAL iter "output/MsgIterationReport"
  81  $SETGLOBAL out "output/MsgOutput.gdx"
  82   
  83  ** define the time horizon over which the model optimizes (perfect foresight, myopic or rolling horizon) **
  84  * perfect foresight - 0 (assumed as default if not specified
  85  * myopic optimization (period-by-period, recursive-dynamic without any foresight) - 1
  86  * rolling horizon (period-by-period, recursive-dynamic with limited foresight - 'number of years of foresight'
  87  $SETGLOBAL foresight "0"
  88   
  89  ** specify optional additional calibration output **
  90  $SETGLOBAL calibration ""
  91  * mark with * to include detailed calibration information in outputs and get an extended GAMS listing (.lst) file
  92   
  93  ** debugging mode settings for support and assistance during model development and calibration **
  94  * assume that all debugging options are deactivated by default
  95  * mark as "*" to deactivate, mark as "" to activate
  96   
  97  * set auxiliary upper and lower bounds on the actitivity variables to prevent unbounded models
  98  $SETGLOBAL AUX_BOUNDS "*"
  99  $SETGLOBAL AUX_BOUND_VALUE "1e9"
 100   
 101  * include relaxations for specific constraint blocks to identify infeasibilities during model development/calibration
 102  * by adding 'slack' variables in the constraints and associated penalty factors in the objective function
 103  $SETGLOBAL SLACK_COMMODITY_EQUIVALENCE "*"
 104   
 105  $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
 106  $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 3
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 107  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "*"
 108  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "*"
 109  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "*"
 110  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "*"
 111   
 112  $SETGLOBAL SLACK_ACT_BOUND_UP "*"
 113  $SETGLOBAL SLACK_ACT_BOUND_LO "*"
 114  $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
 115  $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
 116   
 117  $SETGLOBAL SLACK_LAND_SCEN_UP "*"
 118  $SETGLOBAL SLACK_LAND_SCEN_LO "*"
 119  $SETGLOBAL SLACK_LAND_TYPE_UP "*"
 120  $SETGLOBAL SLACK_LAND_TYPE_LO "*"
 121   
 122  $SETGLOBAL SLACK_RELATION_BOUND_UP "*"
 123  $SETGLOBAL SLACK_RELATION_BOUND_LO "*"
 124   
 125  *----------------------------------------------------------------------------------------------------------------------*
 126  * initialize sets, mappings, parameters, load data, do pre-processing                                                  *
 127  *----------------------------------------------------------------------------------------------------------------------*
 128   
 129  ** load auxiliary settings from include file (solver options, resource/time limits, prefered solvers) **
 130  * recommended only for advanced users
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/auxiliary_settings.gms
 131  $INCLUDE MESSAGE/auxiliary_settings.gms
 132  *----------------------------------------------------------------------------------------------------------------------*
 133  * auxiliary settings and defintions                                                                                    *
 134  *----------------------------------------------------------------------------------------------------------------------*
 135   
 136  * initialise logfile settings - this allows to write status messages to the logfile
 137  file logfile / '' / ;
 138  put logfile ;
 139   
 140  * get yourself a short listing file
 141  option limrow = 0 ;     # number of rows (equations) reported in lst file
 142  option limcol = 0 ;     # number of columns reported in lst file
 143  option solprint = off ; # solver's solution output printed
 144  option savepoint = 0 ;  # creates a result gdx file after every solve
 145  * this is done manually in this code to have the database name in the gdx file name and to save the file in a sub-folder
 146   
 147  option ITERLIM = 1e8 ;  # iteration limit
 148  option RESLIM = 1e6 ;   # resource limit (in seconds; 1e6 is approximately 11 days)
 149  * solver comments for QCP and PATH:
 150  * - GUROBI, CPLEX and MINOS are fast
 151  * - CONOPT is slower, but (in non-linear problems) usually more helpful to identify the feasibility problems
 152  * general comment: sometimes, first using one solver and then another (using the previous solution as starting point)
 153  * helps even if the previous run did not solve to optimality
 154  option LP = CPLEX ;
 155  option NLP = CONOPT ;
 156  option MCP = PATH ;
 157   
 158  *option solveopt=clear ;# remove results of previous runs in memory
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 4
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 159  option solveopt=merge ; # keep results of previous runs in memory
 160  $SETENV GdxCompress 1   # reduces the size of the gdx export file
 161   
 162  $ONTEXT
      $ONLISTING
      option limrow = 1e6 ;   # number of rows (equations) reported in lst file
      option limcol = 1e6 ;   # number of columns reported in lst file
      option solprint = on ;  # solver's solution output printed
      $ONTEXT
 168  $OFFTEXT
 169   
 170  * check that the version of MESSAGEix and the ixToolbox used for exporting the data to gdx match
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\version.gms
 171  $INCLUDE version.gms
 172  * GDX scheme version
 173  *
 174  * !!! DO NOT CHANGE VALUES IN THIS FILE MANUALLY !!!
 175  * Instead, update message_ix and ixmp as described in the documentation.
 176  *
 177  * Technical details:
 178  *
 179  * These numbers describe the contents of the GDX file written by the Java code
 180  * in ixmp.jar. The Java code automatically generates some contents, e.g., set
 181  * elements, in a way that cannot be controlled or overriden by Python ixmp or
 182  * message_ix.
 183  *
 184  * Formerly, these numbers were incremented in ixmp_source, ixmp.jar, and this
 185  * file, with every release. Currently, they will be incremented if (and *only*
 186  * if) there are changes in the behaviour of the Java code that must be synced
 187  * with corresponding changes in the GAMS source files in this directory.
 188  *
 189  * Eventually, all automatic behaviour will be moved from ixmp_source (Java) to
 190  * ixmp (Python); see https://github.com/iiasa/message_ix/issues/254. At that
 191  * point, both this file and MESSAGE/version_check.gms can be removed.
 192   
 193  $SETGLOBAL VERSION_MAJOR "2"
 194  $SETGLOBAL VERSION_MINOR "0"
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/version_check.gms
 195  $INCLUDE MESSAGE/version_check.gms
 196  * Version check                                                                                                 *
 197  *
 198  * See technical description in ../version.gms.
 199   
 200  Parameter MESSAGE_ix_version(*);
 201   
GDXIN   C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/demand.gdx
 202  $GDXIN 'data/demand.gdx'
--- LOAD  MESSAGE_ix_version = 1:MESSAGE_ix_version
 203  $LOAD MESSAGE_IX_version
 204  $GDXIN
 205   
 206  IF ( NOT ( MESSAGE_IX_version("major") = 2 AND MESSAGE_IX_version("minor") = 0 ),
 207      logfile.nw = 1;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 5
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 208      logfile.nd = 0;
 209   
 210      put_utility 'log' / '***';
 211      put_utility 'log' / '*** ABORT';
 212      put_utility 'log' / '*** GDX file was written by an ixmp.jar incompatible with this version of MESSAGEix:';
 213      put_utility 'log' / '***   data/demand.gdx';
 214      put_utility 'log' / '***   ...has version ' MESSAGE_IX_version("major") '.' MESSAGE_IX_version("minor")
 215        ' while version.gms has 2.0';
 216      put_utility 'log' / '***';
 217   
 218      abort "GDX file incompatible with current version of MESSAGEix";
 219  ) ;
 220   
 221  ** initialize sets, mappings, parameters
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/sets_maps_def.gms
 222  $INCLUDE MESSAGE/sets_maps_def.gms
 223  ***
 224  * .. _sets_maps_def:
 225  *
 226  * Sets and mappings
 227  * =================
 228  *
 229  * :file:`sets_maps_def.gms` defines all sets and mappings used in |MESSAGEix|. The symbols in the **Notation** column of
 230  * the tables below are used in the equations of the mathematical formulation, while the set names appear in the GAMS
 231  * code.
 232  ***
 233   
 234  * IMPORTANT
 235  * indices to mapping sets will always be in the following order:
 236  * lvl_spatial, lvl_temporal,
 237  * node_location, tec, year_vintage, year_actual, mode, commodity, level, grade,
 238  * node_origin/destination, emission, time_actual), time_origin/destination, rating
 239   
 240  * allows sets to be empty
 241  $ONEMPTY
 242   
 243  *----------------------------------------------------------------------------------------------------------------------*
 244  * Set definitions                                                                                                      *
 245  *----------------------------------------------------------------------------------------------------------------------*
 246   
 247  ***
 248  * .. _section_set_def:
 249  *
 250  * Sets in the |MESSAGEix| implementation
 251  * --------------------------------------
 252  *
 253  * .. list-table::
 254  *    :widths: 20 12 68
 255  *    :header-rows: 1
 256  *
 257  *    * - Set name
 258  *      - Notation
 259  *      - Explanatory comments
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 6
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 260  *    * - node [#node]_
 261  *      - :math:`n \in N`
 262  *      - Regions, countries, grid cells
 263  *    * - commodity
 264  *      - :math:`c \in C`
 265  *      - Resources, electricity, water, land availability, etc.
 266  *    * - level
 267  *      - :math:`l \in L`
 268  *      - Levels of the reference energy system or supply chain (primary, secondary, ... , useful)
 269  *    * - grade
 270  *      - :math:`g \in G`
 271  *      - Grades of resource quality in the extraction & mining sector
 272  *    * - technology [tec]
 273  *      - :math:`t \in T`
 274  *      - | Technologies that use input commodities to produce outputs;
 275  *        | the short-hand notation "tec" is used in the GAMS implementation
 276  *    * - mode [#mode]_
 277  *      - :math:`m \in M`
 278  *      - Modes of operation for specific technologies
 279  *    * - emission
 280  *      - :math:`e \in E`
 281  *      - Greenhouse gases, pollutants, etc.
 282  *    * - land_scenario
 283  *      - :math:`s \in S`
 284  *      - Scenarios of land use (for land-use model emulator)
 285  *    * - land_type
 286  *      - :math:`u \in U`
 287  *      - Land-use types (e.g., field, forest, pasture)
 288  *    * - year [year_all] [#year_all]_ [#period_year]_
 289  *      - :math:`y \in Y`
 290  *      - Periods, denoted by the final year, in the model horizon
 291  *    * - time [#time]_
 292  *      - :math:`h \in H`
 293  *      - Subannual time periods (seasons, days, hours)
 294  *    * - shares [#shares]_
 295  *      - :math:`p \in P`
 296  *      - Set of constraints on shares of technologies and commodities
 297  *    * - relation [#relations]_
 298  *      - :math:`r \in R`
 299  *      - Names of generic relations (linear constraints)
 300  *    * - lvl_spatial
 301  *      -
 302  *      - Spatial hierarchy levels, e.g.  global, region, country, or grid cell.
 303  *    * - lvl_temporal
 304  *      -
 305  *      - Temporal hierarchy levels, e.g. year, season, day, or hour.
 306  *    * - rating
 307  *      - :math:`q \in Q`
 308  *      - Identifies the 'quality' of the renewable energy potential (rating of non-dispatchable
 309  *        technologies relative to aggregate commodity use)
 310  *
 311  * .. [#node] The set ``node`` includes spatial units across all levels of spatial disaggregation
 312  *    (global, regions, countries, basins, grid cells).
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 7
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 313  *    The hierarchical mapping is implemented via the mapping set ``map_spatial_hierarchy``.
 314  *    This set always includes an element 'World' when initializing a ``MESSAGE``-scheme :class:`message_ix.Scenario`.
 315  *
 316  * .. [#mode] For example, high electricity or high heat production modes of operation for combined heat and power plants.
 317  *
 318  * .. [#year_all] In the |MESSAGEix| implementation in GAMS, the set ``year_all`` denotes the "superset" of the entire
 319  *    horizon (historical and model horizon), and the set ``year`` is a dynamic subset of ``year_all``. This facilitates
 320  *    an efficient implementation of the historical capacity build-up and the (optional) recursive-dynamic solution
 321  *    approach. When working with a :class:`message_ix.Scenario` via the scientific programming API, the set of all
 322  *    periods is called ``year`` for a more concise notation. The specification of the model horizon is implemented
 323  *    using the mapping set ``cat_year`` and the type "firstmodelyear".
 324  *
 325  * .. [#period_year] See :doc:`/time`.
 326  *
 327  * .. [#time] The set ``time`` collects all sub-annual temporal units across all levels of temporal disaggregation.
 328  *    In a ``MESSAGE``-scheme :class:`ixmp.Scenario`, this set always includes an element "year",
 329  *    and the duration of that element is 1 (:math:`duration\_time_{'year'} = 1`).
 330  *
 331  * .. [#shares] A generic formulation of share constraints is implemented in |MESSAGEix|,
 332  *    see :ref:`share_constraints`.
 333  *
 334  * .. [#relations] A generic formulation of linear constraints is implemented in |MESSAGEix|,
 335  *    see :ref:`section_of_generic_relations`. These constraints can be used for testing and development,
 336  *    but specific new features should be implemented by specific equations and parameters.
 337  *
 338  * Index names
 339  * ~~~~~~~~~~~
 340  *
 341  * Where the same set is used 2 or more times to index multiple dimensions of the same :ref:`parameter <parameter_def>`,
 342  * these dimensions are given names (called **index names**) that differ from the name of the set. The table below
 343  * contains a partial list of index names appearing in the documentation.
 344  *
 345  * .. list-table::
 346  *    :widths: 18 18 64
 347  *    :header-rows: 1
 348  *
 349  *    * - Set
 350  *      - Index name
 351  *      - Description
 352  *    * - ``node``
 353  *      - ``node_dest``
 354  *      - Node to which a technology providers commodity output.
 355  *    * - ``node``
 356  *      - ``node_loc``
 357  *      - Node where a technology operates.
 358  *    * - ``node``
 359  *      - ``node_origin``
 360  *      - Node from which a technology receives commodity input.
 361  *
 362  ***
 363   
 364  Sets
 365      node            world - regions - countries - grid cells
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 8
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 366      commodity       resources - electricity - water - land availability - etc.
 367      level           levels of the reference energy system or supply chain ( primary - secondary - ... - useful )
 368      sector          sectors (for integration with MACRO)
 369      grade           grades of extraction of raw materials
 370      tec             technologies
 371      mode            modes of operation
 372      emission        greenhouse gases - pollutants - etc.
 373      land_scenario   scenarios of land use (for land-use model emulator)
 374      land_type       types of land use
 375      year_all        years (over entire model horizon)
 376      year (year_all) years included in a model instance (for myopic or rolling-horizon optimization)
 377      time            subannual time periods (seasons - days - hours)
 378      shares          share constraint relations
 379      relation        generic linear relations
 380      lvl_spatial     hierarchical levels of spatial resolution
 381      lvl_temporal    hierarchical levels of temporal resolution
 382      rating          identifies the 'quality' of the renewable energy potential (bins acc. to Sullivan)
 383  ;
 384   
 385  * definition of aliases
 386  Alias(node,location);
 387  Alias(node,node2);
 388  Alias(node,node_share);
 389  Alias(tec,tec2);
 390  Alias(commodity,commodity2);
 391  Alias(level,level2);
 392  Alias(emission,emission2);
 393  Alias(year_all,vintage);
 394  Alias(year_all,year_all2);
 395  Alias(year_all,year_all3);
 396  Alias(year,year2);
 397  Alias(year,year3);
 398  Alias(time,time2);
 399  Alias(time,time3);
 400  Alias(time,time_act);
 401  Alias(time,time_od);
 402  Alias(mode,mode2);
 403  Alias(commodity,commodity2);
 404   
 405  *----------------------------------------------------------------------------------------------------------------------*
 406  * Category types and mappings                                                                                                       *
 407  *----------------------------------------------------------------------------------------------------------------------*
 408   
 409  ***
 410  *
 411  * .. _mapping-sets:
 412  *
 413  * Category types and mappings
 414  * ---------------------------
 415  *
 416  * This feature is used to easily implement aggregation across groups of set elements.
 417  * For example, by setting an upper bound over an emission type, the constraint enforces
 418  * that the sum over all emission species mapped to that type via the mapping set ``cat_emission``
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 23:25:57 Page 9
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 419  * satisfies that upper bound.
 420  *
 421  * .. list-table::
 422  *    :widths: 25 15 60
 423  *    :header-rows: 1
 424  *
 425  *    * - Set name
 426  *      - Notation
 427  *      - Explanatory comments
 428  *    * - level_resource (level) [#level_res]_
 429  *      - :math:`l \in L^{RES} \subseteq L`
 430  *      - Levels related to `fossil resources` representation
 431  *    * - level_renewable (level) [#level_res]_
 432  *      - :math:`l \in L^{REN} \subseteq L`
 433  *      - Levels related to `renewables` representation
 434  *    * - level_storage(level)
 435  *      - :math:`l \in L^{STOR} \subseteq L`
 436  *      - Subsets of levels on which commodities are :ref:`stored <gams-storage>`; excluded from :ref:`commodity balances <commodity_balance_lt>`.
 437  *    * - type_node [#type_node]_
 438  *      - :math:`\widehat{n} \in \widehat{N}`
 439  *      - Category types for nodes
 440  *    * - cat_node (type_node,node)
 441  *      - :math:`n \in N(\widehat{n})`
 442  *      - Category mapping between node types and nodes (all nodes that are subnodes of node :math:`\widehat{n}`)
 443  *    * - type_tec [#type_tec]_
 444  *      - :math:`\widehat{t} \in \widehat{T}`
 445  *      - Category types for technologies
 446  *    * - cat_tec (type_tec,tec) [#type_tec]_
 447  *      - :math:`t \in T(\widehat{t})`
 448  *      - Category mapping between tec types and technologies (all technologies mapped to the category ``type_tec`` :math:`\widehat{t}`)
 449  *    * - inv_tec (tec) [#inv_tec]_
 450  *      - :math:`t \in T^{INV} \subseteq T`
 451  *      - Specific subset of investment technologies (all technologies with investment decisions and capacity constraints)
 452  *    * - renewable_tec (tec) [#renewable_tec]_
 453  *      - :math:`t \in T^{REN} \subseteq T`
 454  *      - Specific subset of renewable-energy technologies (all technologies which draw their input from the renewable level)
 455  *    * - storage_tec(tec)
 456  *      - :math:`t \in T^{STOR} \subseteq T`
 457  *      - Subset of technologies that are :ref:`storage <gams-storage>` container technologies (reservoirs)
 458  *    * - addon(tec)
 459  *      - :math:`t^a \in T^{A} \subseteq T`
 460  *      - Specific subset of technologies that are an add-on to other (parent) technologies
 461  *    * - type_addon
 462  *      - :math:`\widehat{t^a} \in \widehat{T^A}`
 463  *      - Category types for add-on technologies (that can be applied mutually exclusive)
 464  *    * - cat_addon(type_addon,addon)
 465  *      - :math:`t^a \in T^A(\widehat{t^a})`
 466  *      - Category mapping add-on technologies to respective add-on technology types (all add-on technologies mapped to the category ``type_addon`` :math:`\widehat{t}`)
 467  *    * - type_year
 468  *      - :math:`\widehat{y} \in \widehat{Y}`
 469  *      - Category types for year aggregations
 470  *    * - cat_year(type_year,year_all)
 471  *      - :math:`y \in Y(\widehat{y})`
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 10
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 472  *      - Category mapping years to respective categories (all years mapped to the category ``type_year`` :math:`\widehat{y}`)
 473  *    * - type_emission
 474  *      - :math:`\widehat{e} \in \widehat{E}`
 475  *      - Category types for emissions (greenhouse gases, pollutants, etc.)
 476  *    * - cat_emission (type_emission,emission)
 477  *      - :math:`e \in E(\widehat{e})`
 478  *      - Category mapping between emission types and emissions (all emissions mapped to the category ``type_emission`` :math:`\widehat{e}`)
 479  *    * - type_tec_land (type_tec) [#type_tec_land]_
 480  *      - :math:`\widehat{t} \in \widehat{T}^{LAND} \subseteq \widehat{T}`
 481  *      - Mapping set of technology types and land use
 482  *    * - balance_equality (commodity,level)
 483  *      - :math:`c \in C, l \in L`
 484  *      - Commodities and level related to :ref:`commodity_balance_lt`
 485  *
 486  * .. [#level_res] The constraint :ref:`extraction_equivalence` is active only for the levels included in this set,
 487  *    and the constraint :ref:`commodity_balance` is deactivated for these levels.
 488  *
 489  * .. [#type_node] The element "economy" is added by default as part of the ``MESSAGE``-scheme :class:`ixmp.Scenario`.
 490  *
 491  * .. [#type_tec] The element "all" in ``type_tec`` and the associated mapping to all technologies in the set ``cat_tec``
 492  *    are added by default as part of the ``MESSAGE``-scheme :class:`message_ix.Scenario`.
 493  *
 494  * .. [#inv_tec] The auxiliary set ``inv_tec`` (subset of ``technology``) is a short-hand notation for all technologies
 495  *    with defined investment costs. This activates the investment cost part in the objective function and the
 496  *    constraints for all technologies where investment decisions are relevant.
 497  *    It is added by default when exporting ``MESSAGE``-scheme :class:`message_ix.Scenario` to gdx.
 498  *
 499  * .. [#renewable_tec] The auxiliary set ``renewable_tec`` (subset of ``technology``) is a short-hand notation
 500  *    for all technologies with defined parameters relevant for the equations in the "Renewable" section.
 501  *    It is added by default when exporting ``MESSAGE``-scheme :class:`message_ix.Scenario` to gdx.
 502  *
 503  * .. [#type_tec_land] The mapping set ``type_tec_land`` is a dynamic subset of ``type_tec`` and specifies whether
 504  *    emissions from the land-use model emulator module are included when aggregrating over a specific technology type.
 505  *    The element "all" is added by default in a ``MESSAGE``-scheme :class:`message_ix.Scenario`.
 506  ***
 507   
 508  * category types and mappings
 509  Sets
 510      level_resource (level)                  subset of 'level' related to make hfossil resources
 511      level_renewable(level)                  subset of 'level' related to renewable resources
 512      level_storage(level)                    subset of 'level' related to storage technologies (excluded from commodity balance)
 513      type_node                               types of nodes
 514      cat_node(type_node,node)                mapping of nodes to respective categories
 515      type_tec                                types of technologies
 516      cat_tec(type_tec,tec)                   mapping of technologies to respective categories
 517      inv_tec(tec)                            technologies that have explicit investment and capacity decision variables
 518      renewable_tec(tec)                      technologies that use renewable energy potentials
 519      storage_tec(tec)                        technologies used as storage containers (reservoirs)
 520      addon(tec)                              technologies that are an add-on to other (parent) technologies
 521      type_addon                              types of add-on technologies (that can be applied mutually exclusive)
 522      cat_addon(type_addon,addon)             mapping of add-on technologies to respective add-on technology types
 523      type_year                               types of year aggregations
 524      cat_year(type_year,year_all)            mapping of years to respective categories
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 11
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 525      type_emission                           types of emission aggregations
 526      cat_emission(type_emission,emission)    mapping of emissions to respective categories
 527      type_tec_land(type_tec)                 dynamic set whether emissions from land use are included in type_tec
 528      balance_equality(commodity,level)       mapping of commodities-level where the supply-demand balance must be maintained with equality
 529  ;
 530   
 531  Alias(type_tec,type_tec_share);
 532  Alias(type_tec,type_tec_total);
 533   
 534  *----------------------------------------------------------------------------------------------------------------------*
 535  * Mapping sets                                                                                                         *
 536  *----------------------------------------------------------------------------------------------------------------------*
 537   
 538  ***
 539  * .. _section_maps_def:
 540  *
 541  * Mapping sets
 542  * ------------
 543  *
 544  * .. note::
 545  *
 546  *    These sets are **generated automatically** when exporting a ``MESSAGE``-scheme :class:`ixmp.Scenario` to gdx using the API.
 547  *    They are used in the GAMS model to reduce model size by excluding non-relevant variables and equations
 548  *    (e.g., activity of a technology outside of its technical lifetime). These are **not** meant to be
 549  *    edited through the API when editing scenarios. Not all the ``Mapping sets`` are shown in the list below, to access
 550  *    the full list of mapping sets, please refer to the documentation file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 551  *
 552  * .. list-table::
 553  *    :widths: 40 60
 554  *    :header-rows: 1
 555  *
 556  *    * - Set name
 557  *      - Explanatory comments
 558  *    * - map_node(node,location)
 559  *      - Mapping of nodes across hierarchy levels (location is in node)
 560  *    * - map_time(time,time2)
 561  *      - Mapping of time periods across hierarchy levels (time2 is in time)
 562  *    * - map_time_period(year_all,lvl_temporal,time,time2)
 563  *      - Mapping of the sequence of sub-annual timesteps (used in :ref:`storage <gams-storage>`)
 564  *    * - map_resource(node,commodity,grade,year_all)
 565  *      - Mapping of resources and grades to node over time
 566  *    * - map_ren_grade(node,commodity,grade,year_all)
 567  *      - Mapping of renewables and grades to node over time
 568  *    * - map_ren_com(node,tec,commodity,year_all)
 569  *      - Mapping of technologies to renewable energy source as input
 570  *    * - map_rating(node,tec,commodity,level,rating,year_all)
 571  *      - Mapping of technologues to ratings bin assignment
 572  *    * - map_commodity(node,commodity,level,year_all,time)
 573  *      - Mapping of commodity-level to node and time
 574  *    * - map_stocks(node,commodity,level,year_all)
 575  *      - Mapping of commodity-level to node and time
 576  *    * - map_tec(node,tec,year_all)
 577  *      - Mapping of technology to node and years
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 12
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 578  *    * - map_tec_time(node,tec,year_all,time)
 579  *      - Mapping of technology to temporal dissagregation (time)
 580  *    * - map_tec_mode(node,tec,year_all,mode)
 581  *      - Mapping of technology to modes
 582  *    * - map_tec_storage(node,tec,tec2,level,commodity)
 583  *      - Mapping of charge-discharge technologies ``tec`` to their storage container ``tec2``, stored ``commodity`` and ``level``.
 584  *    * - map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)
 585  *      - Mapping of storage containers to their input commodity-level (not commodity-level of stored media)
 586  ***
 587   
 588  Sets
 589      map_node(node,location)                            mapping of nodes across hierarchy levels (location is in node)
 590      map_time(time,time2)                               mapping of time periods across hierarchy levels (time2 is in time)
 591      map_time_period(year_all,lvl_temporal,time,time2)  mapping of the sequence of sub-annual timesteps
 592   
 593      map_resource(node,commodity,grade,year_all)  mapping of resources and grades to node over time
 594      map_ren_grade(node,commodity,grade,year_all) mapping of renewables and grades to node over time
 595      map_ren_com(node,tec,commodity,year_all)     mapping of technologies to renewable energy source as input
 596      map_rating(node,tec,commodity,level,rating,year_all) mapping of technologies to ratings bin assignment
 597   
 598      map_commodity(node,commodity,level,year_all,time)    mapping of commodity-level to node and time
 599      map_stocks(node,commodity,level,year_all)    mapping of commodity-level to node and time
 600   
 601      map_tec(node,tec,year_all)                      mapping of technology to node and years
 602      map_tec_time(node,tec,year_all,time)            mapping of technology to temporal dissagregation (time)
 603      map_tec_mode(node,tec,year_all,mode)            mapping of technology to modes
 604      map_tec_act(node,tec,year_all,mode,time)        mapping of technology to modes AND temporal dissagregation
 605      map_tec_addon(tec,type_addon)                   mapping of types of add-on technologies to the underlying parent technology
 606      map_tec_storage(node,tec,tec2,level,commodity)  mapping of charge-discharging technologies to their respective storage container tec and level-commodity
 607   
 608      map_spatial_hierarchy(lvl_spatial,node,node)    mapping of spatial resolution to nodes (last index is 'parent')
 609      map_temporal_hierarchy(lvl_temporal,time,time)  mapping of temporal resolution to time (last index is 'parent')
 610   
 611      map_shares_commodity_share(shares,node,
 612          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (numerator)
 613      map_shares_commodity_total(shares,node,
 614          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (denominator)
 615   
 616      map_land(node,land_scenario,year_all)            mapping of land-use model emulator scenarios to nodes and years
 617      map_relation(relation,node,year_all)             mapping of generic (user-defined) relations to nodes and years
 618   
 619  * Storage
 620      map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)  mapping of storage containers to their input commodity-level (not commodity-level of stored media)
 621  ;
 622   
 623  * additional sets created in GAMS to make notation more concise
 624  Sets
 625      map_tec_lifetime(node,tec,vintage,year_all)  mapping of technologies to periods within technical lifetime
 626  ;
 627   
 628  *----------------------------------------------------------------------------------------------------------------------*
 629  * Mapping sets (flags) for bounds                                                                                             *
 630  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 13
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 631   
 632  ***
 633  * .. _section_maps_bounds:
 634  *
 635  * Mapping sets (flags) for bounds
 636  * -------------------------------
 637  *
 638  * There are a number of mappings sets generated when exporting a :class:`message_ix.Scenario` to gdx.
 639  * They are used as 'flags' to indicate whether a constraint is active.
 640  * The names of these sets follow the format ``is_<constraint>_<dir>``.
 641  *
 642  * Such mapping sets are necessary because GAMS does not distinguish between 0 and 'no value assigned',
 643  * i.e., it cannot differentiate between a bound of 0 and 'no bound assigned'.
 644  *
 645  * .. note::
 646  *
 647  *    These sets are also **automatically generated**. To see the full list of mapping sets for bounds, please refer to the documentation
 648  *    file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 649  ***
 650   
 651  Sets
 652      is_bound_extraction_up(node,commodity,grade,year_all) flag whether upper bound exists for extraction of commodity
 653      is_bound_new_capacity_up(node,tec,year_all)      flag whether upper bound exists for new capacity
 654      is_bound_new_capacity_lo(node,tec,year_all)      flag whether lower bound exists for new capacity
 655      is_bound_total_capacity_up(node,tec,year_all)    flag whether upper bound exists for total installed capacity
 656      is_bound_total_capacity_lo(node,tec,year_all)    flag whether lower bound exists for total installed capacity
 657      is_bound_activity_up(node,tec,year_all,mode,time) flag whether upper bound exists for a technology activity
 658  *   is_bound_activity_lo(node,tec,year_all,mode,time) flag whether lower bound exists for a technology activity
 659  * this last flag is not required because the lower bound defaults to zero unless explicitly specified otherwise
 660   
 661      is_dynamic_new_capacity_up(node,tec,year_all)    flag whether upper dynamic constraint exists for new capacity (investment)
 662      is_dynamic_new_capacity_lo(node,tec,year_all)    flag whether lower dynamic constraint exists for new capacity (investment)
 663      is_dynamic_activity_up(node,tec,year_all,time)   flag whether upper dynamic constraint exists for a technology (activity)
 664      is_dynamic_activity_lo(node,tec,year_all,time)   flag whether lower dynamic constraint exists for a technology (activity)
 665   
 666      is_bound_emission(node,type_emission,type_tec,type_year) flag whether emissions bound exists
 667   
 668      is_dynamic_land_scen_up(node,land_scenario,year_all)   flag whether dynamic upper constraint on land-scenario change exists
 669      is_dynamic_land_scen_lo(node,land_scenario,year_all)   flag whether dynamic lower constraint on land-scenario change exists
 670      is_dynamic_land_up(node,year_all,land_type)   flag whether dynamic upper constraint on land-type use change exists
 671      is_dynamic_land_lo(node,year_all,land_type)   flag whether dynamic lower constraint on land-type use change exists
 672   
 673      is_relation_upper(relation,node,year_all)     flag whether upper bounds exists for generic relation
 674      is_relation_lower(relation,node,year_all)     flag whether lower bounds exists for generic relation
 675  ;
 676   
 677  *----------------------------------------------------------------------------------------------------------------------*
 678  * Mapping sets (flags) for fixed variables                                                                             *
 679  *----------------------------------------------------------------------------------------------------------------------*
 680   
 681  ***
 682  * .. _section_maps_fixed:
 683  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 14
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 684  * Mapping sets (flags) for fixed variables
 685  * ----------------------------------------
 686  *
 687  * Similar to the mapping sets for bounds, there are mapping sets to indicate whether decision variables
 688  * are pre-defined to a specific value, usually taken from a solution of another model instance.
 689  * This can be used to represent imperfect foresight where a policy shift or parameter change is introduced in later
 690  * years. The names of these sets follow the format ``is_fixed_<variable>``.
 691  *
 692  * .. note::
 693  *
 694  *    These sets are also **automatically generated**. To see the full list of mapping sets for fixed variables, please refere to the documentation
 695  *    file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 696  ***
 697   
 698  Sets
 699      is_fixed_extraction(node,commodity,grade,year_all)     flag whether extraction variable is fixed
 700      is_fixed_stock(node,commodity,level,year_all)          flag whether stock variable is fixed
 701      is_fixed_new_capacity(node,tec,year_all)               flag whether new capacity variable is fixed
 702      is_fixed_capacity(node,tec,vintage,year_all)           flag whether maintained capacity variable is fixed
 703      is_fixed_activity(node,tec,vintage,year_all,mode,time) flag whether activity variable is fixed
 704      is_fixed_land(node,land_scenario,year_all)             flag whether land level is fixed
 705  ;
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/parameter_def.gms
 706  $INCLUDE MESSAGE/parameter_def.gms
 707  ***
 708  * .. _parameter_def:
 709  *
 710  * Parameter definition
 711  * ====================
 712  *
 713  * This file contains the definition of all parameters used in |MESSAGEix|.
 714  *
 715  * In |MESSAGEix|, all parameters are understood as yearly values, not as per (multi-year) period.
 716  * This provides flexibility when changing the resolution of the model horizon (i.e., the set ``year``).
 717  ***
 718   
 719  ***
 720  * .. _section_parameter_general:
 721  *
 722  * General parameters of the |MESSAGEix| implementation
 723  * ----------------------------------------------------
 724  *
 725  * .. caution::
 726  *
 727  *    Parameters written in **bold** are auxiliary parameters
 728  *    that are either generated automatically when exporting a :class:`message_ix.Scenario` to gdx
 729  *    or that are computed during the *pre-processing* stage in GAMS (see the footnotes for more
 730  *    individual details). These are **not** meant to be edited through the API when editing scenarios.
 731  *
 732  * .. list-table::
 733  *    :widths: 25 20 55
 734  *    :header-rows: 1
 735  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 15
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 736  *    * - Parameter name
 737  *      - Index dimensions
 738  *      - Explanatory comments
 739  *    * - interestrate
 740  *      - ``year``
 741  *      - Economy-wide interest rate or social discount rate
 742  *    * - duration_time
 743  *      - ``time``
 744  *      - Duration of sub-annual time slices (relative to 1) [#duration_time_year]_
 745  *    * - **duration_period** (:math:`|y|`) [#short_dur]_
 746  *      - ``year``
 747  *      - Duration of multi-year period (in number of years) [#year_auto]_
 748  *    * - **duration_period_sum**
 749  *      - ``year`` | ``year``
 750  *      - Number of years between two periods [#df_auto]_
 751  *    * - **duration_time_rel**
 752  *      - ``time`` | ``time``
 753  *      - Relative duration between sub-annual time slices [#df_auto]_
 754  *    * - **df_period**
 755  *      - ``year``
 756  *      - Cumulative discount factor over period duration [#df_auto]_
 757  *    * - **df_year**
 758  *      - ``year``
 759  *      - Discount factor of the last year in the period [#df_auto]_
 760  *
 761  * .. [#duration_time_year] The element 'year' in the set of subannual time slices ``time`` has the value of 1.
 762  *    This value is assigned by default when creating a new :class:`ixmp.Scenario` based on the ``MESSAGE`` scheme.
 763  *
 764  * .. [#short_dur] The short-hand notation :math:`|y|` is used for the parameters :math:`duration\_period_y`
 765  *    in the mathematical model documentation for exponents.
 766  *
 767  * .. [#year_auto] The values for this parameter are computed automatically when exporting a ``MESSAGE``-scheme
 768  *    :class:`ixmp.Scenario` to gdx.
 769  *    Note that in |MESSAGEix|, the elements of the ``year`` set are understood to be the last year in a period.
 770  *    See :doc:`/time`.
 771  *
 772  * .. [#df_auto] These parameters are computed during the GAMS execution.
 773  ***
 774   
 775  Parameters
 776  * general parameters
 777      interestrate(year_all)         interest rate (to compute discount factor)
 778      duration_time(time)            duration of one time slice (relative to 1)
 779      duration_period(year_all)      duration of one multi-year period (in years)
 780      duration_period_sum(year_all,year_all2)  number of years between two periods ('year_all' must precede 'year_all2')
 781      duration_time_rel(time,time2)  relative duration of subannual time period ('time2' relative to parent 'time')
 782      df_period(year_all)            cumulative discount factor over period duration
 783      df_year(year_all)              discount factor of the last year in the period
 784  ;
 785   
 786  ***
 787  * .. _section_parameter_resources:
 788  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 16
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 789  * Parameters of the `Resources` section
 790  * -------------------------------------
 791  *
 792  * In |MESSAGEix|, the volume of resources at the start of the model horizon is defined by ``resource_volume``. The quantity of the
 793  * resources that are extracted per year is dependent on two parameters. The first is ``bound_extraction_up``, which constraints
 794  * the maximum extraction of the resources (by grade) in a year. The second is ``resource_remaining``, which is the maximum
 795  * extraction of the remaining resources in a certain year, as a percentage. Extraction costs for resources are represented by
 796  * ``resource_cost`` parameter.
 797  *
 798  * .. list-table::
 799  *    :widths: 25 75
 800  *    :header-rows: 1
 801  *
 802  *    * - Parameter name
 803  *      - Index dimensions
 804  *    * - resource_volume
 805  *      - ``node`` | ``commodity`` | ``grade``
 806  *    * - resource_cost
 807  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 808  *    * - resource_remaining
 809  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 810  *    * - bound_extraction_up
 811  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 812  *    * - commodity_stock [#stock]_
 813  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 814  *    * - historical_extraction [#hist]_
 815  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 816  *
 817  * .. [#stock] Commodity stock refers to an exogenous (initial) quantity of commodity in stock. This parameter allows
 818  *    (exogenous) additions to the commodity stock over the model horizon, e.g., precipitation that replenishes the water table.
 819  *
 820  * .. [#hist] Historical values of new capacity and activity can be used for parametrising the vintage structure
 821  *    of existing capacity and implement dynamic constraints in the first model period.
 822  *
 823  ***
 824   
 825  Parameter
 826  * resource and commodity parameters
 827      resource_volume(node,commodity,grade)               volume of resources in-situ at start of the model horizon
 828      resource_cost(node,commodity,grade,year_all)        extraction costs for resource
 829      resource_remaining(node,commodity,grade,year_all)   maximum extraction relative to remaining resources (by year)
 830      bound_extraction_up(node,commodity,grade,year_all)  upper bound on extraction of resources by grade
 831      commodity_stock(node,commodity,level,year_all)      exogenous (initial) quantity of commodity in stock
 832      historical_extraction(node,commodity,grade,year_all) historical extraction
 833  ;
 834   
 835  ***
 836  * .. _section_parameter_demand:
 837  *
 838  * Parameters of the `Demand` section
 839  * ----------------------------------
 840  *
 841  * .. list-table::
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 17
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 842  *    :widths: 30 70
 843  *    :header-rows: 1
 844  *
 845  *    * - Parameter name
 846  *      - Index dimensions
 847  *    * - demand [demand_fixed] [#demand]_
 848  *      - ``node`` | ``commodity`` | ``level`` | ``year`` | ``time``
 849  *    * - peak_load_factor [#peakload]_
 850  *      - ``node`` | ``commodity`` | ``year``
 851  *
 852  * .. [#demand] The parameter ``demand`` in a ``MESSAGE``-scheme ``ixmp.Scenario`` is translated
 853  *    to the parameter ``demand_fixed`` in the |MESSAGEix| implementation in GAMS. The variable ``DEMAND`` is introduced
 854  *    as an auxiliary reporting variable; it equals ``demand_fixed`` in a `MESSAGE`-standalone run and reports
 855  *    the final demand including the price response in an iterative `MESSAGE-MACRO` solution.
 856  *
 857  * .. [#peakload] The parameters ``peak_load_factor`` (maximum peak load factor for reliability constraint of firm capacity) and
 858  *    ``reliability_factor`` (reliability of a technology (per rating)) are based on the formulation proposed by Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
 859  *    It is used in :ref:`reliability_constraint`.
 860  *
 861  ***
 862   
 863  Parameter
 864      demand_fixed(node,commodity,level,year_all,time)     exogenous demand levels
 865      peak_load_factor(node,commodity,level,year_all,time) maximum peak load factor for reliability constraint of firm capacity
 866  ;
 867   
 868  ***
 869  * .. _params-tech:
 870  *
 871  * Parameters of the `Technology` section
 872  * --------------------------------------
 873  *
 874  * Input/output mapping, costs and engineering specifications
 875  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 876  *
 877  * .. list-table::
 878  *    :widths: 25 60
 879  *    :header-rows: 1
 880  *
 881  *    * - Parameter name
 882  *      - Index dimensions
 883  *    * - input [#tecvintage]_
 884  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 885  *        ``node_origin`` | ``commodity`` | ``level`` | ``time`` | ``time_origin``
 886  *    * - output [#tecvintage]_
 887  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 888  *        ``node_dest`` | ``commodity`` | ``level`` | ``time`` | ``time_dest``
 889  *    * - inv_cost [#tecvintage]_
 890  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 891  *    * - fix_cost [#tecvintage]_
 892  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 893  *    * - var_cost [#tecvintage]_
 894  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 18
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 895  *    * - levelized_cost [#levelizedcost]_
 896  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``time``
 897  *    * - construction_time [#construction]_
 898  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 899  *    * - technical_lifetime
 900  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 901  *    * - capacity_factor [#tecvintage]_
 902  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``time``
 903  *    * - operation_factor [#tecvintage]_
 904  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 905  *    * - min_utilization_factor [#tecvintage]_
 906  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
 907  *    * - rating_bin [#rating]_
 908  *      - ``node`` | ``tec`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 909  *    * - reliability_factor [#peakload]_
 910  *      - ``node`` | ``tec`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 911  *    * - flexibility_factor [#flexfactor]_
 912  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``commodity`` | ``level`` | ``time`` | ``rating``
 913  *    * - renewable_capacity_factor [#renewables]_
 914  *      - ``node_loc`` | ``commodity`` | ``grade`` | ``level`` | ``year``
 915  *    * - renewable_potential [#renewables]_
 916  *      - ``node`` | ``commodity`` | ``grade`` | ``level`` | ``year``
 917  *    * - emission_factor
 918  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``emission``
 919  *
 920  * .. [#tecvintage] Fixed and variable cost parameters and technical specifications are indexed over both
 921  *    the year of construction (vintage) and the year of operation (actual).
 922  *    This allows to represent changing technology characteristics depending on the age of the plant.
 923  *
 924  * .. [#levelizedcost] The parameter ``levelized_cost`` is computed in the GAMS pre-processing under the assumption of
 925  *    full capacity utilization until the end of the technical lifetime.
 926  *
 927  * .. [#construction] The construction time only has an effect on the investment costs; in |MESSAGEix|,
 928  *    each unit of new-built capacity is available instantaneously at the beginning of the model period.
 929  *
 930  * .. [#rating] Maximum share of technology in commodity use per rating. The upper bound of a contribution by any technology to the constraints on system reliability
 931  *    (:ref:`reliability_constraint`) and flexibility (:ref:`flexibility_constraint`) can depend on the share of the technology output in the total commodity use at
 932  *    a specific level.
 933  *
 934  * .. [#flexfactor] Contribution of technologies towards operation flexibility constraint. It is used in :ref:`flexibility_constraint`.
 935  *
 936  * .. [#renewables] ``renewable_capacity_factor`` refers to the quality of renewable potential by grade and ``renewable_potential`` refers to the size of the renewable potential per grade.
 937  *
 938  ***
 939   
 940  Parameters
 941  * technology input-output mapping and costs parameters
 942      input(node,tec,vintage,year_all,mode,node,commodity,level,time,time)  relative share of input per unit of activity
 943      output(node,tec,vintage,year_all,mode,node,commodity,level,time,time) relative share of output per unit of activity
 944      inv_cost(node,tec,year_all)                         investment costs (per unit of new capacity)
 945      fix_cost(node,tec,vintage,year_all)                 fixed costs per year (per unit of capacity maintained)
 946      var_cost(node,tec,vintage,year_all,mode,time)       variable costs of operation (per unit of capacity maintained)
 947      levelized_cost(node,tec,year_all,time)              levelized costs (per unit of new capacity)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 19
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 948   
 949  * engineering parameters
 950      construction_time(node,tec,vintage)                     duration of construction of new capacity (in years)
 951      technical_lifetime(node,tec,vintage)                    maximum technical lifetime (from year of construction)
 952      capacity_factor(node,tec,vintage,year_all,time)         capacity factor by subannual time slice
 953      operation_factor(node,tec,vintage,year_all)             yearly total operation factor
 954      min_utilization_factor(node,tec,vintage,year_all)       yearly minimum utilization factor
 955      rating_bin(node,tec,year_all,commodity,level,time,rating) maximum share of technology in commodity use per rating
 956      reliability_factor(node,tec,year_all,commodity,level,time,rating) reliability of a technology (per rating)
 957      flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time,rating) contribution of technologies towards operation flexibility constraint
 958      renewable_capacity_factor(node,commodity,grade,level,year_all) quality of renewable potential grade (>= 1)
 959      renewable_potential(node,commodity,grade,level,year_all) size of renewable potential per grade
 960      emission_factor(node,tec,year_all,year_all,mode,emission) emission intensity of activity
 961  ;
 962   
 963  ***
 964  * .. _section_parameter_bounds:
 965  *
 966  * Bounds on capacity and activity
 967  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 968  *
 969  * The following parameters specify upper and lower bounds on new capacity, total installed capacity, and activity. The bounds
 970  * on activity are implemented as the aggregate over all vintages in a specific period (:ref:`activity_bound_up` and :ref:`activity_bound_lo`).
 971  *
 972  * .. list-table::
 973  *    :widths: 25 60
 974  *    :header-rows: 1
 975  *
 976  *    * - Parameter name
 977  *      - Index names
 978  *    * - bound_new_capacity_up
 979  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 980  *    * - bound_new_capacity_lo
 981  *      - ``node_loc`` | ``tec`` | ``year_vtg``
 982  *    * - bound_total_capacity_up
 983  *      - ``node_loc`` | ``tec`` | ``year_act``
 984  *    * - bound_total_capacity_lo
 985  *      - ``node_loc`` | ``tec`` | ``year_act``
 986  *    * - bound_activity_up
 987  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 988  *    * - bound_activity_lo
 989  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
 990  *
 991  ***
 992   
 993  Parameters
 994      bound_new_capacity_up(node,tec,year_all)         upper bound on new capacity
 995      bound_new_capacity_lo(node,tec,year_all)         lower bound on new capacity
 996      bound_total_capacity_up(node,tec,year_all)       upper bound on total installed capacity
 997      bound_total_capacity_lo(node,tec,year_all)       lower bound on total installed capacity
 998      bound_activity_up(node,tec,year_all,mode,time)   upper bound on activity (aggregated over all vintages)
 999      bound_activity_lo(node,tec,year_all,mode,time)   lower bound on activity
1000  ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 20
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1001   
1002  ***
1003  * .. _section_parameter_dynamic_constraints:
1004  *
1005  * Dynamic constraints on new capacity and activity
1006  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1007  *
1008  * These parameters are used in the :ref:`dynamic constraint equations <dynamic_constraints>` to limit the growth (or decline) of activity or of new capacity in each period, relative to the preceding period.
1009  * The ``soft_`` parameters control â€˜softâ€™ relaxation of these dynamic constraints, using the method of Keppo and Strubegger (2010) :cite:`keppo_short_2010`.
1010  *
1011  * The ``growth_`` and ``soft_`` parameters are expressed as *relative annual change* and are unitless.
1012  * Because these are annual values, are compounded in the :ref:`constraint equations <dynamic_constraints>` by ``duration_period`` (:math:`|y|`) to obtain the relative *inter-period* change.
1013  *
1014  * **Example:** a value of 0.05 for ``growth_activity_up`` sets an upper bound of :math:`1 + 0.05 = 105\%` activity in one year relative to activity in the preceding year.
1015  * In a period with duration :math:`|y| = 5 \text{ years}`, the activity in the :doc:`representative year </time>` is bounded at :math:`(1.05)^5 = 128\%` of the activity in the representative year of the preceding period.
1016  *
1017  * Because these parameters do not have a ``mode`` (:math:`m`) dimension, they cannot be used to constraint the activity/new capacity of *single modes* of technologies; only the total across all modes.
1018  *
1019  * .. list-table::
1020  *    :widths: 30 70
1021  *    :header-rows: 1
1022  *
1023  *    * - Parameter name
1024  *      - Index names
1025  *    * - initial_new_capacity_up
1026  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1027  *    * - growth_new_capacity_up
1028  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1029  *    * - soft_new_capacity_up
1030  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1031  *    * - initial_new_capacity_lo
1032  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1033  *    * - growth_new_capacity_lo
1034  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1035  *    * - soft_new_capacity_lo
1036  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1037  *    * - initial_activity_up
1038  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1039  *    * - growth_activity_up
1040  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1041  *    * - soft_activity_up
1042  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1043  *    * - initial_activity_lo
1044  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1045  *    * - growth_activity_lo
1046  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1047  *    * - soft_activity_lo
1048  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1049  *
1050  ***
1051   
1052  Parameters
1053      initial_new_capacity_up(node,tec,year_all)     dynamic upper bound on new capacity (fixed initial term)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 21
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1054      growth_new_capacity_up(node,tec,year_all)      dynamic upper bound on new capacity (growth rate)
1055      soft_new_capacity_up(node,tec,year_all)        soft relaxation of dynamic upper bound on new capacity (growth rate)
1056   
1057      initial_new_capacity_lo(node,tec,year_all)     dynamic lower bound on new capacity (fixed initial term)
1058      growth_new_capacity_lo(node,tec,year_all)      dynamic lower bound on new capacity (growth rate)
1059      soft_new_capacity_lo(node,tec,year_all)        soft relaxation of dynamic lower bound on new capacity (growth rate)
1060   
1061      initial_activity_up(node,tec,year_all,time)    dynamic upper bound on activity (fixed initial term)
1062      growth_activity_up(node,tec,year_all,time)     dynamic upper bound on activity (growth rate)
1063      soft_activity_up(node,tec,year_all,time)       soft relaxation of dynamic upper bound on activity (growth rate)
1064   
1065      initial_activity_lo(node,tec,year_all,time)    dynamic lower bound on activity (fixed initial term)
1066      growth_activity_lo(node,tec,year_all,time)     dynamic lower bound on activity (growth rate)
1067      soft_activity_lo(node,tec,year_all,time)       soft relaxation of dynamic lower bound on activity (growth rate)
1068  ;
1069   
1070  *----------------------------------------------------------------------------------------------------------------------*
1071  * Add-on technology parameters                                                                                         *
1072  *----------------------------------------------------------------------------------------------------------------------*
1073   
1074  ***
1075  * .. _section_parameter_addon:
1076  *
1077  * Parameters for the add-on technologies
1078  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1079  *
1080  * The implementation of |MESSAGEix| includes the functionality to introduce "add-on technologies" that are specifically
1081  * linked to parent technologies. This feature can be used to model mitigation options (scrubber, cooling). Upper and
1082  * lower bounds of add-on technologies are defined relative to the parent: ``addon_up`` and ``addon_lo``, respectively.
1083  *
1084  * .. note::
1085  *    No default ``addon_conversion`` factor (conversion factor between add-on and parent technology activity) is set.
1086  *    This is to avoid default conversion factors of 1 being set for technologies with multiple modes, of which only a
1087  *    single mode should be linked to the add-on technology.
1088  *
1089  * .. list-table::
1090  *    :widths: 20 80
1091  *    :header-rows: 1
1092  *
1093  *    * - Parameter name
1094  *      - Index names
1095  *    * - addon_conversion
1096  *      - ``node`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time`` | ``type_addon``
1097  *    * - addon_up
1098  *      - ``node`` | ``tec`` | ``year_act`` | ``mode`` | ``time`` | ``type_addon``
1099  *    * - addon_lo
1100  *      - ``node`` | ``tec`` | ``year_act`` | ``mode`` | ``time`` | ``type_addon``
1101  *
1102  ***
1103   
1104  Parameters
1105      addon_conversion(node,tec,vintage,year_all,mode,time,type_addon) conversion factor between add-on and parent technology activity
1106      addon_up(node,tec,year_all,mode,time,type_addon)    upper bound of add-on technologies relative to parent technology
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 22
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1107      addon_lo(node,tec,year_all,mode,time,type_addon)    lower bound of add-on technologies relative to parent technology
1108  ;
1109   
1110  *----------------------------------------------------------------------------------------------------------------------*
1111  * Storage parameters
1112  *----------------------------------------------------------------------------------------------------------------------*
1113   
1114  ***
1115  * .. _section_parameter_storage:
1116  *
1117  * Parameters for representing storage solutions
1118  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1119  *
1120  * The |MESSAGEix| formulation includes "storage" solutions to model sub-annual, inter-temporal storage of commodities in each period.
1121  * This feature can be used to model electricity storage (pumped hydro, batteries, compressed air energy storage, etc.), thermal energy storage,
1122  * demand side management, and in general any technology for storing commodities (gas, hydrogen, water, etc.) over sub-annual timesteps.
1123  * The user defines the chronological order of sub-annual time steps by assigning a number to them in parameter ``time_order``.
1124  * This order is used by storage equations to shift the stored commodity in a correct timeline, e.g., from Jan through to Dec, and not vice versa.
1125  * The last sub-annual timestep is linked to the first one to close the loop of the year. Parameter ``storage_initial`` is to set an initial amount
1126  * for the content of storage in any desirable timestep (optionally). This initial value is a cost-free stored media that storage can discharge
1127  * in the same or following timesteps. ``storage_self_discharge`` represents the self-discharge (loss) of storage as % of the level of stored media
1128  * in each timestep. This allows to model time-related losses in storage separately, in addition to charging and discharging losses.
1129  *
1130  * .. list-table::
1131  *    :widths: 20 80
1132  *    :header-rows: 1
1133  *
1134  *    * - Parameter name
1135  *      - Index names
1136  *    * - storage_initial
1137  *      - ``node`` | ``tec`` | ``level`` | ``commodity`` | ``year_act`` | ``time``
1138  *    * - storage_self_discharge
1139  *      - ``node`` | ``tec`` | ``level`` | ``commodity`` | ``year_act`` | ``time``
1140  *    * - time_order
1141  *      - ``lvl_temporal`` | ``time``
1142  *
1143  ***
1144   
1145  Parameters
1146      storage_initial(node,tec,level,commodity,year_all,time)                       initial content of storage
1147      storage_self_discharge(node,tec,level,commodity,year_all,time)                self-discharge (loss) of storage as % of storage level in each timestep
1148      time_order(lvl_temporal,time)                                                 sequence of subannual timesteps
1149  ;
1150   
1151  *----------------------------------------------------------------------------------------------------------------------*
1152  * Soft relaxations of dynamic constraints                                                                              *
1153  *----------------------------------------------------------------------------------------------------------------------*
1154   
1155  ***
1156  * .. _section_parameter_soft_constraints:
1157  *
1158  * Cost parameters for 'soft' relaxations of dynamic constraints
1159  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 23
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1160  *
1161  * The implementation of |MESSAGEix| includes the functionality for 'soft' relaxations of dynamic constraints on
1162  * new-built capacity and activity (see Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
1163  * Refer to the section :ref:`dynamic_constraints`. Absolute cost and levelized cost multipliers are used
1164  * for the relaxation of upper and lower bounds.
1165  *
1166  * .. list-table::
1167  *    :widths: 20 80
1168  *    :header-rows: 1
1169  *
1170  *    * - Parameter name
1171  *      - Index names
1172  *    * - abs_cost_new_capacity_soft_up
1173  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1174  *    * - abs_cost_new_capacity_soft_lo
1175  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1176  *    * - level_cost_new_capacity_soft_up
1177  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1178  *    * - level_cost_new_capacity_soft_lo
1179  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1180  *    * - abs_cost_activity_soft_up
1181  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1182  *    * - abs_cost_activity_soft_lo
1183  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1184  *    * - level_cost_activity_soft_up
1185  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1186  *    * - level_cost_activity_soft_lo
1187  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1188  *
1189  ***
1190   
1191  Parameters
1192      abs_cost_new_capacity_soft_up(node,tec,year_all) absolute cost of dynamic new capacity constraint relaxation (upwards)
1193      abs_cost_new_capacity_soft_lo(node,tec,year_all) absolute cost of dynamic new capacity constraint relaxation (downwards)
1194      level_cost_new_capacity_soft_up(node,tec,year_all) levelized cost multiplier of dynamic new capacity constraint relaxation (upwards)
1195      level_cost_new_capacity_soft_lo(node,tec,year_all) levelized cost multiplier of dynamic new capacity constraint relaxation (downwards)
1196   
1197      abs_cost_activity_soft_up(node,tec,year_all,time)  absolute cost of dynamic activity constraint relaxation (upwards)
1198      abs_cost_activity_soft_lo(node,tec,year_all,time)  absolute cost of dynamic activity constraint relaxation (downwards)
1199      level_cost_activity_soft_up(node,tec,year_all,time) levelized cost multiplier of dynamic activity constraint relaxation (upwards)
1200      level_cost_activity_soft_lo(node,tec,year_all,time) levelized cost multiplier of dynamic activity constraint relaxation (downwards)
1201  ;
1202   
1203  ***
1204  * .. _section_parameter_historical:
1205  *
1206  * Historical capacity and activity values
1207  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1208  *
1209  * Historical data on new capacity and activity levels are included in |MESSAGEix| for
1210  * correct accounting of the vintage portfolio and a seamless implementation of dynamic constraints from
1211  * historical years to model periods.
1212  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 24
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1213  * .. list-table::
1214  *    :widths: 35 65
1215  *    :header-rows: 1
1216  *
1217  *    * - Parameter name
1218  *      - Index names
1219  *    * - historical_new_capacity [#hist]_
1220  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1221  *    * - historical_activity [#hist]_
1222  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1223  *
1224  ***
1225   
1226  Parameters
1227      historical_new_capacity(node,tec,year_all)           historical new capacity
1228      historical_activity(node,tec,year_all,mode,time)     historical activity
1229  ;
1230   
1231  ***
1232  * .. _section_parameter_investment:
1233  *
1234  * Auxiliary investment cost parameters and multipliers
1235  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1236  *
1237  * Auxiliary investment cost parameters include the remaining technical lifetime at the end of model horizon (``beyond_horizon_lifetime``) in addition to the
1238  * different scaling factors and multipliers as listed below. These factors account for remaining capacity (``remaining_capacity``) or construction time of new capacity (``construction_time_factor``),
1239  * the value of investment at the end of model horizon (``end_of_horizon_factor``) or the discount factor of remaining lifetime beyond model horizon (``beyond_horizon_factor``).
1240  *
1241  * .. list-table::
1242  *    :widths: 35 50
1243  *    :header-rows: 1
1244  *
1245  *    * - Parameter name
1246  *      - Index names
1247  *    * - construction_time_factor
1248  *      - ``node`` | ``tec`` | ``year``
1249  *    * -  remaining_capacity
1250  *      - ``node`` | ``tec`` | ``year``
1251  *    * - end_of_horizon_factor
1252  *      - ``node`` | ``tec`` | ``year``
1253  *    * - beyond_horizon_lifetime
1254  *      - ``node`` | ``tec`` | ``year``
1255  *    * - beyond_horizon_factor
1256  *      - ``node`` | ``tec`` | ``year``
1257  *
1258  *
1259  ***
1260   
1261  Parameters
1262      construction_time_factor(node,tec,year_all) scaling factor to account for construction time of new capacity
1263      remaining_capacity(node,tec,year_all,year_all) scaling factor to account for remaining capacity in period
1264      end_of_horizon_factor(node,tec,year_all)    multiplier for value of investment at end of model horizon
1265      beyond_horizon_lifetime(node,tec,year_all)  remaining technical lifetime at the end of model horizon
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 25
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1266      beyond_horizon_factor(node,tec,year_all)    discount factor of remaining lifetime beyond model horizon
1267  ;
1268   
1269  *----------------------------------------------------------------------------------------------------------------------*
1270  * Emissions                                                                                                            *
1271  *----------------------------------------------------------------------------------------------------------------------*
1272   
1273  ***
1274  * .. _section_parameter_emissions:
1275  *
1276  * Parameters of the `Emission` section
1277  * ------------------------------------
1278  *
1279  * The implementation of |MESSAGEix| includes a flexible and versatile accounting of emissions across different
1280  * categories and species, with the option to define upper bounds and taxes on various (aggregates of) emissions
1281  * and pollutants, (sets of) technologies, and (sets of) years.
1282  *
1283  * .. list-table::
1284  *    :widths: 25 75
1285  *    :header-rows: 1
1286  *
1287  *    * - Parameter name
1288  *      - Index dimensions
1289  *    * - historical_emission [#hist]_
1290  *      - ``node`` | ``emission`` | ``type_tec`` | ``year``
1291  *    * - emission_scaling [#em_scaling]_
1292  *      - ``type_emission`` | ``emission``
1293  *    * - bound_emission
1294  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
1295  *    * - tax_emission
1296  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
1297  *
1298  * .. [#em_scaling] The parameter ``emission_scaling`` is the scaling factor to harmonize bounds or taxes across types of
1299  *    emissions. It allows to efficiently aggregate different emissions/pollutants and set bounds or taxes on various categories.
1300  *
1301  ***
1302   
1303  Parameters
1304      historical_emission(node,emission,type_tec,year_all)    historical emissions by technology type (including land)
1305      emission_scaling(type_emission,emission)                scaling factor to harmonize bounds or taxes across types
1306      bound_emission(node,type_emission,type_tec,type_year)   upper bound on emissions
1307      tax_emission(node,type_emission,type_tec,type_year)     emission tax
1308  ;
1309   
1310  *----------------------------------------------------------------------------------------------------------------------*
1311  * Land-use model emulator                                                                                              *
1312  *----------------------------------------------------------------------------------------------------------------------*
1313   
1314  ***
1315  * .. _section_parameter_landuse_emulator:
1316  *
1317  * Parameters of the `Land-Use model emulator` section
1318  * ---------------------------------------------------
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 26
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1319  *
1320  * The implementation of |MESSAGEix| includes a land-use model emulator, which draws on exogenous land-use scenarios
1321  * (provided by another model) to derive supply of commodities (e.g., biomass) and emissions
1322  * from agriculture and forestry. The parameters listed below refer to the assigned land scenario.
1323  *
1324  * .. list-table::
1325  *    :widths: 25 75
1326  *    :header-rows: 1
1327  *
1328  *    * - Parameter name
1329  *      - Index dimensions
1330  *    * - historical_land [#hist]_
1331  *      - ``node`` | ``land_scenario`` | ``year``
1332  *    * - land_cost
1333  *      - ``node`` | ``land_scenario`` | ``year``
1334  *    * - land_input
1335  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1336  *    * - land_output
1337  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1338  *    * - land_use
1339  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1340  *    * - land_emission
1341  *      - ``node`` | ``land_scenario`` | ``year`` | ``emission``
1342  *    * - initial_land_scen_up
1343  *      - ``node`` | ``land_scenario`` | ``year``
1344  *    * - growth_land_scen_up
1345  *      - ``node`` | ``land_scenario`` | ``year``
1346  *    * - initial_land_scen_lo
1347  *      - ``node`` |  ``land_scenario`` | ``year``
1348  *    * - growth_land_scen_lo
1349  *      - ``node`` | ``land_scenario`` | ``year``
1350  *    * - initial_land_up
1351  *      - ``node`` | ``year`` | ``land_type``
1352  *    * - dynamic_land_up
1353  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1354  *    * - growth_land_up
1355  *      - ``node`` | ``year`` | ``land_type``
1356  *    * - initial_land_lo
1357  *      - ``node`` | ``year`` | ``land_type``
1358  *    * - dynamic_land_lo
1359  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1360  *    * - growth_land_lo
1361  *      - ``node`` | ``year`` | ``land_type``
1362  *
1363  ***
1364   
1365  Parameters
1366      historical_land(node,land_scenario,year_all)            historical land scenario assignment
1367      land_cost(node,land_scenario,year_all)                  costs of land-use scenario
1368      land_input(node,land_scenario,year_all,commodity,level,time) commodity input requirement of land-use scenario
1369      land_output(node,land_scenario,year_all,commodity,level,time) commodity output (yield) of land-use scenario
1370      land_use(node,land_scenario,year_all,land_type)         land type used in specific scenario
1371      land_emission(node,land_scenario,year_all,emission)     emissions from land-use scenario
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 27
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1372      initial_land_scen_up(node,land_scenario,year_all)       initial bound on land-scenario change (upwards)
1373      growth_land_scen_up(node,land_scenario,year_all)        relative bound on land-scenario change (upwards)
1374      initial_land_scen_lo(node,land_scenario,year_all)       initial bound on land-scenario change (downwards)
1375      growth_land_scen_lo(node,land_scenario,year_all)        relative bound on land-scenario change (downwards)
1376      initial_land_up(node,year_all,land_type)                initial bound on land-type use change (upwards)
1377      dynamic_land_up(node,land_scenario,year_all,land_type)  absolute bound on land-type use change (upwards)
1378      growth_land_up(node,year_all,land_type)                 relative bound on land-type use change (upwards)
1379      initial_land_lo(node,year_all,land_type)                initial bound on land-type use change (downwards)
1380      dynamic_land_lo(node,land_scenario,year_all,land_type)  absolute bound on land-type use change (upwards)
1381      growth_land_lo(node,year_all,land_type)                 relative bound on land-type use change (downwards)
1382  ;
1383   
1384  *----------------------------------------------------------------------------------------------------------------------*
1385  * Share constraints                                                                                                    *
1386  *----------------------------------------------------------------------------------------------------------------------*
1387   
1388  ***
1389  * .. _section_parameter_share_constraints:
1390  *
1391  * Parameters of the `Share Constraints` section
1392  * ---------------------------------------------
1393  *
1394  * Share constraints define the share of a given commodity/mode to be active on a certain level. For the mathematical
1395  * formulation, refer to :ref:`share_constraints`.
1396  *
1397  * .. list-table::
1398  *    :widths: 25 75
1399  *    :header-rows: 1
1400  *
1401  *    * - Parameter name
1402  *      - Index dimensions
1403  *    * - share_commodity_up
1404  *      - ``shares`` | ``node_share`` | ``year_act`` | ``time``
1405  *    * - share_commodity_lo
1406  *      - ``shares`` | ``node`` | ``year_act`` | ``time``
1407  *    * - share_mode_up
1408  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1409  *    * - share_mode_lo
1410  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1411  *
1412  ***
1413   
1414  Parameters
1415      share_commodity_up(shares,node,year_all,time)    upper bound of commodity share constraint
1416      share_commodity_lo(shares,node,year_all,time)    lower bound of commodity share constraint
1417      share_mode_up(shares,node,tec,mode,year_all,time)    upper bound of mode share constraint
1418      share_mode_lo(shares,node,tec,mode,year_all,time)    lower bound of mode share constraint
1419  ;
1420   
1421  *----------------------------------------------------------------------------------------------------------------------*
1422  * Generic linear relations                                                                                       *
1423  *----------------------------------------------------------------------------------------------------------------------*
1424   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 28
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1425  ***
1426  * .. _section_parameter_generic_relations:
1427  *
1428  * Parameters of the `Relations` section
1429  * -------------------------------------
1430  *
1431  * Generic linear relations are implemented in |MESSAGEix|. This feature is intended for development and testing only - all new features
1432  * should be implemented as specific new mathematical formulations and associated *sets* & *parameters*. For the formulation of the relations,
1433  * refer to :ref:`section_of_generic_relations`.
1434  *
1435  * .. list-table::
1436  *    :widths: 25 75
1437  *    :header-rows: 1
1438  *
1439  *    * - Parameter name
1440  *      - Index dimensions
1441  *    * - relation_upper
1442  *      - ``relation`` | ``node_rel`` | ``year_rel``
1443  *    * - relation_lower
1444  *      - ``relation`` | ``node_rel`` | ``year_rel``
1445  *    * - relation_cost
1446  *      - ``relation`` | ``node_rel`` | ``year_rel``
1447  *    * - relation_new_capacity
1448  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1449  *    * - relation_total_capacity
1450  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1451  *    * - relation_activity
1452  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``node_loc`` | ``tec`` | ``year_act`` | ``mode``
1453  *
1454  ***
1455   
1456  Parameters
1457      relation_upper(relation,node,year_all)    upper bound of generic relation
1458      relation_lower(relation,node,year_all)    lower bound of generic relation
1459      relation_cost(relation,node,year_all)     cost of investment and activities included in generic relation
1460      relation_new_capacity(relation,node,year_all,tec)   new capacity factor (multiplier) of generic relation
1461      relation_total_capacity(relation,node,year_all,tec) total capacity factor (multiplier) of generic relation
1462      relation_activity(relation,node,year_all,node,tec,year_all,mode) activity factor (multiplier) of generic relation
1463  ;
1464   
1465  *----------------------------------------------------------------------------------------------------------------------*
1466  * Fixed variable values                                                                                                *
1467  *----------------------------------------------------------------------------------------------------------------------*
1468   
1469  ***
1470  * .. _section_parameter_fixed:
1471  *
1472  * Fixed variable values
1473  * ---------------------
1474  *
1475  * The following parameters allow to set variable values to a specific value.
1476  * The value is usually taken from a solution of another model instance
1477  * (e.g., scenarios where a shock sets in later to mimic imperfect foresight).
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 29
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1478  *
1479  * The fixed values do not override any upper or lower bounds that may be defined,
1480  * so fixing variables to values outside of that range will yield an infeasible model.
1481  *
1482  * .. list-table::
1483  *    :widths: 25 75
1484  *    :header-rows: 1
1485  *
1486  *    * - Parameter name
1487  *      - Index dimensions
1488  *    * - fixed_extraction
1489  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
1490  *    * - fixed_stock
1491  *      - ``node`` | ``commodity`` | ``level`` | ``year``
1492  *    * - fixed_new_capacity
1493  *      - ``node`` | ``technology`` | ``year_vtg``
1494  *    * - fixed_capacity
1495  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act``
1496  *    * - fixed_activity
1497  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
1498  *    * - fixed_land
1499  *      - ``node`` | ``land_scenario`` | ``year``
1500  *
1501  * Note that the variable :math:`STOCK\_CHG` is determined implicitly by the :math:`STOCK` variable
1502  * and therefore does not need to be explicitly fixed.
1503  ***
1504   
1505  Parameters
1506      fixed_extraction(node,commodity,grade,year_all)     fixed extraction level
1507      fixed_stock(node,commodity,level,year_all)          fixed stock level
1508      fixed_new_capacity(node,tec,year_all)               fixed new-built capacity
1509      fixed_capacity(node,tec,vintage,year_all)           fixed maintained capacity
1510      fixed_activity(node,tec,vintage,year_all,mode,time) fixed activity level
1511      fixed_land(node,land_scenario,year_all)             fixed land level
1512  ;
1513   
1514  *----------------------------------------------------------------------------------------------------------------------*
1515  * Auxiliary reporting parameters                                                                                       *
1516  *----------------------------------------------------------------------------------------------------------------------*
1517   
1518  ***
1519  * .. _section_parameter_auxiliary_reporting:
1520  *
1521  * Auxiliary reporting parameters
1522  * ------------------------------
1523  *
1524  * The following parameters are used for reporting (post-processing) solved models. They assign monetary value to
1525  * the `net` total system costs from trading and emission taxes (``total_cost``). Morevoer, they also assign a value
1526  * to the `total` trade of commodities (the difference between the revenues from exports and the costs of imports,
1527  * ``trade_cost``) and to the costs from importing (``import_cost``) and the revenues from exporting (``export_cost``)
1528  * in each node and year.
1529  *
1530  * .. list-table::
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 30
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1531  *    :widths: 25 75
1532  *    :header-rows: 1
1533  *
1534  *    * - Parameter name
1535  *      - Index dimensions
1536  *    * - total_cost
1537  *      - ``node`` | ``year``
1538  *    * - trade_cost
1539  *      - ``node`` | ``year``
1540  *    * - import_cost
1541  *      - ``node`` | ``commodity`` | ``year``
1542  *    * - export_cost
1543  *      - ``node`` | ``commodity`` | ``year``
1544  ***
1545   
1546  Parameters
1547      trade_cost(node, year_all)              net of commodity import costs and commodity export revenues by node and year
1548      import_cost(node, commodity, year_all)  import costs by commodity and node and year
1549      export_cost(node, commodity, year_all)  export revenues by commodity and node and year
1550  ;
1551   
1552  *----------------------------------------------------------------------------------------------------------------------*
1553  * Auxiliary parameters for GAMS workflow                                                                               *
1554  *----------------------------------------------------------------------------------------------------------------------*
1555   
1556  Parameters
1557      ctr               counter parameter for loops
1558      status(*,*)       model solution status parameter for log writing
1559  ;
1560   
1561  ** load data from gdx, run processing scripts of auxiliary parameters
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/data_load.gms
1562  $INCLUDE MESSAGE/data_load.gms
1563   
1564  *----------------------------------------------------------------------------------------------------------------------*
1565  * load sets and parameters from dataset gdx                                                                            *
1566  *----------------------------------------------------------------------------------------------------------------------*
1567   
1568  put_utility 'log' /"+++ Importing data from 'data/demand.gdx'... +++ " ;
1569   
1570  * all sets and general parameters from the gdx file
GDXIN   C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/demand.gdx
1571  $GDXIN 'data/demand.gdx'
--- LOAD  node = 3:node
--- LOAD  tec = 4:technology
--- LOAD  year_all = 2:year
--- LOAD  commodity = 20:commodity
--- LOAD  level = 19:level
--- LOAD  grade = 18:grade
--- LOAD  mode = 17:mode
--- LOAD  time = 10:time
--- LOAD  rating = 21:rating
1572  $LOAD node, tec=technology, year_all=year, commodity, level, grade, mode, time, rating
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 31
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


--- LOAD  emission = 6:emission
--- LOAD  land_scenario = 7:land_scenario
--- LOAD  land_type = 8:land_type
--- LOAD  relation = 5:relation
1573  $LOAD emission, land_scenario, land_type, relation
--- LOAD  level_resource = 36:level_resource
--- LOAD  level_renewable = 37:level_renewable
1574  $LOAD level_resource, level_renewable
--- LOAD  lvl_spatial = 9:lvl_spatial
--- LOAD  lvl_temporal = 11:lvl_temporal
--- LOAD  map_spatial_hierarchy = 26:map_spatial_hierarchy
--- LOAD  map_temporal_hierarchy = 28:map_temporal_hierarchy
1575  $LOAD lvl_spatial, lvl_temporal, map_spatial_hierarchy, map_temporal_hierarchy
--- LOAD  map_node = 27:map_node
--- LOAD  map_time = 29:map_time
--- LOAD  map_commodity = 48:map_commodity
--- LOAD  map_resource = 46:map_resource
--- LOAD  map_stocks = 47:map_stocks
--- LOAD  map_tec = 49:map_tec
--- LOAD  map_tec_time = 51:map_tec_time
--- LOAD  map_tec_mode = 50:map_tec_mode
1576  $LOAD map_node, map_time, map_commodity, map_resource, map_stocks, map_tec, map_tec_time, map_tec_mode
--- LOAD  map_land = 53:map_land
--- LOAD  map_relation = 52:map_relation
1577  $LOAD map_land, map_relation
--- LOAD  type_tec = 13:type_tec
--- LOAD  cat_tec = 31:cat_tec
--- LOAD  type_year = 14:type_year
--- LOAD  cat_year = 32:cat_year
--- LOAD  type_emission = 15:type_emission
--- LOAD  cat_emission = 33:cat_emission
--- LOAD  type_tec_land = 34:type_tec_land
1578  $LOAD type_tec, cat_tec, type_year, cat_year, type_emission, cat_emission, type_tec_land
--- LOAD  inv_tec = 54:inv_tec
--- LOAD  renewable_tec = 55:renewable_tec
1579  $LOAD inv_tec, renewable_tec
--- LOAD  balance_equality = 44:balance_equality
1580  $LOAD balance_equality
--- LOAD  shares = 22:shares
1581  $LOAD shares
--- LOAD  addon = 41:addon
--- LOAD  type_addon = 23:type_addon
--- LOAD  cat_addon = 42:cat_addon
--- LOAD  map_tec_addon = 43:map_tec_addon
1582  $LOAD addon, type_addon, cat_addon, map_tec_addon
--- LOAD  storage_tec = 25:storage_tec
--- LOAD  level_storage = 24:level_storage
--- LOAD  map_tec_storage = 45:map_tec_storage
1583  $LOAD storage_tec, level_storage, map_tec_storage
1584  $GDXIN
1585   
1586  Execute_load 'data/demand.gdx'
1587  * general parameters
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 32
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1588  duration_period, duration_time, interestrate,
1589  * resources parameters
1590  resource_volume, resource_cost, is_bound_extraction_up, bound_extraction_up, resource_remaining,
1591  * technology technical-engineering parameters and economic costs
1592  input, output, construction_time, technical_lifetime
1593  capacity_factor, operation_factor, min_utilization_factor, inv_cost, fix_cost, var_cost,
1594  * upper and lower bounds on new capacity investment, total installed capacity and activity (including mapping sets)
1595  is_bound_new_capacity_up, is_bound_new_capacity_lo, bound_new_capacity_up, bound_new_capacity_lo,
1596  is_bound_total_capacity_up, is_bound_total_capacity_lo, bound_total_capacity_up, bound_total_capacity_lo,
1597  is_bound_activity_up, bound_activity_up, bound_activity_lo,
1598  * dynamic constraints on new capacity investment and activity of technologies
1599  is_dynamic_new_capacity_up, initial_new_capacity_up, growth_new_capacity_up,
1600  is_dynamic_new_capacity_lo, initial_new_capacity_lo, growth_new_capacity_lo,
1601  is_dynamic_activity_up, initial_activity_up, growth_activity_up,
1602  is_dynamic_activity_lo, initial_activity_lo, growth_activity_lo,
1603  * parameters for soft relaxation of dynamic constraints
1604  abs_cost_new_capacity_soft_up, abs_cost_new_capacity_soft_lo, level_cost_new_capacity_soft_up, level_cost_new_capacity_soft_lo,
1605  abs_cost_activity_soft_up, abs_cost_activity_soft_lo, level_cost_activity_soft_up, level_cost_activity_soft_lo,
1606  soft_new_capacity_up, soft_new_capacity_lo, soft_activity_up, soft_activity_lo,
1607  * share constraints
1608  map_shares_commodity_share,map_shares_commodity_total,share_commodity_up,share_commodity_lo
1609  share_mode_up,share_mode_lo,
1610  * addon technologies
1611  addon_conversion, addon_up, addon_lo
1612  * parameters for reliability, flexibility and renewable potential constraints
1613  rating_bin, reliability_factor, peak_load_factor, flexibility_factor
1614  renewable_capacity_factor, renewable_potential
1615  * emission factors, bounds and taxes on emissions (including mapping sets)
1616  historical_emission, emission_factor, emission_scaling, is_bound_emission, bound_emission, tax_emission,
1617  * historical values of new capacity investment, activity and extraction
1618  historical_new_capacity, historical_activity, historical_extraction
1619  * parameters for land-use model emulator
1620  historical_land, land_cost, land_input, land_output, land_use, land_emission,
1621  is_dynamic_land_scen_up, initial_land_scen_up, growth_land_scen_up,
1622  is_dynamic_land_scen_lo, initial_land_scen_lo, growth_land_scen_lo,
1623  is_dynamic_land_up, initial_land_up, dynamic_land_up, growth_land_up,
1624  is_dynamic_land_lo, initial_land_lo, dynamic_land_lo, growth_land_lo, growth_land_lo,
1625  * parameters for generic relations (linear constraints)
1626  is_relation_upper, is_relation_lower, relation_upper, relation_lower,
1627  relation_cost, relation_total_capacity, relation_new_capacity, relation_activity,
1628  * energy stocks
1629  commodity_stock,
1630  * demand parameters
1631  demand_fixed=demand
1632  * fixing variables to pre-specified values
1633  is_fixed_extraction, is_fixed_stock, is_fixed_new_capacity, is_fixed_capacity, is_fixed_activity, is_fixed_land
1634  fixed_extraction, fixed_stock, fixed_new_capacity, fixed_capacity, fixed_activity, fixed_land
1635  * storage parameters
1636  storage_initial, storage_self_discharge, time_order
1637  ;
1638   
1639   
1640  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 33
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1641  * ensure that each node is mapped to itself                                                                            *
1642  *----------------------------------------------------------------------------------------------------------------------*
1643   
1644  map_node(node,node) = yes ;
1645   
1646  *----------------------------------------------------------------------------------------------------------------------*
1647  * auxiliary mappings for the implementation of bounds over all modes and system reliability/flexibility constraints    *
1648  *----------------------------------------------------------------------------------------------------------------------*
1649   
1650  Set all_modes (mode) ;
1651  all_modes('all') = yes ;
1652   
1653  Set rating_unfirm(rating) ;
1654  rating_unfirm(rating) = yes ;
1655  rating_unfirm('firm') = no ;
1656   
1657  Set rating_unrated(rating) ;
1658  rating_unrated(rating) = yes ;
1659  rating_unrated('unrated') = no ;
1660   
1661  *----------------------------------------------------------------------------------------------------------------------*
1662  * assignment and computation of MESSAGE-specific auxiliary parameters                                                  *
1663  *----------------------------------------------------------------------------------------------------------------------*
1664   
1665  * get assignment of auxiliary parameter for period mappings and duration
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/period_parameter_assignment.gms
1666  $INCLUDE includes/period_parameter_assignment.gms
1667  *----------------------------------------------------------------------------------------------------------------------*
1668  * assignment and computation of auxiliary parameters                                                                   *
1669  *----------------------------------------------------------------------------------------------------------------------*
1670   
1671  * additional sets and parameters created in GAMS to make notation more concise for myopic/rolling-horizon optimization
1672  Sets
1673      historical(year_all)             set of periods prior to the start of the model horizon
1674      model_horizon(year_all)          set of periods included in the model horizon
1675      macro_horizon(year_all)          set of periods included in the MACRO model horizon
1676      seq_period(year_all,year_all2)    mapping of one period ('year_all') to the next ('year_all2')
1677      map_period(year_all,year_all2)    mapping of one period ('year_all') to itself and all subsequent periods ('year_all2')
1678      map_first_period(type_year, year_all) mapping of a 'type_year' to the first 'year'
1679      first_period(year_all)           flag for first period in model horizon
1680      last_period(year_all)            flag for last period in model horizon
1681      macro_initial_period(year_all)   flag for period in model horizon in which to initialize model parameters in (period prior to first model period) - used in MACRO
1682      macro_base_period(year_all)      flag for base year period in model horizon (period prior to first model period) - used in MACRO
1683  ;
1684   
1685  Parameter
1686      duration_period_sum(year_all,year_all2) number of years between two periods ('year_all' must precede 'year_all2')
1687      duration_time_rel(time,time2)         relative duration of subannual time period ('time2' relative to parent 'time')
1688      elapsed_years(year_all)    elapsed years since the start of the model horizon (not including 'year_all' period)
1689      remaining_years(year_all)  remaining years until the end of the model horizon (including last period)
1690      year_order(year_all)       order for members of set 'year_all'
1691  ;
1692  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 34
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1693  * assignment auxiliary dynamic sets                                                                                    *
1694  *----------------------------------------------------------------------------------------------------------------------*
1695   
1696  ** treatment of periods **
1697   
1698  * sanity checks to ensure that not more than one period is assigned to the first- and lastyear categories
1699  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ) > 1 ,
1700      abort "There is more than one period assigned as category 'firstmodelyear'!" ) ;
1701  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ) > 1 ,
1702      abort "There is more than one period assigned as category 'lastmodelyear'!" ) ;
1703  if ( sum(year_all$( cat_year("initializeyear_macro",year_all) ), 1 ) > 1 ,
1704      abort "There is more than one period assigned as category 'initializeyear_macro'!" ) ;
1705   
1706  * mapping of sequence of periods over the model horizon
1707  seq_period(year_all,year_all2)$( ORD(year_all) + 1 = ORD(year_all2) ) = yes ;
1708  map_period(year_all,year_all2)$( ORD(year_all) <= ORD(year_all2) ) = yes ;
1709   
1710  * dynamic sets (singleton) with first and last periods in model horizon of MESSAGEix (for easier reference)
1711  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ),
1712      first_period(year_all)$( cat_year("firstmodelyear",year_all) ) = yes ;
1713  else
1714      first_period(year_all)$( ORD(year_all) eq 1 ) = yes ;
1715  ) ;
1716  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ),
1717      last_period(year_all)$( cat_year("lastmodelyear",year_all) ) = yes;
1718  else
1719      last_period(year_all)$( ORD(year_all) = CARD(year_all) ) = yes ;
1720  ) ;
1721   
1722  * dynamic sets for MACRO initialization and base periods
1723  macro_initial_period(year_all) = no ;
1724  macro_initial_period(year_all)$( cat_year("initializeyear_macro",year_all) ) = yes ;
1725  macro_base_period(year_all) = no ;
1726  macro_base_period(year_all)$( ORD(year_all) = sum(year_all2$( first_period(year_all2) ), ORD(year_all2) - 1 ) )  = yes ;
1727   
1728  * assign set of historical years, the model horizon and the MACRO hoizon (includes 'macro_base_period')
1729  historical(year_all)$( ORD(year_all) < sum(year_all2$cat_year("firstmodelyear",year_all2), ORD(year_all2) ) ) = yes ;
1730  model_horizon(year_all) = no ;
1731  model_horizon(year_all)$( ORD(year_all) >= sum(year_all2$first_period(year_all2), ORD(year_all2) )
1732      AND ORD(year_all) <= sum(year_all2$last_period(year_all2), ORD(year_all2) ) ) = yes ;
1733  macro_horizon(year_all) = no ;
1734  macro_horizon(year_all)$macro_base_period(year_all) = yes;
1735  macro_horizon(year_all)$model_horizon(year_all) = yes;
1736   
1737  *----------------------------------------------------------------------------------------------------------------------*
1738  * assignment of (cumulative) discount factors over time                                                                *
1739  *----------------------------------------------------------------------------------------------------------------------*
1740   
1741  * simple method to compute discount factor (but this approach implicitly assumes a constant interest rate)
1742  *df_year(year_all) = POWER( 1 / ( 1+interestrate(year_all) ), sum(year_all2$( ORD(year_all2) < ORD(year_all) ),
1743  *    duration_period(year_all2) ) ) ;
1744   
1745  * compute per-year discount factor (using a recursive method) - set to 1 by default (interest rate = 0)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 35
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1746  df_year(year_all) = 1 ;
1747   
1748  * recursively compute the per-year discount factor
1749  loop(year_all$( ORD(year_all) > 1 ),
1750      df_year(year_all) =
1751          sum(year_all2$( seq_period(year_all2,year_all) ), df_year(year_all2)
1752              * POWER( 1 / ( 1 + interestrate(year_all) ), duration_period(year_all) ) ) ;
1753  ) ;
1754   
1755  * multiply per-year discount factor by discounted period duration
1756  df_period(year_all) =
1757      df_year(year_all) * (
1758  * multiply the per-year discount factor by the geometric series of over the duration of the period
1759          ( ( POWER( 1 + interestrate(year_all) , duration_period(year_all) ) - 1 )
1760          / interestrate(year_all) )$( interestrate(year_all) )
1761  * if interest rate = 0, multiply by the number of years in that period
1762          + ( duration_period(year_all) )$( interestrate(year_all) eq 0 ) )
1763  ;
1764   
1765  *----------------------------------------------------------------------------------------------------------------------*
1766  * assignment of auxiliary first-period-per-category mapping and parameters for duration of periods                     *
1767  *----------------------------------------------------------------------------------------------------------------------*
1768   
1769  * define order of set 'year_all' (to use as equivalent of ORD operator on the dynamic set year (subset of 'year_all') )
1770  year_order(year_all) = ORD(year_all) ;
1771   
1772  * assign the first year of each category to a specific mapping set for use in computing emissions prices
1773  map_first_period(type_year,year_all)$( cat_year(type_year,year_all)
1774      AND year_order(year_all) = SMIN(year_all2$( cat_year(type_year,year_all2) ), year_order(year_all2) ) ) = yes ;
1775   
1776  * auxiliary parameters for duration between periods (years) - not including the final period 'year_all2'
1777  duration_period_sum(year_all,year_all2) =
1778      SUM(year_all3$( ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < ORD(year_all2) ) , duration_period(year_all3) ) ;
1779   
1780  * auxiliary parameter for duration since the first year of the model horizon - not including the period 'year_all'
1781  elapsed_years(year_all) = sum(first_period, duration_period_sum(first_period,year_all) ) ;
1782   
1783  * auxiliary parameter for duration until the end of the model horizon - including the last period
1784  remaining_years(year_all) = SUM(year_all2$( ORD(year_all) <= ORD(year_all2) ) , duration_period(year_all2) ) ;
1785   
1786  * compute auxiliary parameters for relative duration of subannual time periods
1787  duration_time_rel(time,time2)$( map_time(time,time2) ) = duration_time(time2) / duration_time(time) ;
1788   
1789  * assign an additional mapping set for technologies to nodes, modes and subannual time slices (for shorter reference)
1790  map_tec_act(node,tec,year_all,mode,time)$( map_tec_time(node,tec,year_all,time) AND
1791     map_tec_mode(node,tec,year_all,mode) ) = yes ;
1792   
1793  * mapping of technology lifetime to all 'current' periods (for all non-investment technologies)
1794  map_tec_lifetime(node,tec,year_all,year_all)$( map_tec(node,tec,year_all) ) = yes ;
1795   
1796  * mapping of technology lifetime to all periods 'year_all' which are within the economic lifetime
1797  * (if built in period 'vintage')
1798  map_tec_lifetime(node,tec,vintage,year_all)$( map_tec(node,tec,vintage) AND map_tec(node,tec,year_all)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 36
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1799      AND map_period(vintage,year_all)
1800      AND duration_period_sum(vintage,year_all) < technical_lifetime(node,tec,vintage) ) = yes ;
1801   
1802  * mapping of technology lifetime to all periods 'year_all' which were built prior to the beginning of the model horizon
1803  map_tec_lifetime(node,tec,historical,year_all)$( map_tec(node,tec,year_all) AND map_period(historical,year_all)
1804      AND historical_new_capacity(node,tec,historical)
1805      AND duration_period_sum(historical,year_all)
1806          < sum(first_period, technical_lifetime(node,tec,first_period) ) ) = yes ;
1807   
1808  * mapping of renewable technologies to their input commodities
1809  map_ren_com(node,renewable_tec,commodity,year_all)$(
1810      SUM((node2,year_all2,mode,level_renewable,time_act,time),
1811          input(node2,renewable_tec,year_all,year_all2,mode,node,commodity,level_renewable,time_act,time) ) ) = yes;
1812   
1813  * mapping of renewable commodities to grades
1814  map_ren_grade(node,commodity,grade,year_all)$(
1815      SUM(level_renewable, renewable_potential(node,commodity,grade,level_renewable,year_all) ) ) = yes;
1816   
1817  * mapping of technologies to commodities and ratings
1818  map_rating(node,inv_tec,commodity,level,rating,year_all)$(
1819      SUM(time, reliability_factor(node,inv_tec,year_all,commodity,level,time,rating) ) ) = yes;
1820   
1821  * set the default capacity factor for technologies where no parameter value is provided in the input data
1822  capacity_factor(node,tec,year_all2,year_all,time)$( map_tec_time(node,tec,year_all,time)
1823      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT capacity_factor(node,tec,year_all2,year_all,time) ) = 1 ;
1824   
1825  * assign the yearly average capacity factor (used in equation OPERATION_CONSTRAINT)
1826  capacity_factor(node,tec,year_all2,year_all,'year') =
1827      sum(time$map_tec_time(node,tec,year_all,time), duration_time(time)
1828          * capacity_factor(node,tec,year_all2,year_all,time) ) ;
1829   
1830  * set the default operation factor for technologies where no parameter value is provided in the input data
1831  operation_factor(node,tec,year_all2,year_all)$( map_tec(node,tec,year_all)
1832      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT operation_factor(node,tec,year_all2,year_all) ) = 1 ;
1833   
1834  * set the upper bound on addon-technology activity to 1 by default
1835  addon_up(node,tec,year_all,mode,time,type_addon)$(
1836      map_tec_addon(tec,type_addon)
1837      AND map_tec_act(node,tec,year_all,mode,time)
1838      AND NOT addon_up(node,tec,year_all,mode,time,type_addon) ) = 1 ;
1839   
1840  * set the emission scaling parameter to 1 if only one emission is included in a category
1841  emission_scaling(type_emission,emission)$( cat_emission(type_emission,emission)
1842          and not emission_scaling(type_emission,emission) ) = 1 ;
1843   
1844  * mapping of storage technologies to their level and commodity (can be different from level and commodity of storage media)
1845  map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)$( storage_tec(tec) AND
1846      SUM( (node2,year_all2,time_act), input(node2,tec,year_all,year_all2,mode,node,commodity,level,time_act,time) ) ) = yes;
1847   
1848  * mapping of sequence of sub-annual timesteps in a period and temporal level
1849  map_time_period(year_all,lvl_temporal,time,time2)$( time_order(lvl_temporal,time) AND
1850       time_order(lvl_temporal,time) + 1 = time_order(lvl_temporal,time2) ) = yes;
1851   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 37
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1852  * mapping of sequence of the last sub-annual timestep to the first to create a close the order of timesteps
1853  map_time_period(year_all,lvl_temporal,time,time2)$( time_order(lvl_temporal,time) AND
1854       time_order(lvl_temporal,time) = SMAX(time3,time_order(lvl_temporal,time3) ) AND time_order(lvl_temporal,time2) = 1 ) = yes;
1855  *----------------------------------------------------------------------------------------------------------------------*
1856  * sanity checks on the data set                                                                                        *
1857  *----------------------------------------------------------------------------------------------------------------------*
1858   
1859  Parameter check ;
1860   
1861  * check whether all relevant technology/vintage/year combinations have positove input/output values assigned
1862  *loop((node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ),
1863  *    if ( sum( (mode,node2,commodity,level,time,time2),
1864  *            input(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2)
1865  *            + output(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2) ) eq 0 ,
1866  *        put_utility 'log'/" Warning: No input or output not defined for '"node.tl:0"|"tec.tl:0"|"vintage.tl:0"|"year_all.tl:0"' !" ;
1867  *    ) ;
1868  *) ;
1869   
1870  * check that the economic and technical lifetime are defined and consistent for all investment technologies
1871  loop((node,inv_tec,model_horizon)$( map_tec(node,inv_tec,model_horizon) ),
1872      if ( technical_lifetime(node,inv_tec,model_horizon) <= 0 ,
1873          put_utility 'log'/" Error: Technical lifetime not defined for '"node.tl:0"|"inv_tec.tl:0"|"model_horizon.tl:0"' !" ;
1874          check = 1 ;
1875      ) ;
1876  ) ;
1877  if (check,
1878      abort "There is a problem with the definition of the technical lifetime!" ;
1879  ) ;
1880   
1881  * check for validity of temporal resolution
1882  loop(lvl_temporal,
1883      loop(time2$( sum(time, map_temporal_hierarchy(lvl_temporal,time,time2) ) ),
1884          check = 1$( sum( time$( map_temporal_hierarchy(lvl_temporal,time,time2) ),
1885              duration_time(time) ) ne duration_time(time2) ) ;
1886      ) ;
1887  ) ;
1888  if (check,
1889      abort "There is a problem in the definition of the temporal resolution!" ;
1890  );
1891   
1892  * check that the resources-remaining parameter is in the interval (0,1]
1893  loop( (node,commodity,grade,year_all)$( map_resource(node,commodity,grade,year_all)
1894          AND resource_remaining(node,commodity,grade,year_all) ),
1895      if( ( resource_remaining(node,commodity,grade,year_all) > 1
1896              or resource_remaining(node,commodity,grade,year_all) <= 0 ),
1897          put_utility 'log'/" Error: Inconsistent value of parameter 'resources_remaining' "
1898              "for '"node.tl:0"|"commodity.tl:0"|"grade.tl:0"|"year_all.tl:0 "' !" ;
1899          check = 1 ;
1900      ) ;
1901  ) ;
1902  if (check,
1903      abort "There is a problem with the parameter 'resources_remaining'!" ;
1904  ) ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 38
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1905   
1906  * check that the sum of rating bins (if used for firm-cacpacity or flexibility) is greater than 1
1907  loop( (node,tec,year_all,commodity,level,time)$(
1908      ( sum((vintage,rating_unfirm), reliability_factor(node,tec,year_all,commodity,level,time,rating_unfirm) )
1909      OR sum((vintage,mode,rating_unrated)$(
1910          flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time,rating_unrated) ), 1 ) )
1911      ),
1912      if ( ( sum( rating, rating_bin(node,tec,year_all,commodity,level,time,rating) ) < 1 ),
1913          put_utility 'log'/" Error: Insufficient rating bin assignment ' "
1914              "for '"node.tl:0"|"tec.tl:0"|"year_all.tl:0 "'" ;
1915          check = 1 ;
1916      ) ;
1917  ) ;
1918  if (check,
1919      abort "There is a problem with assignment of rating bins!" ;
1920  ) ;
1921   
1922  ** compute auxiliary parameters for capacity and investment cost accounting
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/scaling_investment_costs.gms
1923  $INCLUDE MESSAGE/scaling_investment_costs.gms
1924  ***
1925  * Auxiliary investment parameters
1926  * ===============================
1927  *
1928  ***
1929   
1930  * compute the scaling investment parameters for all periods in the model horizon
1931  year(year_all)$( model_horizon(year_all) ) = yes ;
1932   
1933  * compute the technical lifetime remaining beyond the overall model horizon
1934  beyond_horizon_lifetime(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
1935      technical_lifetime(node,inv_tec,vintage) - remaining_years(vintage) ;
1936  beyond_horizon_lifetime(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) < 0 ) = 0 ;
1937   
1938  ***
1939  * Levelized capital costs
1940  * -----------------------
1941  * For the 'soft' relaxations of the dynamic constraints and the associated penalty factor in the objective function,
1942  * we need to compute the parameter :math:`levelized\_cost_{n,t,y}`.
1943  *
1944  * .. math::
1945  *    levelized\_cost_{n,t,m,y,h} := \
1946  *        & inv\_cost_{n,t,y} \cdot \frac{ interestrate_{y} \cdot \left( 1 + interestrate_{y} \right)^{|y|} }
1947  *                                      { \left( 1 + interestrate_{y} \right)^{|y|} - 1 } \\
1948  *        & + fix\_cost_{n,t,y,y} \cdot \frac{ 1 }{ \sum_{h'} duration\_time_{h'} \cdot capacity\_factor_{n,t,y,y,h'} } \\
1949  *        & + var\_cost_{n,t,y,y,m,h}
1950  *
1951  * where :math:`|y| = technical\_lifetime_{n,t,y}`. This formulation implicitly assumes constant fixed
1952  * and variable costs over time.
1953  *
1954  * **Warning:** All soft relaxations of the dynamic activity constraint are
1955  * disabled if the levelized costs are negative!
1956  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 39
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1957   
1958  levelized_cost(node,tec,year,time)$( map_tec_time(node,tec,year,time) AND inv_tec(tec) ) =
1959      inv_cost(node,tec,year)
1960          * (
1961  * compute discounted annualized investment costs if interest rate > 0
1962              ( interestrate(year)
1963                  * ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year)
1964                  / ( ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year) - 1 )
1965                )$( interestrate(year) )
1966  * if interest rate = 0, annualized investment costs are total investment costs divided by technical lifetime
1967              + ( 1 / technical_lifetime(node,tec,year) )$( interestrate(year) eq 0 )
1968            )
1969  * add (proportional) fixed and variable costs, assuming that these remain constant over the technical lifetime
1970      + ( fix_cost(node,tec,year,year) /
1971            sum(time2$( map_tec_time(node,tec,year,time2) ),
1972               duration_time(time2) * capacity_factor(node,tec,year,year,time2) )
1973          )$( fix_cost(node,tec,year,year) )
1974      + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost(node,tec,year,year,mode,time) )
1975  ;
1976   
1977  * the soft relaxations of the dynamic activity constraints are disabled if the levelized costs are negative
1978  loop((node,tec,year,time)$( levelized_cost(node,tec,year,time) < 0
1979          AND ( soft_activity_up(node,tec,year,time) + soft_activity_lo(node,tec,year,time) ) > 0 ),
1980      put_utility 'log' /'Remove relaxations for dynamic activity constraints for ',node.tl,'|',tec.tl,'|',year.tl,'!' ;
1981      soft_activity_up(node,tec,year,time) = 0 ;
1982      soft_activity_lo(node,tec,year,time) = 0 ;
1983  ) ;
1984   
1985  ***
1986  * Construction time accounting
1987  * ----------------------------
1988  * If the construction of new capacity takes a significant amount of time,
1989  * investment costs have to be scaled up accordingly to account for the higher capital costs.
1990  *
1991  * .. math::
1992  *    construction\_time\_factor_{n,t,y} = \left( 1 + interestrate_y \right)^{|y|}
1993  *
1994  * where :math:`|y| = construction\_time_{n,t,y}`. If no construction time is specified, the default value of the
1995  * investment cost scaling factor defaults to 1. The model assumes that the construction time only plays a role
1996  * for the investment costs, i.e., each unit of new-built capacity is available instantaneously.
1997  *
1998  * **Comment:** This formulation applies the discount rate of the vintage year
1999  * (i.e., the year in which the new capacity becomes operational).
2000  ***
2001   
2002  * set default construction_time_factor to 1
2003  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) ) = 1;
2004   
2005  * compute the construction_time_factor
2006  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) AND construction_time(node,inv_tec,year) ) =
2007       ( 1 + interestrate(year) ) ** construction_time(node,inv_tec,year) ;
2008   
2009  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 40
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2010  * Investment costs beyond the model horizon
2011  * -----------------------------------------
2012  * If the technical lifetime of a technology exceeds the model horizon :math:`Y^{model}`, the model has to add
2013  * a scaling factor to the investment costs (:math:`end\_of\_horizon\_factor_{n,t,y}`). Assuming a constant
2014  * stream of revenue (marginal value of the capacity constraint), this can be computed by annualizing investment costs
2015  * from the condition that in an optimal solution, the investment costs must equal the discounted future revenues,
2016  * if the investment variable :math:`CAP\_NEW_{n,t,y} > 0`:
2017  *
2018  * .. math::
2019  *    inv\_cost_{n,t,y^V} = \sum_{y \in Y^{lifetime}_{n,t,y^V}} df\_year_{y} \cdot \beta_{n,t},
2020  *
2021  * Here, :math:`\beta_{n,t} > 0` is the dual variable to the capacity constraint (assumed constant over future periods)
2022  * and :math:`Y^{lifetime}_{n,t,y^V}` is the set of periods in the lifetime of a plant built in period :math:`y^V`.
2023  * Then, the scaling factor :math:`end\_of\_horizon\_factor_{n,t,y^V}` can be derived as follows:
2024  *
2025  * .. math::
2026  *    end\_of\_horizon\_factor_{n,t,y^V} :=
2027  *    \frac{\sum_{y \in Y^{lifetime}_{n,t,y^V} \cap Y^{model}} df\_year_{y} }
2028  *        {\sum_{y' \in Y^{lifetime}_{n,t,y^V}} df\_year_{y'} + beyond\_horizon\_factor_{n,t,y^V} }
2029  *    \in (0,1],
2030  *
2031  * where the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` accounts for the discount factor beyond the
2032  * overall model horizon (the set :math:`Y` in contrast to the set :math:`Y^{model} \subseteq Y` of the periods
2033  * included in the current model iteration (see the page on the recursive-dynamic model solution approach).
2034  *
2035  * .. math::
2036  *    beyond\_horizon\_lifetime_{n,t,y^V} :=  \max \Big\{ 0,
2037  *        economic\_lifetime_{n,t,y^V} - \sum_{y' \geq y^V} duration\_period_{y'} \Big\}
2038  *
2039  * .. math::
2040  *    beyond\_horizon\_factor_{n,t,y^V} :=
2041  *        df\_year_{\widehat{y}} \cdot \frac{1}{ \left( 1 + interestrate_{\widehat{y}} \right)^{|\widehat{y}|} }
2042  *        \cdot \frac{ 1 - \left( \frac{1}{1 + interestrate_{\widehat{y}}} \right)^{|\widetilde{y}|}}
2043  *                   { 1 - \frac{1}{1 + interestrate_{\widehat{y}}}}
2044  *
2045  * where :math:`\widehat{y}` is the last period included in the overall model horizon,
2046  * :math:`|\widehat{y}| = period\_duration\_period_{\widehat{y}}`
2047  * and :math:`|\widetilde{y}| = beyond\_horizon\_lifetime_{n,t,y^V}`.
2048  *
2049  * If the interest rate is zero, i.e., :math:`interestrate_{\widehat{y}} = 0`,
2050  * the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` equals the remaining technical lifetime
2051  * beyond the model horizon and the parameter :math:`end\_of\_horizon\_factor_{n,t,y^V}` equals
2052  * the share of technical lifetime within the model horizon.
2053  ***
2054   
2055  * compute the cumulative discount factor of the technical lifetime remaining beyond the model horizon
2056  beyond_horizon_factor(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) )
2057      = sum(last_period,
2058  * compute the discount factor of the very last year (not period) in the model horizon
2059          df_year(last_period) * (
2060  * multiply this by the geometric series of remaining technical lifetime if interestrate of last model period > 0
2061              (
2062                  ( 1 - POWER( 1 / ( 1 + interestrate(last_period) ), beyond_horizon_lifetime(node,inv_tec,vintage) ) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 41
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2063                  / ( 1 - 1 / ( 1 + interestrate(last_period) ) )
2064              )$( interestrate(last_period) )
2065  * if interest rate = 0, multiply by remaining technical lifetime
2066              + ( beyond_horizon_lifetime(node,inv_tec,vintage) )$( interestrate(last_period) eq 0 )
2067          )
2068      ) ;
2069   
2070  * deterine the parameter end_of_horizon_factor used for scaling investment costs to account for
2071  * technical lifetime beyond the model horizon
2072  end_of_horizon_factor(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
2073      sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), df_period(year_all)  )
2074      / ( sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), df_period(year_all) )
2075          + beyond_horizon_factor(node,inv_tec,vintage) ) ;
2076   
2077  ***
2078  * **Possible extension:** Instead of assuming :math:`\beta_{n,t}` to be constant over time, one could include
2079  * a simple (linear) projection of :math:`\beta_{n,t,y}` beyond the end of the model horizon. However, this would likely
2080  * require to include the computation of dual variables endogenously, and thus a mixed-complementarity formulation of
2081  * the model.
2082  ***
2083   
2084  ***
2085  * Remaining installed capacity
2086  * ----------------------------
2087  * The model has to take into account that the technical lifetime of a technology may not coincide with the cumulative
2088  * period duration. Therefore, the model introduces the parameter :math:`remaining\_capacity_{n,t,y^V,y}`
2089  * as a factor of remaining technical lifetime in the last period of operation divided by the duration of that period.
2090  *
2091  ***
2092   
2093  # set default to 1 (assume that the full capacity is available over the entire period)
2094  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ) = 1 ;
2095   
2096  # if technical lifetime ends in the respective period, set remaining_capacity factor as share of lifetime in that period
2097  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all)
2098          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) < duration_period(year_all) )
2099          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) > 0 ) )
2100      = ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) ) / duration_period(year_all) ;
2101   
2102  * unassign the dynamic set 'year'
2103  year(year_all) = no;
2104   
2105  *----------------------------------------------------------------------------------------------------------------------*
2106  * variable and equation definition, model declaration                                                                  *
2107  *----------------------------------------------------------------------------------------------------------------------*
2108   
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_core.gms
2109  $INCLUDE MESSAGE/model_core.gms
2110  ***
2111  * Mathematical formulation (core model)
2112  * =====================================
2113  *
2114  * The |MESSAGEix| systems-optimization model minimizes total costs
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 42
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2115  * while satisfying given demand levels for commodities/services
2116  * and considering a broad range of technical/engineering constraints and societal restrictions
2117  * (e.g. bounds on greenhouse gas emissions, pollutants, system reliability).
2118  * Demand levels are static (i.e. non-elastic), but the demand response can be integrated by linking |MESSAGEix|
2119  * to the single sector general-economy MACRO model included in this framework.
2120  *
2121  * For the complete list of sets, mappings and parameters,
2122  * refer to the auto-documentation pages :ref:`sets_maps_def` and :ref:`parameter_def`.
2123  ***
2124   
2125  *----------------------------------------------------------------------------------------------------------------------*
2126  * Notation declaration                                                                                                 *
2127  *----------------------------------------------------------------------------------------------------------------------*
2128   
2129  ***
2130  * Notation declaration
2131  * --------------------
2132  * The following short notation is used in the mathematical description relative to the GAMS code:
2133  *
2134  * Mathematical notation of sets
2135  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2136  * ================================== ===================================================================================
2137  * Math notation                      GAMS set & index notation
2138  * ================================== ===================================================================================
2139  * :math:`n \in N`                    node (across spatial hierarchy levels)
2140  * :math:`y \in Y`                    year (all periods including historical and model horizon)
2141  * :math:`y \in Y^M \subset Y`        time periods included in model horizon
2142  * :math:`y \in Y^H \subset Y`        historical time periods (prior to first model period)
2143  * :math:`c \in C`                    commodity
2144  * :math:`l \in L`                    level
2145  * :math:`g \in G`                    grade
2146  * :math:`t \in T`                    technology (a.k.a tec)
2147  * :math:`h \in H`                    time (subannual time periods)
2148  * :math:`m \in M`                    mode
2149  * :math:`q \in Q`                    rating of non-dispatchable technologies relative to aggregate commodity use
2150  * :math:`e \in E`                    emission, pollutants
2151  * :math:`s \in S`                    scenarios of land use (for land-use model emulator)
2152  * :math:`u \in U`                    land-use types
2153  * :math:`r \in R`                    set of generic relations (linear constraints)
2154  * :math:`t \in T^{INV} \subseteq T`  all technologies with investment decisions and capacity constraints
2155  * :math:`t \in T^{REN} \subseteq T`  all technologies which draw their input from the renewable level
2156  * :math:`n \in N(\widehat{n})`       all nodes that are subnodes of node :math:`\widehat{n}`
2157  * :math:`y \in Y(\widehat{y})`       all years mapped to the category ``type_year`` :math:`\widehat{y}`
2158  * :math:`t \in T(\widehat{t})`       all technologies mapped to the category ``type_tec`` :math:`\widehat{t}`
2159  * :math:`e \in E(\widehat{e})`       all emissions mapped to the category ``type_emission`` :math:`\widehat{e}`
2160  * ================================== ===================================================================================
2161  *
2162  ***
2163   
2164  *----------------------------------------------------------------------------------------------------------------------*
2165  * Variable definitions                                                                                                 *
2166  *----------------------------------------------------------------------------------------------------------------------*
2167   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 43
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2168  ***
2169  * Decision variables
2170  * ^^^^^^^^^^^^^^^^^^
2171  * ============================================= ========================================================================
2172  * Variable                                      Explanatory text
2173  * ============================================= ========================================================================
2174  * :math:`OBJ \in \mathbb{R}`                    Objective value of the optimization program
2175  * :math:`EXT_{n,c,g,y} \in \mathbb{R}_+`        Extraction of non-renewable/exhaustible resources from reserves
2176  * :math:`STOCK_{n,c,l,y} \in \mathbb{R}_+`      Quantity in stock (storage) at start of period :math:`y`
2177  * :math:`STOCK\_CHG_{n,c,l,y,h} \in \mathbb{R}` Input or output quantity into intertemporal commodity stock (storage)
2178  * :math:`REN_{n,t,c,g,y,h}`                     Activity of renewable technologies per grade
2179  * :math:`CAP\_NEW_{n,t,y} \in \mathbb{R}_+`     Newly installed capacity (yearly average over period duration)
2180  * :math:`CAP_{n,t,y^V,y} \in \mathbb{R}_+`      Maintained capacity in year :math:`y` of vintage :math:`y^V`
2181  * :math:`CAP\_FIRM_{n,t,c,l,y,q}`               Capacity counting towards firm (dispatchable)
2182  * :math:`ACT_{n,t,y^V,y,m,h} \in \mathbb{R}`    Activity of a technology (by vintage, mode, subannual time)
2183  * :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}`       Activity attributed to a particular rating bin [#ACT_RATING]_
2184  * :math:`CAP\_NEW\_UP_{n,t,y} \in \mathbb{R}_+` Relaxation of upper dynamic constraint on new capacity
2185  * :math:`CAP\_NEW\_LO_{n,t,y} \in \mathbb{R}_+` Relaxation of lower dynamic constraint on new capacity
2186  * :math:`ACT\_UP_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of upper dynamic constraint on activity [#ACT_BD]_
2187  * :math:`ACT\_LO_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of lower dynamic constraint on activity [#ACT_BD]_
2188  * :math:`LAND_{n,s,y} \in [0,1]`                Relative share of land-use scenario (for land-use model emulator)
2189  * :math:`EMISS_{n,e,\widehat{t},y}`             Auxiliary variable for aggregate emissions by technology type
2190  * :math:`REL_{r,n,y} \in \mathbb{R}`            Auxiliary variable for left-hand side of relations (linear constraints)
2191  * :math:`COMMODITY\_USE_{n,c,l,y}`              Auxiliary variable for amount of commodity used at specific level
2192  * ============================================= ========================================================================
2193  *
2194  * The index :math:`y^V` is the year of construction (vintage) wherever it is necessary to
2195  * clearly distinguish between year of construction and the year of operation.
2196  *
2197  * All decision variables are by year, not by (multi-year) period, except :math:`STOCK_{n,c,l,y}`.
2198  * In particular, the new capacity variable :math:`CAP\_NEW_{n,t,y}` has to be multiplied by the number of years
2199  * in a period :math:`|y| = duration\_period_{y}` to determine the available capacity in subsequent periods.
2200  * This formulation gives more flexibility when it comes to using periods of different duration
2201  * (more intuitive comparison across different periods).
2202  *
2203  * The current model framework allows both input or output normalized formulation.
2204  * This will affect the parametrization, see Section :ref:`efficiency_output` for more details.
2205  *
2206  * .. [#ACT_RATING] The auxiliary variable :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}` is defined in terms of input or
2207  *    output of the technology.
2208  *
2209  * .. [#ACT_BD] The dynamic activity constraints are implemented as summed over all modes;
2210  *    therefore, the variables for the relaxation are not indexed over the set ``mode``.
2211  *
2212  ***
2213   
2214  Variables
2215    OBJ objective value of the optimisation problem
2216    CO2_CUM Total co2
2217    COST_CUM Total cost
2218  ;
2219   
2220  Positive Variables
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 44
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2221  * resource production/extraction variable
2222      EXT(node,commodity,grade,year_all)   extraction of fossil resources
2223  * commodity in inter-temporal stock
2224      STOCK(node,commodity,level,year_all) total quantity in intertemporal stock (storage)
2225  * use of renewable resources
2226      REN(node, tec, commodity, grade, year_all, time)     activity of renewables specified per renewables grade
2227  * investment and capacity variables
2228      CAP_NEW(node,tec,year_all)       new capacity by year
2229      CAP(node,tec,vintage,year_all)   total installed capacity by year
2230      CAP_FIRM(node,tec,commodity,level,year_all) capacity counting towards system reliability constraints
2231  * auxiliary variable for distributing total activity of a technology to a number of "rating bins"
2232      ACT_RATING(node,tec,vintage,year_all,commodity,level,time,rating)
2233  * variables for soft relaxation of dynamic activity constraints
2234      CAP_NEW_UP(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (upwards)
2235      CAP_NEW_LO(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (downwards)
2236      ACT_UP(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (upwards)
2237      ACT_LO(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (downwards)
2238  * land-use model emulator
2239      LAND(node,land_scenario,year_all) relative share of land-use scenario
2240   
2241  Variables
2242  * intertemporal stock variables (input or output quantity into the stock)
2243      STOCK_CHG(node,commodity,level,year_all,time) annual input into and output from stocks of commodities
2244  * technology activity variables (can be negative for some technologies, upper and lower bounds stated explicitly)
2245      ACT(node,tec,vintage,year_all,mode,time)     activity of technology by mode-year-timeperiod
2246  * auxiliary variables for finrm-capacity formulation
2247      COMMODITY_USE(node,commodity,level,year_all) total amount of a commodity & level that was used or consumed
2248  * nodal system costs over time
2249      COST_NODAL(node, year_all)                   system costs at the node level over time
2250  * auxiliary variable for aggregate emissions by technology type and land-use model emulator
2251      EMISS(node,emission,type_tec,year_all)       aggregate emissions by technology type and land-use model emulator
2252  * auxiliary variable for left-hand side of relations (linear constraints)
2253      REL(relation,node,year_all)                  auxiliary variable for left-hand side of user-defined relations
2254  * auxiliary variable for left-hand side of commodity balance
2255      COMM(node,commodity,level,year_all,time)         auxiliary variable for left-hand side of commodity balance
2256  ;
2257   
2258  ***
2259  * Auxiliary variables
2260  * ^^^^^^^^^^^^^^^^^^^
2261  * ============================================= ========================================================================
2262  * Variable                                      Explanatory text
2263  * ============================================= ========================================================================
2264  * :math:`DEMAND_{n,c,l,y,h} \in \mathbb{R}`     Demand level (in equilibrium with MACRO integration)
2265  * :math:`PRICE\_COMMODITY_{n,c,l,y,h}`          Commodity price (undiscounted marginals of the commodity balances)
2266  * :math:`PRICE\_EMISSION_{n,e,\widehat{t},y}`   Emission price (undiscounted marginals of EMISSION_BOUND constraint)
2267  * :math:`COST\_NODAL\_NET_{n,y} \in \mathbb{R}` System costs at the node level net of energy trade revenues/cost
2268  * :math:`GDP_{n,y} \in \mathbb{R}`              gross domestic product (GDP) in market exchange rates for MACRO reporting
2269  * ============================================= ========================================================================
2270  *
2271  ***
2272   
2273  Variables
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 45
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2274  * auxiliary variables for demand, prices, costs and GDP (for reporting when MESSAGE is run with MACRO)
2275      DEMAND(node,commodity,level,year_all,time) demand
2276      PRICE_COMMODITY(node,commodity,level,year_all,time)  commodity price (derived from marginals of COMMODITY_BALANCE constraint)
2277      PRICE_EMISSION(node,type_emission,type_tec,year_all) emission price (derived from marginals of EMISSION_BOUND constraint)
2278      COST_NODAL_NET(node,year_all)              system costs at the node level over time including effects of energy trade
2279      GDP(node,year_all)                         gross domestic product (GDP) in market exchange rates for MACRO reporting
2280  ;
2281   
2282  *----------------------------------------------------------------------------------------------------------------------*
2283  * auxiliary bounds on activity variables (debugging mode, avoid inter-vintage arbitrage, investment technology)                                                        *
2284  *----------------------------------------------------------------------------------------------------------------------*
2285   
2286  * include upper and lower bounds (to avoid unbounded models)
2287  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2288  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = -1e9 ;
2289  * ACT.up(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2290  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = 1e9 ;
2291   
2292  * to avoid "inter-vintage arbitrage" (across different vintages of technologies), all activities that
2293  * have positive lower bounds are assumed to be non-negative
2294  ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2295      AND map_tec_act(node,tec,year_all2,mode,time) AND bound_activity_lo(node,tec,year_all2,mode,time) >= 0 ) = 0 ;
2296  * previous implementation using upper bounds
2297  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2298  *    AND map_tec_act(node,tec,year_all2,mode,time)
2299  *    AND ( NOT bound_activity_up(node,tec,year_all2,mode,time)
2300  *        OR bound_activity_up(node,tec,year_all2,mode,time) >= 0 ) ) = 0 ;
2301   
2302  * assume that all "investment" technologies must have non-negative activity levels
2303  ACT.lo(node,inv_tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,inv_tec,year_all,year_all2)
2304      AND map_tec_act(node,inv_tec,year_all2,mode,time) ) = 0 ;
2305   
2306  *----------------------------------------------------------------------------------------------------------------------*
2307  * fixing variables to pre-specified values                                                                             *
2308  *----------------------------------------------------------------------------------------------------------------------*
2309   
2310  EXT.fx(node,commodity,grade,year_all)$( is_fixed_extraction(node,commodity,grade,year_all) ) =
2311      fixed_extraction(node,commodity,grade,year_all);
2312  STOCK.fx(node,commodity,level,year_all)$( is_fixed_stock(node,commodity,level,year_all) ) =
2313      fixed_stock(node,commodity,level,year_all) ;
2314  CAP_NEW.fx(node,tec,year_all)$( is_fixed_new_capacity(node,tec,year_all) ) =
2315      fixed_new_capacity(node,tec,year_all) ;
2316  CAP.fx(node,tec,vintage,year_all)$( is_fixed_capacity(node,tec,vintage,year_all) ) =
2317      fixed_capacity(node,tec,vintage,year_all) ;
2318  ACT.fx(node,tec,vintage,year_all,mode,time)$( is_fixed_activity(node,tec,vintage,year_all,mode,time) ) =
2319      fixed_activity(node,tec,vintage,year_all,mode,time) ;
2320  LAND.fx(node,land_scenario,year_all)$( is_fixed_land(node,land_scenario,year_all) ) =
2321      fixed_land(node,land_scenario,year_all) ;
2322   
2323  *----------------------------------------------------------------------------------------------------------------------*
2324  * auxiliary variables for debugging mode (identifying infeasibilities)                                                 *
2325  *----------------------------------------------------------------------------------------------------------------------*
2326   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 46
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2327  * report mapping for debugging
2328  Set
2329      AUX_ACT_BOUND_UP(node,tec,year_all,year_all2,mode,time) indicator whether auxiliary upper bound on activity is binding
2330      AUX_ACT_BOUND_LO(node,tec,year_all,year_all2,mode,time) indicator whether auxiliary upper bound on activity is binding
2331  ;
2332   
2333  * slack variables for debugging
2334  Positive variables
2335      SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year_all,time) slack variable for commodity balance (upwards)
2336      SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year_all,time) slack variable for commodity balance (downwards)
2337      SLACK_CAP_NEW_BOUND_UP (node,tec,year_all)        slack variable for bound on new capacity (upwards)
2338      SLACK_CAP_NEW_BOUND_LO (node,tec,year_all)        slack variable for bound on new capacity (downwards)
2339      SLACK_CAP_TOTAL_BOUND_UP (node,tec,year_all)      slack variable for upper bound on total installed capacity
2340      SLACK_CAP_TOTAL_BOUND_LO (node,tec,year_all)      slack variable for lower bound on total installed capacity
2341      SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year_all)       slack variable for dynamic new capacity constraint (upwards)
2342      SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year_all)       slack variable for dynamic new capacity constraint (downwards)
2343      SLACK_ACT_BOUND_UP(node,tec,year_all,mode,time)   slack variable for upper bound on activity
2344      SLACK_ACT_BOUND_LO(node,tec,year_all,mode,time)   slack variable for lower bound on activity
2345      SLACK_ACT_DYNAMIC_UP(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (upwards)
2346      SLACK_ACT_DYNAMIC_LO(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (downwards)
2347      SLACK_LAND_SCEN_UP(node,land_scenario,year_all)   slack variable for dynamic land scenario constraint relaxation (upwards)
2348      SLACK_LAND_SCEN_LO(node,land_scenario,year_all)   slack variable for dynamic land scenario constraint relaxation (downwards)
2349      SLACK_LAND_TYPE_UP(node,year_all,land_type)       slack variable for dynamic land type constraint relaxation (upwards)
2350      SLACK_LAND_TYPE_LO(node,year_all,land_type)       slack variable for dynamic land type constraint relaxation (downwards)
2351      SLACK_RELATION_BOUND_UP(relation,node,year_all)   slack variable for upper bound of generic relation
2352      SLACK_RELATION_BOUND_LO(relation,node,year_all)   slack variable for lower bound of generic relation
2353  ;
2354   
2355  *----------------------------------------------------------------------------------------------------------------------*
2356  * equation definitions                                                                                                 *
2357  *----------------------------------------------------------------------------------------------------------------------*
2358   
2359  Equations
2360      OBJECTIVE                       objective value of the optimisation problem
2361      CO2_CUM_DEF                     definition of total CO2 emission
2362      COST_CUM_DEF                    definition of the total cost
2363      COST_ACCOUNTING_NODAL           cost accounting at node level over time
2364      EXTRACTION_EQUIVALENCE          auxiliary equation to simplify the resource extraction formulation
2365      EXTRACTION_BOUND_UP             upper bound on extraction (by grade)
2366      RESOURCE_CONSTRAINT             constraint on resources remaining in each period (maximum extraction per period)
2367      RESOURCE_HORIZON                constraint on extraction over entire model horizon (resource volume in place)
2368      COMMODITY_BALANCE_GT            commodity supply greater than or equal demand
2369      COMMODITY_BALANCE_LT            commodity supply lower than or equal demand
2370      STOCKS_BALANCE                  commodity inter-temporal balance of stocks
2371      CAPACITY_CONSTRAINT             capacity constraint for technology (by sub-annual time slice)
2372      CAPACITY_MAINTENANCE_HIST       constraint for capactiy maintainance  historical installation (built before start of model horizon)
2373      CAPACITY_MAINTENANCE_NEW        constraint for capactiy maintainance of new capacity built in the current period (vintage == year)
2374      CAPACITY_MAINTENANCE            constraint for capacity maintainance over the technical lifetime
2375      OPERATION_CONSTRAINT            constraint on maximum yearly operation (scheduled down-time for maintainance)
2376      MIN_UTILIZATION_CONSTRAINT      constraint for minimum yearly operation (aggregated over the course of a year)
2377      RENEWABLES_POTENTIAL_CONSTRAINT constraint on renewable resource potential
2378      RENEWABLES_CAPACITY_REQUIREMENT lower bound on required overcapacity when using lower grade potentials
2379      RENEWABLES_EQUIVALENCE          equation to define the renewables extraction
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 47
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2380      ADDON_ACTIVITY_UP               addon-technology activity upper constraint
2381      ADDON_ACTIVITY_LO               addon technology activity lower constraint
2382      COMMODITY_USE_LEVEL             aggregate use of commodity by level as defined by total input into technologies
2383      ACTIVITY_BY_RATING              constraint on auxiliary rating-specific activity variable by rating bin
2384      ACTIVITY_RATING_TOTAL           equivalence of auxiliary rating-specific activity variables to actual activity
2385      FIRM_CAPACITY_PROVISION         contribution of dispatchable technologies to auxilary firm-capacity variable
2386      SYSTEM_RELIABILITY_CONSTRAINT   constraint on total system reliability (firm capacity)
2387      SYSTEM_FLEXIBILITY_CONSTRAINT   constraint on total system flexibility
2388      NEW_CAPACITY_BOUND_UP           upper bound on technology capacity investment
2389      NEW_CAPACITY_BOUND_LO           lower bound on technology capacity investment
2390      TOTAL_CAPACITY_BOUND_UP         upper bound on total installed capacity
2391      TOTAL_CAPACITY_BOUND_LO         lower bound on total installed capacity
2392      NEW_CAPACITY_CONSTRAINT_UP      dynamic constraint for capacity investment (learning and spillovers upper bound)
2393      NEW_CAPACITY_SOFT_CONSTRAINT_UP bound on soft relaxation of dynamic new capacity constraints (upwards)
2394      NEW_CAPACITY_CONSTRAINT_LO      dynamic constraint on capacity investment (lower bound)
2395      NEW_CAPACITY_SOFT_CONSTRAINT_LO bound on soft relaxation of dynamic new capacity constraints (downwards)
2396      ACTIVITY_BOUND_UP               upper bound on activity summed over all vintages
2397      ACTIVITY_BOUND_LO               lower bound on activity summed over all vintages
2398      ACTIVITY_BOUND_ALL_MODES_UP     upper bound on activity summed over all vintages and modes
2399      ACTIVITY_BOUND_ALL_MODES_LO     lower bound on activity summed over all vintages and modes
2400      SHARE_CONSTRAINT_COMMODITY_UP   upper bounds on share constraints for commodities
2401      SHARE_CONSTRAINT_COMMODITY_LO   lower bounds on share constraints for commodities
2402      SHARE_CONSTRAINT_MODE_UP        upper bounds on share constraints for modes of a given technology
2403      SHARE_CONSTRAINT_MODE_LO        lower bounds on share constraints for modes of a given technology
2404      ACTIVITY_CONSTRAINT_UP          dynamic constraint on the market penetration of a tgeneric_share_factor_upechnology activity (upper bound)
2405      ACTIVITY_SOFT_CONSTRAINT_UP     bound on relaxation of the dynamic constraint on market penetration (upper bound)
2406      ACTIVITY_CONSTRAINT_LO          dynamic constraint on the market penetration of a technology activity (lower bound)
2407      ACTIVITY_SOFT_CONSTRAINT_LO     bound on relaxation of the dynamic constraint on market penetration (lower bound)
2408      EMISSION_EQUIVALENCE            auxiliary equation to simplify the notation of emissions
2409      EMISSION_CONSTRAINT             nodal-regional-global constraints on emissions (by category)
2410      LAND_CONSTRAINT                 constraint on total land use (linear combination of land scenarios adds up to 1)
2411      DYNAMIC_LAND_SCEN_CONSTRAINT_UP dynamic constraint on land scenario change (upper bound)
2412      DYNAMIC_LAND_SCEN_CONSTRAINT_LO dynamic constraint on land scenario change (lower bound)
2413      DYNAMIC_LAND_TYPE_CONSTRAINT_UP dynamic constraint on land-use change (upper bound)
2414      DYNAMIC_LAND_TYPE_CONSTRAINT_LO dynamic constraint on land-use change (lower bound)
2415      RELATION_EQUIVALENCE            auxiliary equation to simplify the implementation of relations
2416      RELATION_CONSTRAINT_UP          upper bound of relations (linear constraints)
2417      RELATION_CONSTRAINT_LO          lower bound of relations (linear constraints)
2418  ;
2419   
2420  *----------------------------------------------------------------------------------------------------------------------*
2421  * equation statements                                                                                                  *
2422  *----------------------------------------------------------------------------------------------------------------------*
2423   
2424  ***
2425  * Objective function
2426  * ------------------
2427  *
2428  * The objective function of the |MESSAGEix| core model
2429  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2430  *
2431  * Equation OBJECTIVE
2432  * """"""""""""""""""
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 48
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2433  *
2434  * The objective function (of the core model) minimizes total discounted systems costs including costs for emissions,
2435  * relaxations of dynamic constraints
2436  *
2437  * .. math::
2438  *    OBJ = \sum_{n,y \in Y^{M}} df\_year_{y} \cdot COST\_NODAL_{n,y}
2439  *
2440  ***
2441   
2442  COST_CUM_DEF..
2443      COST_CUM =E= SUM( (node,year), df_period(year) * COST_NODAL(node,year) ) ;
2444  CO2_CUM_DEF..
2445      CO2_CUM =E= SUM((node,emission,type_tec,year), EMISS(node,emission,type_tec,year)) ;
2446   
2447  $ontext
      CO2_CUM_DEF..
          CO2_CUM =E= SUM((type_emission,emission,type_tec,type_year)$(emission_scaling(type_emission,emission)
                 AND cat_year(type_year,year)),
                 emission_scaling(type_emission,emission)
                 *EMISS(node,emission,type_tec,year)) ;
2453  $offtext
2454  $ontext
      *text may help
      * emission taxes (by parent node, type of technology, type of year and type of emission)
          + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
                  AND cat_year(type_year,year) ),
              emission_scaling(type_emission,emission)
              * tax_emission(node,type_emission,type_tec,type_year)
              * EMISS(node,emission,type_tec,year) )
       *emission contraints       
          SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emission(type_emission,emission) ),
              duration_period(year_all2) * emission_scaling(type_emission,emission) *
                  ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
                      + historical_emission(node,emission,type_tec,year_all2) )
            )
          / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
           =L= bound_emission(node,type_emission,type_tec,type_year) ;
2470  $offtext   
2471  $ontext
      sum( (node,type_emission,type_tec,type_year) $ (SAMEAS(type_emission, 'GHGs') AND SAMEAS(type_year,'cumulative')),
               sum( (location,tec,year_all2,mode,time,emission)$( map_node(node,location) AND cat_tec(type_tec,tec)
                       AND cat_year(type_year,year_all2) AND cat_emission(type_emission,emission)
                       AND map_tec_act(location,tec,year_all2,mode,time) ) ,
                   duration_period(year_all2)
                   * emission_scaling(type_emission,emission) * emission_factor(location,tec,year_all2,mode,emission)
                   * ( sum(vintage$( map_tec_lifetime(location,tec,vintage,year_all2) AND year(year_all2) ),
                       ACT(location,tec,vintage,year_all2,mode,time) )
                   + historical_activity(location,tec,year_all2,mode,time)
                       )
                   )
               / sum(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
             )
      ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 49
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2486  $offtext
2487  $ontext
      OBJECTIVE..
                 OBJ =E= SUM( (node,year), df_period(year) * COST_NODAL(node,year) ) ;
       
        OBJECTIVE..
                 OBJ =E= sum( (node,type_emission,type_tec,type_year) $ (SAMEAS(type_emission, 'GHGs') AND SAMEAS(type_year,'cumulative')),
               sum( (location,tec,year_all2,mode,time,emission)$( map_node(node,location) AND cat_tec(type_tec,tec)
                       AND cat_year(type_year,year_all2) AND cat_emission(type_emission,emission)
                       AND map_tec_act(location,tec,year_all2,mode,time) ) ,
                   duration_period(year_all2)
                   * emission_scaling(type_emission,emission) * emission_factor(location,tec,year_all2,mode,emission)
                   * ( sum(vintage$( map_tec_lifetime(location,tec,vintage,year_all2) AND year(year_all2) ),
                       ACT(location,tec,vintage,year_all2,mode,time) )
                   + historical_activity(location,tec,year_all2,mode,time)
                       )
                   )
               / sum(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
             )
      ;  
      *    EMI =E= SUM( (node,emission,type_tec,year), df_period(year) * SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
      *           AND cat_year(type_year,year)* EMISS(node,emission,type_tec,year) ),
          
      *    EMISS(node,emission,type_tec,year)
      * emissions from technology activity
      *       SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
      *            AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifetime(location,tec,vintage,year) ),
      *        emission_factor(location,tec,vintage,year,mode,emission) * ACT(location,tec,vintage,year,mode,time) )
      ***
2515  $offtext
2516  OBJECTIVE..
2517       OBJ =E= COST_CUM ;
2518  *    OBJ =E= CO2_CUM ;
2519   
2520   
2521   
2522  ***
2523   
2524  * Regional system cost accounting function
2525  * ----------------------------------------
2526  *
2527  * Accounting of regional system costs over time
2528  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2529  *
2530  * Equation COST_ACCOUNTING_NODAL
2531  * """"""""""""""""""""""""""""""
2532  *
2533  * Accounting of regional systems costs over time as well as costs for emissions (taxes),
2534  * land use (from the model land-use model emulator), relaxations of dynamic constraints,
2535  * and linear relations.
2536  *
2537  * .. math::
2538  *    COST\_NODAL_{n,y} & = \sum_{c,g} \ resource\_cost_{n,c,g,y} \cdot EXT_{n,c,g,y} \\
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 50
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2539  *      & + \sum_{t} \
2540  *          \bigg( inv\_cost_{n,t,y} \cdot construction\_time\_factor_{n,t,y} \\
2541  *      & \quad \quad \quad \cdot end\_of\_horizon\_factor_{n,t,y} \cdot CAP\_NEW_{n,t,y} \\[4 pt]
2542  *      & \quad \quad + \sum_{y^V \leq y} \ fix\_cost_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y} \\
2543  *      & \quad \quad + \sum_{\substack{y^V \leq y \\ m,h}} \ var\_cost_{n,t,y^V,y,m,h} \cdot ACT_{n,t,y^V,y,m,h} \\
2544  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_up_{n,t,y} \\
2545  *      & \quad \quad \quad
2546  *          + level\_cost\_new\_capacity\_soft\_up_{n,t,y} \cdot\ inv\_cost_{n,t,y}
2547  *          \Big) \cdot CAP\_NEW\_UP_{n,t,y} \\[4pt]
2548  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_lo_{n,t,y} \\
2549  *      & \quad \quad \quad
2550  *          + level\_cost\_new\_capacity\_soft\_lo_{n,t,y} \cdot\ inv\_cost_{n,t,y}
2551  *          \Big) \cdot CAP\_NEW\_LO_{n,t,y} \\[4pt]
2552  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_up_{n,t,y,m,h} \\
2553  *      & \quad \quad \quad
2554  *          + level\_cost\_activity\_soft\_up_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
2555  *          \Big) \cdot ACT\_UP_{n,t,y,h} \\
2556  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_lo_{n,t,y,m,h} \\
2557  *      & \quad \quad \quad
2558  *          + level\_cost\_activity\_soft\_lo_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
2559  *          \Big) \cdot ACT\_LO_{n,t,y,h} \bigg) \\
2560  *      & + \sum_{\substack{\widehat{e},\widehat{t} \\ e \in E(\widehat{e})}}
2561  *            emission\_scaling_{\widehat{e},e} \cdot \ emission\_tax_{n,\widehat{e},\widehat{t},y}
2562  *            \cdot EMISS_{n,e,\widehat{t},y} \\
2563  *      & + \sum_{s} land\_cost_{n,s,y} \cdot LAND_{n,s,y} \\
2564  *      & + \sum_{r} relation\_cost_{r,n,y} \cdot REL_{r,n,y}
2565  ***
2566   
2567  COST_ACCOUNTING_NODAL(node, year)..
2568      COST_NODAL(node, year) =E=
2569  * resource extration costs
2570      SUM((commodity,grade)$( map_resource(node,commodity,grade,year) ),
2571           resource_cost(node,commodity,grade,year) * EXT(node,commodity,grade,year) )
2572  * technology capacity investment, maintainance, operational cost
2573      + SUM((tec)$( map_tec(node,tec,year) ),
2574              ( inv_cost(node,tec,year) * construction_time_factor(node,tec,year)
2575                  * end_of_horizon_factor(node,tec,year) * CAP_NEW(node,tec,year)
2576              + SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ),
2577                  fix_cost(node,tec,vintage,year) * CAP(node,tec,vintage,year) ) )$( inv_tec(tec) )
2578              + SUM((vintage,mode,time)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
2579                  var_cost(node,tec,vintage,year,mode,time) * ACT(node,tec,vintage,year,mode,time) )
2580              )
2581  * additional cost terms (penalty) for relaxation of 'soft' dynamic new capacity constraints
2582      + SUM((inv_tec)$( map_tec(node,inv_tec,year) ),
2583          SUM((mode,time)$map_tec_act(node,inv_tec,year,mode,time),
2584              ( ( abs_cost_new_capacity_soft_up(node,inv_tec,year)
2585                  + level_cost_new_capacity_soft_up(node,inv_tec,year) * inv_cost(node,inv_tec,year)
2586                  ) * CAP_NEW_UP(node,inv_tec,year) )$( soft_new_capacity_up(node,inv_tec,year) )
2587              + ( ( abs_cost_new_capacity_soft_lo(node,inv_tec,year)
2588                  + level_cost_new_capacity_soft_lo(node,inv_tec,year) * inv_cost(node,inv_tec,year)
2589                  ) * CAP_NEW_LO(node,inv_tec,year) )$( soft_new_capacity_lo(node,inv_tec,year) )
2590              )
2591          )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 51
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2592  * additional cost terms (penalty) for relaxation of 'soft' dynamic activity constraints
2593      + SUM((tec)$( map_tec(node,tec,year) ),
2594          SUM(time$( map_tec_time(node,tec,year,time) ),
2595              ( ( abs_cost_activity_soft_up(node,tec,year,time)
2596                  + level_cost_activity_soft_up(node,tec,year,time) * levelized_cost(node,tec,year,time)
2597                  ) * ACT_UP(node,tec,year,time) )$( soft_activity_up(node,tec,year,time) )
2598              + ( ( abs_cost_activity_soft_lo(node,tec,year,time)
2599                  + level_cost_activity_soft_lo(node,tec,year,time)  * levelized_cost(node,tec,year,time)
2600                  ) * ACT_LO(node,tec,year,time) )$( soft_activity_lo(node,tec,year,time) )
2601              )
2602          )
2603  * emission taxes (by parent node, type of technology, type of year and type of emission)
2604      + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
2605              AND cat_year(type_year,year) ),
2606          emission_scaling(type_emission,emission)
2607          * tax_emission(node,type_emission,type_tec,type_year)
2608          * EMISS(node,emission,type_tec,year) )
2609  * cost terms from land-use model emulator (only includes valid node-land_scenario-year combinations)
2610      + SUM(land_scenario$( land_cost(node,land_scenario,year) ),
2611          land_cost(node,land_scenario,year) * LAND(node,land_scenario,year) )
2612  * cost terms associated with linear relations
2613      + SUM(relation$( relation_cost(relation,node,year) ),
2614          relation_cost(relation,node,year) * REL(relation,node,year) )
2615  * implementation of slack variables for constraints to aid in debugging
2616      + SUM((commodity,level,time)$( map_commodity(node,commodity,level,year,time) ), ( 0
2617  *   + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2618  *   + SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2619          ) * 1e6 )
2620      + SUM((tec)$( map_tec(node,tec,year) ), ( 0
2621  *    + 10 * SLACK_CAP_NEW_BOUND_UP(node,tec,year)
2622  *    + 10 * SLACK_CAP_NEW_BOUND_LO(node,tec,year)
2623  *  + 10 * SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year)
2624  *  + 10 * SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year)
2625  *  + 10 * SLACK_CAP_TOTAL_BOUND_UP(node,tec,year)
2626  *  + 10 * SLACK_CAP_TOTAL_BOUND_LO(node,tec,year)
2627          ) * ABS( 1000 + inv_cost(node,tec,year) ) )
2628      + SUM((tec,time)$( map_tec_time(node,tec,year,time) ), ( 0
2629  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_UP(node,tec,year,mode,time) )
2630  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_LO(node,tec,year,mode,time) )
2631  * + 10 * SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
2632  * + 10 * SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
2633          ) * ( 1e8
2634              + ABS( SUM(mode$map_tec_act(node,tec,year,mode,time), var_cost(node,tec,year,year,mode,time) ) )
2635              + fix_cost(node,tec,year,year) ) )
2636      + SUM(land_scenario, 0
2637  * + 1e6 * SLACK_LAND_SCEN_UP(node,land_scenario,year)
2638  * + 1e6 * SLACK_LAND_SCEN_LO(node,land_scenario,year)
2639          )
2640      + SUM(land_type, 0
2641  * + 1e6 * SLACK_LAND_TYPE_UP(node,year,land_type)
2642  * + 1e6 * SLACK_LAND_TYPE_LO(node,year,land_type)
2643          )
2644      + SUM((relation), 0
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 52
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2645  * + 1e6 * SLACK_RELATION_BOUND_UP(relation,node,year)$( is_relation_upper(relation,node,year) )
2646  * + 1e6 * SLACK_RELATION_BOUND_LO(relation,node,year)$( is_relation_lower(relation,node,year) )
2647          )
2648  ;
2649   
2650  ***
2651  * Here, :math:`n^L \in N(n)` are all nodes :math:`n^L` that are sub-nodes of node :math:`n`.
2652  * The subset of technologies :math:`t \in T(\widehat{t})` are all tecs that belong to category :math:`\widehat{t}`,
2653  * and similar notation is used for emissions :math:`e \in E`.
2654  ***
2655   
2656  *----------------------------------------------------------------------------------------------------------------------*
2657  ***
2658  * Resource and commodity section
2659  * ------------------------------
2660  *
2661  * Constraints on resource extraction
2662  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2663  *
2664  * Equation EXTRACTION_EQUIVALENCE
2665  * """""""""""""""""""""""""""""""
2666  *
2667  * This constraint translates the quantity of resources extracted (summed over all grades) to the input used by
2668  * all technologies (drawing from that node). It is introduced to simplify subsequent notation in input/output relations
2669  * and nodal balance constraints.
2670  *
2671  *  .. math::
2672  *     \sum_{g} EXT_{n,c,g,y} =
2673  *     \sum_{\substack{n^L,t,m,h,h^{OD} \\ y^V \leq y  \\ \ l \in L^{RES} \subseteq L }}
2674  *         input_{n^L,t,y^V,y,m,n,c,l,h,h^{OD}} \cdot ACT_{n^L,t,m,y,h}
2675  *
2676  * The set :math:`L^{RES} \subseteq L` denotes all levels for which the detailed representation of resources applies.
2677  ***
2678  EXTRACTION_EQUIVALENCE(node,commodity,year)..
2679      SUM(grade$( map_resource(node,commodity,grade,year) ), EXT(node,commodity,grade,year) )
2680      =G= SUM((location,tec,vintage,mode,level_resource,time_act,time_od)$( map_tec_act(node,tec,year,mode,time_act)
2681              AND map_tec_lifetime(node,tec,vintage,year) ),
2682          input(location,tec,vintage,year,mode,node,commodity,level_resource,time_act,time_od)
2683          * ACT(location,tec,vintage,year,mode,time_act) ) ;
2684   
2685  ***
2686  * Equation EXTRACTION_BOUND_UP
2687  * """"""""""""""""""""""""""""
2688  *
2689  * This constraint specifies an upper bound on resource extraction by grade.
2690  *
2691  *  .. math::
2692  *     EXT_{n,c,g,y} \leq bound\_extraction\_up_{n,c,g,y}
2693  *
2694  ***
2695  EXTRACTION_BOUND_UP(node,commodity,grade,year)$( map_resource(node,commodity,grade,year)
2696          AND is_bound_extraction_up(node,commodity,grade,year) )..
2697      EXT(node,commodity,grade,year) =L= bound_extraction_up(node,commodity,grade,year) ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 53
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2698   
2699  ***
2700  * Equation RESOURCE_CONSTRAINT
2701  * """"""""""""""""""""""""""""
2702  *
2703  * This constraint restricts that resource extraction in a year guarantees the "remaining resources" constraint,
2704  * i.e., only a given fraction of remaining resources can be extracted per year.
2705  *
2706  *  .. math::
2707  *     EXT_{n,c,g,y} \leq
2708  *     resource\_remaining_{n,c,g,y} \cdot
2709  *         \Big( & resource\_volume_{n,c,g} \\
2710  *               & - \sum_{y' < y} duration\_period_{y'} \cdot EXT_{n,c,g,y'} \Big)
2711  *
2712  ***
2713  RESOURCE_CONSTRAINT(node,commodity,grade,year)$( map_resource(node,commodity,grade,year)
2714          AND resource_remaining(node,commodity,grade,year) )..
2715  * extraction per year
2716      EXT(node,commodity,grade,year) =L=
2717  * remaining resources multiplied by remaining-resources-factor
2718      resource_remaining(node,commodity,grade,year)
2719      * ( resource_volume(node,commodity,grade)
2720          - SUM(year2$( year_order(year2) < year_order(year) ),
2721              duration_period(year2) * EXT(node,commodity,grade,year2) ) ) ;
2722   
2723  ***
2724  * Equation RESOURCE_HORIZON
2725  * """""""""""""""""""""""""
2726  * This constraint ensures that total resource extraction over the model horizon does not exceed the available resources.
2727  *
2728  *  .. math::
2729  *     \sum_{y} duration\_period_{y} \cdot EXT_{n,c,g,y} \leq  resource\_volume_{n,c,g}
2730  *
2731  ***
2732  RESOURCE_HORIZON(node,commodity,grade)$( SUM(year$map_resource(node,commodity,grade,year), 1 ) )..
2733      SUM(year, duration_period(year) * EXT(node,commodity,grade,year) ) =L= resource_volume(node,commodity,grade) ;
2734   
2735  *----------------------------------------------------------------------------------------------------------------------*
2736  ***
2737  * Constraints on commodities and stocks
2738  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2739  *
2740  * Auxiliary COMMODITY_BALANCE
2741  * """""""""""""""""""""""""""
2742  * For the commodity balance constraints below, we introduce an auxiliary `COMMODITY_BALANCE`. This is implemented
2743  * as a GAMS `$macro` function.
2744  *
2745  *  .. math::
2746  *     \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} output_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2747  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,y^V,y,m,h^A} \\
2748  *     - \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} input_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2749  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,m,y,h^A} \\
2750  *     + \ STOCK\_CHG_{n,c,l,y,h} & \\[4pt]
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 54
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2751  *     + \ \sum_s \Big( land\_output_{n,s,y,c,l,h} - land\_input_{n,s,y,c,l,h} \Big) \cdot & LAND_{n,s,y} \\[4pt]
2752  *     - \ demand\_fixed_{n,c,l,y,h}
2753  *     & = COMMODITY\_BALANCE{n,c,l,y,h} \quad \forall \ l \notin (L^{RES}, l^{REN} \subseteq L
2754  *
2755  * The commodity balance constraint at the resource level is included in the `Equation RESOURCE_CONSTRAINT`_,
2756  * while at the renewable level, it is included in the `Equation RENEWABLES_EQUIVALENCE`_.
2757  ***
2758  $macro COMMODITY_BALANCE(node,commodity,level,year,time) (                                                             \
2759      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 \
2760              AND map_tec_lifetime(location,tec,vintage,year) ),                                                         \
2761  * import into node and output by all technologies located at 'location' sending to 'node' and 'time2' sending to 'time'
2762          output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         \
2763          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                                    \
2764  * export from node and input into technologies located at 'location' taking from 'node' and 'time2' taking from 'time'
2765          - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        \
2766          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  \
2767  * quantity taken out from ( >0 ) or put into ( <0 ) inter-period stock (storage)
2768      + STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              \
2769  * yield from land-use model emulator
2770      + SUM(land_scenario,                                                                                               \
2771          ( land_output(node,land_scenario,year,commodity,level,time)                                                    \
2772            - land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node,land_scenario,year) )               \
2773  * final demand (exogenous parameter to be satisfied by the commodity system)
2774      - demand_fixed(node,commodity,level,year,time)                                                                     \
2775      )$( map_commodity(node,commodity,level,year,time) AND NOT level_resource(level) AND NOT level_renewable(level) )
2776   
2777  ***
2778  * Equation COMMODITY_BALANCE_GT
2779  * """""""""""""""""""""""""""""
2780  * This constraint ensures that supply is greater or equal than demand for every commodity-level combination.
2781  *
2782  *  .. math::
2783  *     COMMODITY\_BALANCE_{n,c,l,y,h} \geq 0
2784  *
2785  ***
2786  COMMODITY_BALANCE_GT(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2787          AND NOT level_resource(level) AND NOT level_renewable(level) )..
2788      (                                                             SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 AND map_tec_lifetime(location,tec,vintage,year) ),                  
                                             output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                        
                  - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  + STOCK_CHG(nod
      e,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              + SUM(land_scenario,                                                                                               ( land_output(node,land_scenario,y
      ear,commodity,level,time)                                                    - land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node,land_scenario,year) )               - demand_fixed(node,commodity,level,year,time)                 
                                                          )$( map_commodity(node,commodity,level,year,time) AND NOT level_resource(level) AND NOT level_renewable(level) )
2789  * relaxation of constraints for debugging
2790  * + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2791       =G= 0 ;
2792   
2793  ***
2794  * Equation COMMODITY_BALANCE_LT
2795  * """""""""""""""""""""""""""""
2796  * This constraint ensures the supply is smaller than or equal to the demand for all commodity-level combinatio
2797  * given in the :math:`balance\_equality_{c,l}`. In combination withe constraint above, it ensures that supply
2798  * is (exactly) equal to demand.
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 55
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2799  *
2800  *  .. math::
2801  *     COMMODITY\_BALANCE_{n,c,l,y,h} \leq 0
2802  *
2803  ***
2804  COMMODITY_BALANCE_LT(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2805          AND NOT level_resource(level) AND NOT level_renewable(level)
2806          AND balance_equality(commodity,level) )..
2807      (                                                             SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 AND map_tec_lifetime(location,tec,vintage,year) ),                  
                                             output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                        
                  - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  + STOCK_CHG(nod
      e,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              + SUM(land_scenario,                                                                                               ( land_output(node,land_scenario,y
      ear,commodity,level,time)                                                    - land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node,land_scenario,year) )               - demand_fixed(node,commodity,level,year,time)                 
                                                          )$( map_commodity(node,commodity,level,year,time) AND NOT level_resource(level) AND NOT level_renewable(level) )
2808  * relaxation of constraints for debugging
2809  * - SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2810      =L= 0 ;
2811   
2812  ***
2813  * Equation STOCKS_BALANCE
2814  * """""""""""""""""""""""
2815  * This constraint ensures the inter-temporal balance of commodity stocks.
2816  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exogenous additions to the stock
2817  *
2818  *  .. math::
2819  *     STOCK_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2820  *         duration\_period_{y} \cdot & \sum_{h} STOCK\_CHG_{n,c,l,y,h} \\
2821  *                                    & + STOCK_{n,c,l,y+1}
2822  *
2823  ***
2824  STOCKS_BALANCE(node,commodity,level,year)$( map_stocks(node,commodity,level,year) )..
2825      STOCK(node,commodity,level,year)$( NOT first_period(year) )
2826      + commodity_stock(node,commodity,level,year) =E=
2827      duration_period(year) * SUM(time$( map_commodity(node,commodity,level,year,time) ),
2828           STOCK_CHG(node,commodity,level,year,time) )
2829      + SUM(year2$( seq_period(year,year2) ), STOCK(node,commodity,level,year2) ) ;
2830   
2831  *----------------------------------------------------------------------------------------------------------------------*
2832  ***
2833  * Technology section
2834  * ------------------
2835  *
2836  * Technical and engineering constraints
2837  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2838  * The first set of constraints concern technologies that have explicit investment decisions
2839  * and where installed/maintained capacity is relevant for operational decisions.
2840  * The set where :math:`T^{INV} \subseteq T` is the set of all these technologies.
2841   
2842  *
2843  * Equation CAPACITY_CONSTRAINT
2844  * """"""""""""""""""""""""""""
2845  * This constraint ensures that the actual activity of a technology at a node cannot exceed available (maintained)
2846  * capacity summed over all vintages, including the technology capacity factor :math:`capacity\_factor_{n,t,y,t}`.
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 56
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2847  *
2848  *  .. math::
2849  *     \sum_{m} ACT_{n,t,y^V,y,m,h}
2850  *         \leq duration\_time_{h} \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^V,y}
2851  *         \quad \forall \ t \ \in \ T^{INV}
2852  *
2853  ***
2854  CAPACITY_CONSTRAINT(node,inv_tec,vintage,year,time)$( map_tec_time(node,inv_tec,year,time)
2855          AND map_tec_lifetime(node,inv_tec,vintage,year) )..
2856      SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) )
2857          =L= duration_time(time) * capacity_factor(node,inv_tec,vintage,year,time) * CAP(node,inv_tec,vintage,year) ;
2858   
2859  ***
2860  * Equation CAPACITY_MAINTENANCE_HIST
2861  * """"""""""""""""""""""""""""""""""
2862  * The following three constraints implement technology capacity maintenance over time to allow early retirment.
2863  * The optimization problem determines the optimal timing of retirement, when fixed operation-and-maintenance costs
2864  * exceed the benefit in the objective function.
2865  *
2866  * The first constraint ensures that historical capacity (built prior to the model horizon) is available
2867  * as installed capacity in the first model period.
2868  *
2869  *   .. math::
2870  *      CAP_{n,t,y^V,'first\_period'} & \leq
2871  *          remaining\_capacity_{n,t,y^V,'first\_period'} \cdot
2872  *          duration\_period_{y^V} \cdot
2873  *          historical\_new\_capacity_{n,t,y^V} \\
2874  *      & \text{if } y^V  < 'first\_period' \text{ and } |y| - |y^V| < technical\_lifetime_{n,t,y^V}
2875  *      \quad \forall \ t \in T^{INV}
2876  *
2877  ***
2878  CAPACITY_MAINTENANCE_HIST(node,inv_tec,vintage,first_period)$( map_tec_lifetime(node,inv_tec,vintage,first_period)
2879          AND historical(vintage))..
2880      CAP(node,inv_tec,vintage,first_period)
2881      =L= remaining_capacity(node,inv_tec,vintage,first_period) *
2882          duration_period(vintage) * historical_new_capacity(node,inv_tec,vintage) ;
2883   
2884  ***
2885  * Equation CAPACITY_MAINTENANCE_NEW
2886  * """""""""""""""""""""""""""""""""
2887  * The second constraint ensures that capacity is fully maintained throughout the model period
2888  * in which it was constructed (no early retirement in the period of construction).
2889  *
2890  *   .. math::
2891  *      CAP_{n,t,y^V,y^V} =
2892  *          remaining\_capacity_{n,t,y^V,y^V} \cdot
2893  *          duration\_period_{y^V} \cdot
2894  *          CAP\_NEW{n,t,y^V}
2895  *      \quad \forall \ t \in T^{INV}
2896  *
2897  * The current formulation does not account for construction time in the constraints, but only adds a mark-up
2898  * to the investment costs in the objective function.
2899  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 57
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2900  CAPACITY_MAINTENANCE_NEW(node,inv_tec,vintage,vintage)$( map_tec_lifetime(node,inv_tec,vintage,vintage) )..
2901      CAP(node,inv_tec,vintage,vintage)
2902      =E= remaining_capacity(node,inv_tec,vintage,vintage)
2903          * duration_period(vintage) * CAP_NEW(node,inv_tec,vintage) ;
2904   
2905  ***
2906  * Equation CAPACITY_MAINTENANCE
2907  * """""""""""""""""""""""""""""
2908  * The third constraint implements the dynamics of capacity maintenance throughout the model horizon.
2909  * Installed capacity can be maintained over time until decommissioning, which is irreversible.
2910  *
2911  *   .. math::
2912  *      CAP_{n,t,y^V,y} & \leq
2913  *          remaining\_capacity_{n,t,y^V,y} \cdot
2914  *          CAP_{n,t,y^V,y-1} \\
2915  *      \quad & \text{if } y > y^V \text{ and } y^V  > 'first\_period' \text{ and } |y| - |y^V| < technical\_lifetime_{n,t,y^V}
2916  *      \quad \forall \ t \in T^{INV}
2917  *
2918  ***
2919  CAPACITY_MAINTENANCE(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2920          AND NOT first_period(year) AND year_order(vintage) < year_order(year))..
2921      CAP(node,inv_tec,vintage,year)
2922      =L= remaining_capacity(node,inv_tec,vintage,year) *
2923          ( SUM(year2$( seq_period(year2,year) ),
2924                CAP(node,inv_tec,vintage,year2) ) ) ;
2925   
2926  ***
2927  * Equation OPERATION_CONSTRAINT
2928  * """""""""""""""""""""""""""""
2929  * This constraint provides an upper bound on the total operation of installed capacity over a year.
2930  * It can be used to represent reuqired scheduled unavailability of installed capacity.
2931  *
2932  *   .. math::
2933  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h}
2934  *          \leq operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,y^V,y,m,\text{'year'}} \cdot CAP_{n,t,y^V,y}
2935  *      \quad \forall \ t \in T^{INV}
2936  *
2937  * This constraint is only active if :math:`operation\_factor_{n,t,y^V,y} < 1`.
2938  ***
2939  OPERATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2940          AND operation_factor(node,inv_tec,vintage,year) < 1 )..
2941      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =L=
2942          operation_factor(node,inv_tec,vintage,year) * capacity_factor(node,inv_tec,vintage,year,'year')
2943          * CAP(node,inv_tec,vintage,year) ;
2944   
2945  ***
2946  * Equation MIN_UTILIZATION_CONSTRAINT
2947  * """""""""""""""""""""""""""""""""""
2948  * This constraint provides a lower bound on the total utilization of installed capacity over a year.
2949  *
2950  *   .. math::
2951  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h} \geq min\_utilization\_factor_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y}
2952  *      \quad \forall \ t \in T^{INV}
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 58
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2953  *
2954  * This constraint is only active if :math:`min\_utilization\_factor_{n,t,y^V,y}` is defined.
2955  ***
2956  MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
2957          AND min_utilization_factor(node,inv_tec,vintage,year) )..
2958      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =G=
2959          min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_tec,vintage,year) ;
2960   
2961  *----------------------------------------------------------------------------------------------------------------------*
2962  ***
2963  * Constraints representing renewable integration
2964  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2965  *
2966  * Equation RENEWABLES_EQUIVALENCE
2967  * """""""""""""""""""""""""""""""
2968  * This constraint defines the auxiliary variables :math:`REN`
2969  * to be equal to the output of renewable technologies (summed over grades).
2970  *
2971  *  .. math::
2972  *     \sum_{g} REN_{n,t,c,g,y,h} \leq
2973  *     \sum_{\substack{n,t,m,l,h,h^{OD} \\ y^V \leq y  \\ \ l \in L^{REN} \subseteq L }}
2974  *         input_{n^L,t,y^V,y,m,n,c,l,h,h^{OD}} \cdot ACT_{n^L,t,m,y,h}
2975  *
2976  * The set :math:`L^{REN} \subseteq L` denotes all levels for which the detailed representation of renewables applies.
2977  ***
2978  RENEWABLES_EQUIVALENCE(node,renewable_tec,commodity,year,time)$(
2979          map_tec(node,renewable_tec,year) AND map_ren_com(node,renewable_tec,commodity,year) )..
2980      SUM(grade$( map_ren_grade(node,commodity,grade,year) ), REN(node,renewable_tec,commodity,grade,year,time) )
2981      =E= SUM((location,vintage,mode,level_renewable,time_act)$(
2982                   map_tec_act(node,renewable_tec,year,mode,time)
2983                   AND map_tec_lifetime(node,renewable_tec,vintage,year) ),
2984          input(location,renewable_tec,vintage,year,mode,node,commodity,level_renewable,time_act,time)
2985          * ACT(location,renewable_tec,vintage,year,mode,time) ) ;
2986   
2987  ***
2988  * Equation RENEWABLES_POTENTIAL_CONSTRAINT
2989  * """"""""""""""""""""""""""""""""""""""""
2990  * This constraint sets the potential potential by grade as the upper bound for the auxiliary variable :math:`REN`.
2991  *
2992  *  .. math::
2993  *     \sum_{\substack{t,h \\ \ t \in T^{R} \subseteq t }} REN_{n,t,c,g,y,h}
2994  *         \leq \sum_{\substack{l \\ l \in L^{R} \subseteq L }} renewable\_potential_{n,c,g,l,y}
2995  *
2996  ***
2997  RENEWABLES_POTENTIAL_CONSTRAINT(node,commodity,grade,year)$( map_ren_grade(node,commodity,grade,year) )..
2998      SUM((renewable_tec,time)$( map_ren_com(node,renewable_tec,commodity,year) ),
2999          REN(node,renewable_tec,commodity,grade,year,time) )
3000      =L= SUM(level_renewable, renewable_potential(node,commodity,grade,level_renewable,year) ) ;
3001   
3002  ***
3003  * Equation RENEWABLES_CAPACITY_REQUIREMENT
3004  * """"""""""""""""""""""""""""""""""""""""
3005  * This constraint connects the capacity factor of a renewable grade to the
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 59
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3006  * installed capacity of a technology. It sets the lower limit for the capacity
3007  * of a renewable technology to the summed activity over all grades (REN) devided
3008  * by the capactiy factor of this grade.
3009  * It represents the fact that different renewable grades require different installed
3010  * capacities to provide their full potential.
3011  *
3012  *  .. math::
3013  *     \sum_{y^V, h} & CAP_{n,t,y^V,y} \cdot operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,y^V,y,h} \\
3014  *        & \quad \geq \sum_{g,h,l} \frac{1}{renewable\_capacity\_factor_{n,c,g,l,y}} \cdot REN_{n,t,c,g,y,h}
3015  *
3016  * This constraint is only active if :math:`renewable\_capacity\_factor_{n,c,g,l,y}` is defined.
3017  ***
3018  RENEWABLES_CAPACITY_REQUIREMENT(node,inv_tec,commodity,year)$(
3019          SUM( (vintage,mode,time,grade,level_renewable),
3020              map_tec_lifetime(node,inv_tec,vintage,year) AND map_tec_act(node,inv_tec,year,mode,time)
3021              AND map_ren_com(node,inv_tec,commodity,year)
3022              AND renewable_capacity_factor(node,commodity,grade,level_renewable,year) > 0 ) )..
3023      SUM( (vintage,time)$map_ren_com(node,inv_tec,commodity,year),
3024          CAP(node,inv_tec,vintage,year)
3025          * operation_factor(node,inv_tec,vintage,year)
3026          * capacity_factor(node,inv_tec,vintage,year,time) )
3027      =G= SUM((grade,time,level_renewable)$(renewable_capacity_factor(node,commodity,grade,level_renewable,year) > 0),
3028              REN(node,inv_tec,commodity,grade,year,time)
3029                   / renewable_capacity_factor(node,commodity,grade,level_renewable,year)) ;
3030   
3031  *----------------------------------------------------------------------------------------------------------------------*
3032  ***
3033  * Constraints for addon technologies
3034  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3035  *
3036  * Equation ADDON_ACTIVITY_UP
3037  * """"""""""""""""""""""""""
3038  * This constraint provides an upper bound on the activity of an addon technology that can only be operated
3039  * jointly with a parent technology (e.g., abatement option, SO2 scrubber, power plant cooling technology).
3040  *
3041  *   .. math::
3042  *      \sum_{\substack{t' \sim t^A, y^V \leq y}} ACT_{n,t',y^V,y,m,h}
3043  *      \leq
3044  *      \sum_{\substack{t, y^V \leq y}}
3045  *          addon\_up_{n,t^a,y,m,h,t^A} \cdot
3046  *          addon\_conversion_{n,t',y^V,y,m,h} \cdot
3047  *          ACT_{n,t,y^V,y,m,h}
3048  *
3049  ***
3050  ADDON_ACTIVITY_UP(node,type_addon,year,mode,time)..
3051  * activity of addon technology
3052      sum( (addon,vintage)$(
3053              cat_addon(type_addon,addon) AND
3054              map_tec_act(node,addon,year,mode,time) AND
3055              map_tec_lifetime(node,addon,vintage,year) ),
3056          ACT(node,addon,vintage,year,mode,time) )
3057      =L=
3058  * activity of corresponding parent-technology multiplied by upper bound of share
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 60
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3059        sum((tec,vintage)$(
3060            map_tec_addon(tec,type_addon) AND
3061            map_tec_act(node,tec,year,mode,time) AND
3062            map_tec_lifetime(node,tec,vintage,year)
3063        ),
3064            addon_up(node,tec,year,mode,time,type_addon)
3065            * addon_conversion(node,tec,vintage,year,mode,time,type_addon)
3066            * ACT(node,tec,vintage,year,mode,time) )
3067  ;
3068   
3069  ***
3070  * Equation ADDON_ACTIVITY_LO
3071  * """"""""""""""""""""""""""
3072  * This constraint provides a lower bound on the activity of an addon technology that has to be operated
3073  * jointly with a parent technology (e.g., power plant cooling technology). The parameter `addon_lo` allows to define
3074  * a minimum level of operation of addon technologies relative to the activity of the parent technology.
3075  * If `addon_minimum = 1`, this means that it is mandatory to operate the addon technology at the same level as the
3076  * parent technology (i.e., full mitigation).
3077  *
3078  *   .. math::
3079  *      \sum_{\substack{t' \sim t^A, y^V \leq y}} ACT_{n,t',y^V,y,m,h}
3080  *      \geq
3081  *      \sum_{\substack{t, y^V \leq y}}
3082  *          addon\_lo_{n,t^a,y,m,h,t^A} \cdot
3083  *          addon\_conversion_{n,t',y^V,y,m,h} \cdot
3084  *          ACT_{n,t,y^V,y,m,h}
3085  *
3086  ***
3087  ADDON_ACTIVITY_LO(node,type_addon,year,mode,time)..
3088  * activity of addon technology
3089      sum( (addon,vintage)$(
3090              cat_addon(type_addon,addon) AND
3091              map_tec_act(node,addon,year,mode,time) AND
3092              map_tec_lifetime(node,addon,vintage,year) ),
3093          ACT(node,addon,vintage,year,mode,time) )
3094      =G=
3095  * activity of corresponding parent-technology times lower bound of share
3096        sum((tec,vintage)$(
3097            map_tec_addon(tec,type_addon) AND
3098            map_tec_act(node,tec,year,mode,time) AND
3099            map_tec_lifetime(node,tec,vintage,year)
3100        ),
3101            addon_lo(node,tec,year,mode,time,type_addon)
3102            * addon_conversion(node,tec,vintage,year,mode,time,type_addon)
3103            * ACT(node,tec,vintage,year,mode,time) ) ;
3104   
3105  *----------------------------------------------------------------------------------------------------------------------*
3106  ***
3107  * System reliability and flexibility requirements
3108  * -----------------------------------------------
3109  * This section followi allows to include system-wide reliability and flexility considerations.
3110  * The current formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
3111  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 61
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3112  * Aggregate use of a commodity
3113  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3114  * The system reliability and flexibility constraints are implemented using an auxiliary variable representing
3115  * the total use (i.e., input of each commodity per level).
3116  *
3117  * Equation COMMODITY_USE_LEVEL
3118  * """"""""""""""""""""""""""""
3119  * This constraint defines the auxiliary variable :math:`COMMODITY\_USE_{n,c,l,y}`, which is used to define
3120  * the rating bins and the peak-load that needs to be offset with firm (dispatchable) capacity.
3121  *
3122  *   .. math::
3123  *      COMMODITY\_USE_{n,c,l,y}
3124  *      = & \sum_{n^L,t,y^V,m,h} input_{n^L,t,y^V,y,m,n,c,l,h,h} \\
3125  *        & \quad    \cdot duration\_time\_rel_{h,h} \cdot ACT_{n^L,t,y^V,y,m,h}
3126  *
3127  * This constraint and the auxiliary variable is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` or
3128  * :math:`flexibility\_factor_{n,t,y^V,y,m,c,l,h,r}` is defined.
3129  ***
3130  COMMODITY_USE_LEVEL(node,commodity,level,year,time)$(
3131           peak_load_factor(node,commodity,level,year,time) OR
3132           SUM( (tec,vintage,mode,rating), flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating) ) )..
3133      COMMODITY_USE(node,commodity,level,year)
3134      =E=
3135      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)
3136                                               AND map_tec_lifetime(location,tec,vintage,year) ),
3137          input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3138          * duration_time_rel(time,time2)
3139          * ACT(location,tec,vintage,year,mode,time2) ) ;
3140   
3141  ***
3142  * .. _rating_bin:
3143  *
3144  * Auxilary variables for technology activity by "rating bins"
3145  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3146  * The capacity and activity of certain (usually non-dispatchable) technologies
3147  * can be assumed to only partially contribute to the system reliability and flexibility requirements.
3148  *
3149  * Equation ACTIVITY_RATING_BIN
3150  * """"""""""""""""""""""""""""
3151  * The auxiliary variable for rating-specific activity of each technology cannot exceed
3152  * the share of the rating bin in relation to the total commodity use.
3153  *
3154  * .. math::
3155  *    ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3156  *    \leq rating\_bin_{n,t,y,c,l,h,q} \cdot COMMODITY\_USE_{n,c,l,y}
3157  *
3158  ***
3159  ACTIVITY_BY_RATING(node,tec,year,commodity,level,time,rating)$(
3160           rating_bin(node,tec,year,commodity,level,time,rating) )..
3161     sum(vintage$( sum(mode,map_tec_act(node,tec,year,mode,time) ) AND map_tec_lifetime(node,tec,vintage,year) ),
3162              ACT_RATING(node,tec,vintage,year,commodity,level,time,rating) )
3163      =L= rating_bin(node,tec,year,commodity,level,time,rating) * COMMODITY_USE(node,commodity,level,year)
3164  ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 62
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3165   
3166  ***
3167  * Equation ACTIVITY_SHARE_TOTAL
3168  * """""""""""""""""""""""""""""
3169  * The sum of the auxiliary rating-specific activity variables need to equal the total input and/or output
3170  * of the technology.
3171  *
3172  * .. math::
3173  *    \sum_q ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3174  *    = \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3175  *         ( input_{n^L,t,y^V,y,m,n,c,l,h^A,h} + output_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3176  *      & \quad    \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
3177  *
3178  ***
3179  ACTIVITY_RATING_TOTAL(node,tec,vintage,year,commodity,level,time)$(
3180          sum(rating$( rating_bin(node,tec,year,commodity,level,time,rating) ), 1 )
3181          AND sum(mode, map_tec_act(node,tec,year,mode,time))
3182          AND map_tec_lifetime(node,tec,vintage,year) )..
3183      sum(rating$( rating_bin(node,tec,year,commodity,level,time,rating) ),
3184          ACT_RATING(node,tec,vintage,year,commodity,level,time,rating) )
3185      =E=
3186          SUM((location,mode,time2)$(
3187                map_tec_act(location,tec,year,mode,time2)
3188                AND map_tec_lifetime(location,tec,vintage,year) ),
3189              ( output(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3190                + input(location,tec,vintage,year,mode,node,commodity,level,time2,time) )
3191                  * duration_time_rel(time,time2)
3192                  * ACT(location,tec,vintage,year,mode,time2) ) ;
3193   
3194  ***
3195  * .. _reliability_constraint:
3196  *
3197  * Reliability of installed capacity
3198  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3199  * The "firm capacity" that a technology can contribute to system reliability depends on its dispatch characteristics.
3200  * For dispatchable technologies, the total installed capacity counts toward the firm capacity constraint.
3201  * This is active if the parameter is defined over :math:`reliability\_factor_{n,t,y,c,l,h,'firm'}`.
3202  * For non-dispatchable technologies, or those that do not have explicit investment decisions,
3203  * the contribution to system reliability is calculated
3204  * by using the auxiliary variable :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}` as a proxy,
3205  * with the :math:`reliability\_factor_{n,t,y,c,l,h,q}` defined per rating bin :math:`q`.
3206  *
3207  * Equation FIRM_CAPACITY_PROVISION
3208  * """"""""""""""""""""""""""""""""
3209  * Technologies where the reliability factor is defined with the rating `firm`
3210  * have an auxiliary variable :math:`CAP\_FIRM_{n,t,c,l,y,q}`, defined in terms of output.
3211  *
3212  *   .. math::
3213  *      \sum_q CAP\_FIRM_{n,t,c,l,y,q}
3214  *      = \sum_{y^V \leq y} & output_{n^L,t,y^V,y,m,n,c,l,h^A,h} \cdot duration\_time_h \\
3215  *        & \quad    \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^Y,y}
3216  *      \quad \forall \ t \in T^{INV}
3217  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 63
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3218  ***
3219  FIRM_CAPACITY_PROVISION(node,inv_tec,year,commodity,level,time)$(
3220          reliability_factor(node,inv_tec,year,commodity,level,time,'firm') )..
3221      CAP_FIRM(node,inv_tec,commodity,level,year) =E=
3222      SUM( (location,vintage,mode,time2)$(
3223             map_tec_act(location,inv_tec,year,mode,time2)
3224             AND map_tec_lifetime(location,inv_tec,vintage,year) ),
3225          output(location,inv_tec,vintage,year,mode,node,commodity,level,time2,time)
3226          * duration_time(time)
3227          * capacity_factor(node,inv_tec,vintage,year,time)
3228          * CAP(node,inv_tec,vintage,year) ) ;
3229   
3230  ***
3231  * Equation SYSTEM_RELIABILITY_CONSTRAINT
3232  * """"""""""""""""""""""""""""""""""""""
3233  * This constraint ensures that there is sufficient firm (dispatchable) capacity in each period.
3234  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
3235  *
3236  *   .. math::
3237  *      \sum_{t, q \substack{t \in T^{INV} \\ y^V \leq y} } &
3238  *          reliability\_factor_{n,t,y,c,l,h,'firm'}
3239  *          \cdot CAP\_FIRM_{n,t,c,l,y} \\
3240  *      + \sum_{t,q,y^V \leq y} &
3241  *          reliability\_factor_{n,t,y,c,l,h,q}
3242  *         \cdot ACT\_RATING_{n,t,y^V,y,c,l,h,q} \\
3243  *         & \quad \geq peak\_load\_factor_{n,c,l,y,h} \cdot COMMODITY\_USE_{n,c,l,y}
3244  *
3245  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` is defined.
3246  ***
3247  SYSTEM_RELIABILITY_CONSTRAINT(node,commodity,level,year,time)$( peak_load_factor(node,commodity,level,year,time) )..
3248      SUM(inv_tec$( reliability_factor(node,inv_tec,year,commodity,level,time,'firm') ),
3249          reliability_factor(node,inv_tec,year,commodity,level,time,'firm')
3250          * CAP_FIRM(node,inv_tec,commodity,level,year) )
3251      + SUM((tec, mode, vintage, rating_unfirm)$(
3252          reliability_factor(node,tec,year,commodity,level,time,rating_unfirm)
3253              AND map_tec_act(node,tec,year,mode,time)
3254              AND map_tec_lifetime(node,tec,vintage,year) ),
3255          reliability_factor(node,tec,year,commodity,level,time,rating_unfirm)
3256          * ACT_RATING(node,tec,vintage,year,commodity,level,time,rating_unfirm) )
3257      =G= peak_load_factor(node,commodity,level,year,time) * COMMODITY_USE(node,commodity,level,year) ;
3258   
3259  ***
3260  * .. _flexibility_constraint:
3261  *
3262  * Equation SYSTEM_FLEXIBILITY_CONSTRAINT
3263  * """"""""""""""""""""""""""""""""""""""
3264  * This constraint ensures that, in each sub-annual time slice, there is a sufficient
3265  * contribution from flexible technologies to ensure smooth system operation.
3266  *
3267  *   .. math::
3268  *      \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3269  *          flexibility\_factor_{n^L,t,y^V,y,m,c,l,h,'unrated'} \\
3270  *      & \quad   \cdot ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 64
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3271  *      & \quad   \cdot duration\_time\_rel_{h,h^A}
3272  *                \cdot ACT_{n,t,y^V,y,m,h} \\
3273  *      + \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3274  *         flexibility\_factor_{n^L,t,y^V,y,m,c,l,h,1} \\
3275  *      & \quad   \cdot ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3276  *      & \quad   \cdot duration\_time\_rel_{h,h^A}
3277  *                \cdot ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3278  *      \geq 0
3279  *
3280  ***
3281  SYSTEM_FLEXIBILITY_CONSTRAINT(node,commodity,level,year,time)$(
3282          SUM( (tec, vintage, mode, rating),
3283                  flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating) ) )..
3284      SUM( (tec, vintage, mode)$( flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,'unrated') ),
3285          flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,'unrated')
3286          * SUM((location,time2)$(
3287                map_tec_act(location,tec,year,mode,time2)
3288                AND map_tec_lifetime(location,tec,vintage,year) ),
3289              ( output(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3290                + input(location,tec,vintage,year,mode,node,commodity,level,time2,time) )
3291                  * duration_time_rel(time,time2)
3292                  * ACT(location,tec,vintage,year,mode,time2) ) )
3293      + SUM((tec, vintage, mode, rating_unrated)$(
3294              flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating_unrated)
3295              AND map_tec_act(node,tec,year,mode,time)
3296              AND map_tec_lifetime(node,tec,vintage,year)),
3297          flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating_unrated)
3298          * ACT_RATING(node,tec,vintage,year,commodity,level,time,rating_unrated) )
3299      =G= 0 ;
3300   
3301  ACT.LO(node,tec,vintage,year,mode,time)$sum(
3302      (commodity,level,rating), flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating) ) = 0 ;
3303   
3304  ***
3305  * Bounds on capacity and activity
3306  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3307  *
3308  * Equation NEW_CAPACITY_BOUND_UP
3309  * """"""""""""""""""""""""""""""
3310  * This constraint provides upper bounds on new capacity installation.
3311  *
3312  *   .. math::
3313  *      CAP\_NEW_{n,t,y} \leq bound\_new\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3314  *
3315  ***
3316  NEW_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_new_capacity_up(node,inv_tec,year) )..
3317      CAP_NEW(node,inv_tec,year) =L= bound_new_capacity_up(node,inv_tec,year)
3318  * + SLACK_CAP_NEW_BOUND_UP(node,inv_tec,year)
3319  ;
3320   
3321  ***
3322  * Equation NEW_CAPACITY_BOUND_LO
3323  * """"""""""""""""""""""""""""""
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 65
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3324  * This constraint provides lower bounds on new capacity installation.
3325  *
3326  *   .. math::
3327  *      CAP\_NEW_{n,t,y} \geq bound\_new\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3328  *
3329  ***
3330  NEW_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_new_capacity_lo(node,inv_tec,year) )..
3331      CAP_NEW(node,inv_tec,year) =G= bound_new_capacity_lo(node,inv_tec,year)
3332  * - SLACK_CAP_NEW_BOUND_LO(node,inv_tec,year)
3333  ;
3334   
3335  ***
3336  * Equation TOTAL_CAPACITY_BOUND_UP
3337  * """"""""""""""""""""""""""""""""
3338  * This constraint gives upper bounds on the total installed capacity of a technology in a specific year of operation
3339  * summed over all vintages.
3340  *
3341  *   .. math::
3342  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \leq bound\_total\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3343  *
3344  ***
3345  TOTAL_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_total_capacity_up(node,inv_tec,year) )..
3346      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
3347          CAP(node,inv_tec,vintage,year) )
3348      =L= bound_total_capacity_up(node,inv_tec,year)
3349  * + SLACK_CAP_TOTAL_BOUND_UP(node,inv_tec,year)
3350  ;
3351   
3352  ***
3353  * Equation TOTAL_CAPACITY_BOUND_LO
3354  * """"""""""""""""""""""""""""""""
3355  * This constraint gives lower bounds on the total installed capacity of a technology.
3356  *
3357  *   .. math::
3358  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \geq bound\_total\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3359  *
3360  ***
3361  TOTAL_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_total_capacity_lo(node,inv_tec,year) )..
3362      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
3363          CAP(node,inv_tec,vintage,year) )
3364       =G= bound_total_capacity_lo(node,inv_tec,year)
3365  * - SLACK_CAP_TOTAL_BOUND_LO(node,inv_tec,year)
3366  ;
3367   
3368  ***
3369  * Equation ACTIVITY_BOUND_UP
3370  * """"""""""""""""""""""""""
3371  * This constraint provides upper bounds by mode of a technology activity, summed over all vintages.
3372  *
3373  *   .. math::
3374  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t,m,y,h}
3375  *
3376  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 66
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3377  ACTIVITY_BOUND_UP(node,tec,year,mode,time)$(
3378      is_bound_activity_up(node,tec,year,mode,time) AND map_tec_act(node,tec,year,mode,time)
3379  )..
3380      SUM(
3381          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3382          ACT(node,tec,vintage,year,mode,time)
3383      )
3384      =L=
3385      bound_activity_up(node,tec,year,mode,time)
3386  * + SLACK_ACT_BOUND_UP(node,tec,year,mode,time)
3387  ;
3388   
3389  ***
3390  * Equation ACTIVITY_BOUND_ALL_MODES_UP
3391  * """"""""""""""""""""""""""""""""""""
3392  * This constraint provides upper bounds of a technology activity across all modes and vintages.
3393  *
3394  *   .. math::
3395  *      \sum_{y^V \leq y, m} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t,y,'all',h}
3396  *
3397  ***
3398  ACTIVITY_BOUND_ALL_MODES_UP(node,tec,year,time)$( is_bound_activity_up(node,tec,year,'all',time) )..
3399      SUM(
3400          (vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3401          ACT(node,tec,vintage,year,mode,time)
3402      )
3403      =L=
3404      bound_activity_up(node,tec,year,'all',time)
3405  * + SLACK_ACT_BOUND_UP(node,tec,year,'all',time)
3406  ;
3407   
3408  ***
3409  * Equation ACTIVITY_BOUND_LO
3410  * """"""""""""""""""""""""""
3411  * This constraint provides lower bounds by mode of a technology activity, summed over
3412  * all vintages.
3413  *
3414  *   .. math::
3415  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t,y,m,h}
3416  *
3417  * We assume that :math:`bound\_activity\_lo_{n,t,y,m,h} = 0`
3418  * unless explicitly stated otherwise.
3419  ***
3420  ACTIVITY_BOUND_LO(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mode,time) )..
3421      SUM(
3422          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3423          ACT(node,tec,vintage,year,mode,time)
3424      )
3425      =G=
3426      bound_activity_lo(node,tec,year,mode,time)
3427  * - SLACK_ACT_BOUND_LO(node,tec,year,mode,time)
3428  ;
3429   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 67
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3430  ***
3431  * Equation ACTIVITY_BOUND_ALL_MODES_LO
3432  * """"""""""""""""""""""""""""""""""""
3433  * This constraint provides lower bounds of a technology activity across all modes and vintages.
3434  *
3435  *   .. math::
3436  *      \sum_{y^V \leq y, m} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t,y,'all',h}
3437  *
3438  * We assume that :math:`bound\_activity\_lo_{n,t,y,'all',h} = 0`
3439  * unless explicitly stated otherwise.
3440  ***
3441  ACTIVITY_BOUND_ALL_MODES_LO(node,tec,year,time)$( bound_activity_lo(node,tec,year,'all',time) )..
3442      SUM(
3443          (vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3444          ACT(node,tec,vintage,year,mode,time)
3445      )
3446      =G=
3447      bound_activity_lo(node,tec,year,'all',time)
3448  * - SLACK_ACT_BOUND_LO(node,tec,year,'all',time)
3449  ;
3450   
3451  *----------------------------------------------------------------------------------------------------------------------*
3452  ***
3453  * Constraints on shares of technologies and commodities
3454  * -----------------------------------------------------
3455  * This section allows to include upper and lower bounds on the shares of modes used by a technology
3456  * or the shares of commodities produced or consumed by groups of technologies.
3457  *
3458  * Share constraints on activity by mode
3459  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3460  * Equation SHARES_MODE_UP
3461  * """""""""""""""""""""""
3462  * This constraint provides upper bounds of the share of the activity of one mode
3463  * of a technology. For example, it could limit the share of heat that can be produced
3464  * in a combined heat and electricity power plant.
3465  *
3466  *   .. math::
3467  *     ACT_{n^L,t,y^V,y,m,h^A}
3468  *     \leq share\_mode\_up_{s,n,y,m,h} \cdot
3469  *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
3470  *
3471  ***
3472  SHARE_CONSTRAINT_MODE_UP(shares,node,tec,mode,year,time)$(
3473      map_tec_act(node,tec,year,mode,time) AND
3474      share_mode_up(shares,node,tec,mode,year,time)
3475  )..
3476  * activity of mode to be constrained
3477      SUM(
3478          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3479          ACT(node,tec,vintage,year,mode,time)
3480      )
3481      =L=
3482      share_mode_up(shares,node,tec,mode,year,time) *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 68
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3483  * activity aggregated over all modes
3484      SUM(
3485          (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
3486          ACT(node,tec,vintage,year,mode2,time)
3487      ) ;
3488   
3489  ***
3490  * Equation SHARES_MODE_LO
3491  * """""""""""""""""""""""
3492  * This constraint provides lower bounds of the share of the activity of one mode of a technology.
3493  *
3494  *   .. math::
3495  *     ACT_{n^L,t,y^V,y,m,h^A}
3496  *     \geq share\_mode\_lo_{s,n,y,m,h} \cdot
3497  *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
3498  *
3499  ***
3500  SHARE_CONSTRAINT_MODE_LO(shares,node,tec,mode,year,time)$(
3501      map_tec_act(node,tec,year,mode,time) AND
3502      share_mode_lo(shares,node,tec,mode,year,time)
3503  )..
3504  * activity of mode to be constrained
3505      SUM(
3506          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3507          ACT(node,tec,vintage,year,mode,time)
3508      )
3509      =G=
3510      share_mode_lo(shares,node,tec,mode,year,time) *
3511  * activity aggregated over all modes
3512      SUM(
3513          (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
3514          ACT(node,tec,vintage,year,mode2,time)
3515      ) ;
3516   
3517  ***
3518  * Share constraints on commodities
3519  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3520  * These constraints allow to set upper and lower bound on the quantity of commodities produced or consumed by a group
3521  * of technologies relative to the commodities produced or consumed by another group.
3522  *
3523  * The implementation is generic and flexible, so that any combination of commodities, levels, technologies and nodes
3524  * can be put in relation to any other combination.
3525  *
3526  * The notation :math:`S^{share}` represents the mapping set `map_shares_commodity_share` denoting all technology types,
3527  * nodes, commodities and levels to be included in the numerator, and :math:`S^{total}` is
3528  * the equivalent mapping set `map_shares_commodity_total` for the denominator.
3529  *
3530  * Equation SHARE_CONSTRAINT_COMMODITY_UP
3531  * """"""""""""""""""""""""""""""""""""""
3532  *   .. math::
3533  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
3534  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3535  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 69
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3536  *      & \geq
3537  *        share\_commodity\_up_{s,n,y,h} \cdot
3538  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
3539  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3540  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
3541  *
3542  * This constraint is only active if :math:`share\_commodity\_up_{s,n,y,h}` is defined.
3543  ***
3544  SHARE_CONSTRAINT_COMMODITY_UP(shares,node_share,year,time)$( share_commodity_up(shares,node_share,year,time) )..
3545  * activity by type_tec_share technologies with map_shares_generic_share entries and a specific mode
3546      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
3547          ( map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level) OR
3548            map_shares_commodity_share(shares,node_share,node,type_tec_share,'all',commodity,level) ) AND
3549          cat_tec(type_tec_share,tec) AND
3550          map_tec_act(location,tec,year,mode,time2) AND
3551          map_tec_lifetime(location,tec,vintage,year)
3552      ),
3553          (
3554              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3555              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3556          ) *
3557          duration_time_rel(time,time2) *
3558          ACT(location,tec,vintage,year,mode,time2)
3559      )
3560      =L=
3561      share_commodity_up(shares,node_share,year,time) * (
3562  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
3563      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
3564          ( map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level) OR
3565             map_shares_commodity_total(shares,node_share,node,type_tec_total,'all',commodity,level) ) AND
3566          cat_tec(type_tec_total,tec) AND
3567          map_tec_act(location,tec,year,mode,time2) AND
3568          map_tec_lifetime(location,tec,vintage,year)
3569      ),
3570          (
3571              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3572              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3573          ) *
3574          duration_time_rel(time,time2) *
3575          ACT(location,tec,vintage,year,mode,time2)
3576      ) ) ;
3577   
3578  ***
3579  * Equation SHARE_CONSTRAINT_COMMODITY_LO
3580  * """"""""""""""""""""""""""""""""""""""
3581  *   .. math::
3582  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
3583  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3584  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
3585  *      & \leq
3586  *        share\_commodity\_lo_{s,n,y,h} \cdot
3587  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
3588  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 70
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3589  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
3590  *
3591  * This constraint is only active if :math:`share\_commodity\_lo_{s,n,y,h}` is defined.
3592  ***
3593  SHARE_CONSTRAINT_COMMODITY_LO(shares,node_share,year,time)$( share_commodity_lo(shares,node_share,year,time) )..
3594  * total input and output by `type_tec_share` technologies mapped to respective commodity, level and node
3595      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
3596          ( map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level) OR
3597             map_shares_commodity_share(shares,node_share,node,type_tec_share,'all',commodity,level) ) AND
3598          cat_tec(type_tec_share,tec) AND
3599          map_tec_act(location,tec,year,mode,time2) AND
3600          map_tec_lifetime(location,tec,vintage,year)
3601      ),
3602          (
3603              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3604              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3605          ) *
3606          duration_time_rel(time,time2) *
3607          ACT(location,tec,vintage,year,mode,time2)
3608      )
3609      =G=
3610      share_commodity_lo(shares,node_share,year,time) * (
3611  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
3612      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
3613          ( map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level) OR
3614             map_shares_commodity_total(shares,node_share,node,type_tec_total,'all',commodity,level) ) AND
3615          cat_tec(type_tec_total,tec) AND
3616          map_tec_act(location,tec,year,mode,time2) AND
3617          map_tec_lifetime(location,tec,vintage,year)
3618      ),
3619          (
3620              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3621              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3622          ) *
3623          duration_time_rel(time,time2) *
3624          ACT(location,tec,vintage,year,mode,time2)
3625      ) ) ;
3626   
3627  ***
3628  * .. _dynamic_constraints:
3629  *
3630  * Dynamic constraints on market penetration
3631  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3632  * The constraints in this section specify dynamic upper and lower bounds on new capacity and activity,
3633  * i.e., constraints on market penetration and rate of expansion or phase-out of a technology.
3634  *
3635  * The formulation directly includes the option for 'soft' relaxations of dynamic constraints
3636  * (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
3637  *
3638  * Equation NEW_CAPACITY_CONSTRAINT_UP
3639  * """""""""""""""""""""""""""""""""""
3640  * The level of new capacity additions cannot be greater than an initial value (compounded over the period duration),
3641  * annual growth of the existing 'capital stock', and a "soft" relaxation of the upper bound.
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 71
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3642  *
3643  *  .. math::
3644  *     CAP\_NEW_{n,t,y}
3645  *         \leq & ~ initial\_new\_capacity\_up_{n,t,y}
3646  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} - 1 }
3647  *                        { growth\_new\_capacity\_up_{n,t,y} } \\
3648  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
3649  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} \\
3650  *              & + CAP\_NEW\_UP_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_up_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
3651  *         & \quad \forall \ t \ \in \ T^{INV}
3652  *
3653  * Here, :math:`|y|` is the number of years in period :math:`y`, i.e., :math:`duration\_period_{y}`.
3654  ***
3655  NEW_CAPACITY_CONSTRAINT_UP(node,inv_tec,year)$( map_tec(node,inv_tec,year)
3656          AND is_dynamic_new_capacity_up(node,inv_tec,year) )..
3657  * actual new capacity
3658      CAP_NEW(node,inv_tec,year) =L=
3659  * initial new capacity (compounded over the duration of the period)
3660          initial_new_capacity_up(node,inv_tec,year) * (
3661              ( ( POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) ) - 1 )
3662                  / growth_new_capacity_up(node,inv_tec,year) )$( growth_new_capacity_up(node,inv_tec,year) )
3663                + ( duration_period(year) )$( NOT growth_new_capacity_up(node,inv_tec,year) )
3664              )
3665  * growth of 'capital stock' from previous period
3666          + SUM(year_all2$( seq_period(year_all2,year) ),
3667              CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
3668                + historical_new_capacity(node,inv_tec,year_all2) )
3669                # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3670              * POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) )
3671  * 'soft' relaxation of dynamic constraints
3672          + ( CAP_NEW_UP(node,inv_tec,year)
3673              * ( POWER( 1 + soft_new_capacity_up(node,inv_tec,year) , duration_period(year) ) - 1 )
3674             )$( soft_new_capacity_up(node,inv_tec,year) )
3675  * optional relaxation for calibration and debugging
3676  * + SLACK_CAP_NEW_DYNAMIC_UP(node,inv_tec,year)
3677  ;
3678   
3679  * GAMS implementation comment:
3680  * The sums in the constraint have to be over `year_all2` (not `year2`) to also get the dynamic effect from historical
3681  * new capacity. If one would sum over `year2`, periods prior to the first model year would be ignored.
3682   
3683  ***
3684  * Equation NEW_CAPACITY_SOFT_CONSTRAINT_UP
3685  * """"""""""""""""""""""""""""""""""""""""
3686  * This constraint ensures that the relaxation of the dynamic constraint on new capacity (investment) does not exceed
3687  * the level of the investment in the same period (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
3688  *
3689  *  .. math::
3690  *     CAP\_NEW\_UP_{n,t,y} \leq CAP\_NEW_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3691  *
3692  ***
3693  NEW_CAPACITY_SOFT_CONSTRAINT_UP(node,inv_tec,year)$( soft_new_capacity_up(node,inv_tec,year) )..
3694      CAP_NEW_UP(node,inv_tec,year) =L= CAP_NEW(node,inv_tec,year) ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 72
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3695   
3696  ***
3697  * Equation NEW_CAPACITY_CONSTRAINT_LO
3698  * """""""""""""""""""""""""""""""""""
3699  * This constraint gives dynamic lower bounds on new capacity.
3700  *
3701  *  .. math::
3702  *     CAP\_NEW_{n,t,y}
3703  *         \geq & - initial\_new\_capacity\_lo_{n,t,y}
3704  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} }
3705  *                        { growth\_new\_capacity\_lo_{n,t,y} } \\
3706  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
3707  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} \\
3708  *              & - CAP\_NEW\_LO_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_lo_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
3709  *         & \quad \forall \ t \ \in \ T^{INV}
3710  *
3711  ***
3712  NEW_CAPACITY_CONSTRAINT_LO(node,inv_tec,year)$( map_tec(node,inv_tec,year)
3713          AND is_dynamic_new_capacity_lo(node,inv_tec,year) )..
3714  * actual new capacity
3715      CAP_NEW(node,inv_tec,year) =G=
3716  * initial new capacity (compounded over the duration of the period)
3717          - initial_new_capacity_lo(node,inv_tec,year) * (
3718              ( ( POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) ) - 1 )
3719                  / growth_new_capacity_lo(node,inv_tec,year) )$( growth_new_capacity_lo(node,inv_tec,year) )
3720                + ( duration_period(year) )$( NOT growth_new_capacity_lo(node,inv_tec,year) )
3721              )
3722  * growth of 'capital stock' from previous period
3723          + SUM(year_all2$( seq_period(year_all2,year) ),
3724                  CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
3725                  + historical_new_capacity(node,inv_tec,year_all2)
3726                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3727              ) * POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) )
3728  * 'soft' relaxation of dynamic constraints
3729          - ( CAP_NEW_LO(node,inv_tec,year)
3730              * ( POWER( 1 + soft_new_capacity_lo(node,inv_tec,year) , duration_period(year) ) - 1 )
3731             )$( soft_new_capacity_lo(node,inv_tec,year) )
3732  * optional relaxation for calibration and debugging
3733  * - SLACK_CAP_NEW_DYNAMIC_LO(node,inv_tec,year)
3734  ;
3735   
3736  ***
3737  * Equation NEW_CAPACITY_SOFT_CONSTRAINT_LO
3738  * """"""""""""""""""""""""""""""""""""""""
3739  * This constraint ensures that the relaxation of the dynamic constraint on new capacity does not exceed
3740  * level of the investment in the same year.
3741  *
3742  *   .. math::
3743  *      CAP\_NEW\_LO_{n,t,y} \leq CAP\_NEW_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3744  *
3745  ***
3746  NEW_CAPACITY_SOFT_CONSTRAINT_LO(node,inv_tec,year)$( soft_new_capacity_lo(node,inv_tec,year) )..
3747      CAP_NEW_LO(node,inv_tec,year) =L= CAP_NEW(node,inv_tec,year) ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 73
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3748   
3749  ***
3750  * Equation ACTIVITY_CONSTRAINT_UP
3751  * """""""""""""""""""""""""""""""
3752  * This constraint gives dynamic upper bounds on the market penetration of a technology activity.
3753  *
3754  *  .. math::
3755  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3756  *         \leq & ~ initial\_activity\_up_{n,t,y,h}
3757  *             \cdot \frac{ \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 }
3758  *                        { growth\_activity\_up_{n,t,y,h} } \\
3759  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
3760  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
3761  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} \\
3762  *             & + ACT\_UP_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
3763  *
3764  ***
3765  ACTIVITY_CONSTRAINT_UP(node,tec,year,time)$( map_tec_time(node,tec,year,time)
3766          AND is_dynamic_activity_up(node,tec,year,time) )..
3767  * actual activity (summed over modes)
3768      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3769              ACT(node,tec,vintage,year,mode,time) ) =L=
3770  * initial activity (compounded over the duration of the period)
3771          initial_activity_up(node,tec,year,time) * (
3772              ( ( POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) ) - 1 )
3773                  / growth_activity_up(node,tec,year,time) )$( growth_activity_up(node,tec,year,time) )
3774                + ( duration_period(year) )$( NOT growth_activity_up(node,tec,year,time) )
3775              )
3776  * growth of 'capital stock' from previous period
3777          + SUM((year_all2)$( seq_period(year_all2,year) ),
3778              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
3779                                   AND model_horizon(year_all2) ),
3780                          ACT(node,tec,vintage,year_all2,mode,time) )
3781                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
3782                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3783                  )
3784              * POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) )
3785  * 'soft' relaxation of dynamic constraints
3786          + ( ACT_UP(node,tec,year,time)
3787                  * ( POWER( 1 + soft_activity_up(node,tec,year,time) , duration_period(year) ) - 1 )
3788              )$( soft_activity_up(node,tec,year,time) )
3789  * optional relaxation for calibration and debugging
3790  * + SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
3791  ;
3792   
3793  ***
3794  * Equation ACTIVITY_SOFT_CONSTRAINT_UP
3795  * """"""""""""""""""""""""""""""""""""
3796  * This constraint ensures that the relaxation of the dynamic activity constraint does not exceed the
3797  * level of the activity.
3798  *
3799  *   .. math::
3800  *      ACT\_UP_{n,t,y,h} \leq \sum_{y^V \leq y,m} ACT_{n^L,t,y^V,y,m,h}
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 74
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3801  *
3802  ***
3803  ACTIVITY_SOFT_CONSTRAINT_UP(node,tec,year,time)$( soft_activity_up(node,tec,year,time) )..
3804      ACT_UP(node,tec,year,time) =L=
3805          SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
3806              ACT(node,tec,vintage,year,mode,time) ) ;
3807   
3808  ***
3809  * Equation ACTIVITY_CONSTRAINT_LO
3810  * """""""""""""""""""""""""""""""
3811  * This constraint gives dynamic lower bounds on the market penetration of a technology activity.
3812  *
3813  *  .. math::
3814  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3815  *         \geq & - initial\_activity\_lo_{n,t,y,h}
3816  *             \cdot \frac{ \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 }
3817  *                        { growth\_activity\_lo_{n,t,y,h} } \\
3818  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
3819  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
3820  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} \\
3821  *             & - ACT\_LO_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
3822  *
3823  ***
3824  ACTIVITY_CONSTRAINT_LO(node,tec,year,time)$( map_tec_time(node,tec,year,time)
3825          AND is_dynamic_activity_lo(node,tec,year,time) )..
3826  * actual activity (summed over modes)
3827      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3828              ACT(node,tec,vintage,year,mode,time) ) =G=
3829  * initial activity (compounded over the duration of the period)
3830          - initial_activity_lo(node,tec,year,time) * (
3831              ( ( POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) ) - 1 )
3832                  / growth_activity_lo(node,tec,year,time) )$( growth_activity_lo(node,tec,year,time) )
3833                + ( duration_period(year) )$( NOT growth_activity_lo(node,tec,year,time) )
3834              )
3835  * growth of 'capital stock' from previous period
3836          + SUM((year_all2)$( seq_period(year_all2,year) ),
3837              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
3838                                   AND model_horizon(year_all2)),
3839                          ACT(node,tec,vintage,year_all2,mode,time) )
3840                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
3841                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3842                  )
3843              * POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) )
3844  * 'soft' relaxation of dynamic constraints
3845          - ( ACT_LO(node,tec,year,time)
3846              * ( POWER( 1 + soft_activity_lo(node,tec,year,time) , duration_period(year) ) - 1 )
3847              )$( soft_activity_lo(node,tec,year,time) )
3848  * optional relaxation for calibration and debugging
3849  * - SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
3850  ;
3851   
3852  ***
3853  * Equation ACTIVITY_SOFT_CONSTRAINT_LO
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 75
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3854  * """"""""""""""""""""""""""""""""""""
3855  * This constraint ensures that the relaxation of the dynamic activity constraint does not exceed the
3856  * level of the activity.
3857  *
3858  *   .. math::
3859  *      ACT\_LO_{n,t,y,h} \leq \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3860  *
3861  ***
3862  ACTIVITY_SOFT_CONSTRAINT_LO(node,tec,year,time)$( soft_activity_lo(node,tec,year,time) )..
3863      ACT_LO(node,tec,year,time) =L=
3864          SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
3865              ACT(node,tec,vintage,year,mode,time) ) ;
3866   
3867  *----------------------------------------------------------------------------------------------------------------------*
3868   
3869  ***
3870  * Emission section
3871  * ----------------
3872  *
3873  * Auxiliary variable for aggregate emissions
3874  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3875  *
3876  * Equation EMISSION_EQUIVALENCE
3877  * """""""""""""""""""""""""""""
3878  * This constraint simplifies the notation of emissions aggregated over different technology types
3879  * and the land-use model emulator. The formulation includes emissions from all sub-nodes :math:`n^L` of :math:`n`.
3880  *
3881  *   .. math::
3882  *      EMISS_{n,e,\widehat{t},y} =
3883  *          \sum_{n^L \in N(n)} \Bigg(
3884  *              \sum_{t \in T(\widehat{t}),y^V \leq y,m,h }
3885  *                  emission\_factor_{n^L,t,y^V,y,m,e} \cdot ACT_{n^L,t,y^V,y,m,h} \\
3886  *              + \sum_{s} \ land\_emission_{n^L,s,y,e} \cdot LAND_{n^L,s,y}
3887  *                   \text{ if } \widehat{t} \in \widehat{T}^{LAND} \Bigg)
3888  *
3889  ***
3890  EMISSION_EQUIVALENCE(node,emission,type_tec,year)..
3891      EMISS(node,emission,type_tec,year)
3892      =E=
3893      SUM(location$( map_node(node,location) ),
3894  * emissions from technology activity
3895          SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
3896              AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifetime(location,tec,vintage,year) ),
3897          emission_factor(location,tec,vintage,year,mode,emission) * ACT(location,tec,vintage,year,mode,time) )
3898  * emissions from land use if 'type_tec' is included in the dynamic set 'type_tec_land'
3899          + SUM(land_scenario$( type_tec_land(type_tec) ),
3900              land_emission(location,land_scenario,year,emission) * LAND(location,land_scenario,year) )
3901        ) ;
3902   
3903  ***
3904  * Bound on emissions
3905  * ^^^^^^^^^^^^^^^^^^
3906  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 76
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3907  * Equation EMISSION_CONSTRAINT
3908  * """"""""""""""""""""""""""""
3909  * This constraint enforces upper bounds on emissions (by emission type). For all bounds that include multiple periods,
3910  * the parameter :math:`bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}` is scaled to represent average annual
3911  * emissions over all years included in the year-set :math:`\widehat{y}`.
3912  *
3913  * The formulation includes historical emissions and allows to model constraints ranging over both the model horizon
3914  * and historical periods.
3915  *
3916  *   .. math::
3917  *      \frac{
3918  *          \sum_{y' \in Y(\widehat{y}), e \in E(\widehat{e})}
3919  *              \begin{array}{l}
3920  *                  duration\_period_{y'} \cdot emission\_scaling_{\widehat{e},e} \cdot \\
3921  *                  \Big( EMISS_{n,e,\widehat{t},y'} + \sum_{m} historical\_emission_{n,e,\widehat{t},y'} \Big)
3922  *              \end{array}
3923  *          }
3924  *        { \sum_{y' \in Y(\widehat{y})} duration\_period_{y'} }
3925  *      \leq bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}
3926  *
3927  ***
3928  EMISSION_CONSTRAINT(node,type_emission,type_tec,type_year)$is_bound_emission(node,type_emission,type_tec,type_year)..
3929      SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emission(type_emission,emission) ),
3930          duration_period(year_all2) * emission_scaling(type_emission,emission) *
3931              ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
3932                  + historical_emission(node,emission,type_tec,year_all2) )
3933        )
3934      / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
3935      =L= bound_emission(node,type_emission,type_tec,type_year) ;
3936   
3937   
3938  *----------------------------------------------------------------------------------------------------------------------*
3939  ***
3940  * Land-use model emulator section
3941  * -------------------------------
3942  *
3943  * Bounds on total land use
3944  * ^^^^^^^^^^^^^^^^^^^^^^^^
3945  *
3946  * Equation LAND_CONSTRAINT
3947  * """"""""""""""""""""""""
3948  * This constraint enforces a meaningful result of the land-use model emulator,
3949  * in particular a bound on the total land used in |MESSAGEix|.
3950  * The linear combination of land scenarios must be equal to 1.
3951  *
3952  *  .. math::
3953  *     \sum_{s \in S} LAND_{n,s,y} = 1
3954  *
3955  ***
3956  LAND_CONSTRAINT(node,year)$( SUM(land_scenario$( map_land(node,land_scenario,year) ), 1 ) ) ..
3957      SUM(land_scenario$( map_land(node,land_scenario,year) ), LAND(node,land_scenario,year) ) =E= 1 ;
3958   
3959  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 77
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3960  * Dynamic constraints on land use
3961  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3962  * These constraints enforces upper and lower bounds on the change rate per land scenario.
3963  *
3964  * Equation DYNAMIC_LAND_SCEN_CONSTRAINT_UP
3965  * """"""""""""""""""""""""""""""""""""""""
3966  *
3967  *  .. math::
3968  *     LAND_{n,s,y}
3969  *         \leq & initial\_land\_scen\_up_{n,s,y}
3970  *             \cdot \frac{ \Big( 1 + growth\_land\_scen\_up_{n,s,y} \Big)^{|y|} - 1 }
3971  *                        { growth\_land\_scen\_up_{n,s,y} } \\
3972  *              & + \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big)
3973  *                  \cdot \Big( 1 + growth\_land\_scen\_up_{n,s,y} \Big)^{|y|}
3974  *
3975  ***
3976  DYNAMIC_LAND_SCEN_CONSTRAINT_UP(node,land_scenario,year)$( map_land(node,land_scenario,year)
3977          AND is_dynamic_land_scen_up(node,land_scenario,year) )..
3978  * share of land scenario in
3979      LAND(node,land_scenario,year) =L=
3980  * initial 'new' land used for that type (compounded over the duration of the period)
3981          initial_land_scen_up(node,land_scenario,year) * (
3982              ( ( POWER( 1 + growth_land_scen_up(node,land_scenario,year) , duration_period(year) ) - 1 )
3983                  / growth_land_scen_up(node,land_scenario,year) )$( growth_land_scen_up(node,land_scenario,year) )
3984                + ( duration_period(year) )$( NOT growth_land_scen_up(node,land_scenario,year) )
3985              )
3986  * expansion of land scenario from previous period
3987          + SUM((year_all2)$( seq_period(year_all2,year) ),
3988                  ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
3989                    + historical_land(node,land_scenario,year_all2) )
3990                  * POWER( 1 + growth_land_scen_up(node,land_scenario,year) , duration_period(year) )
3991              )
3992  * optional relaxation for calibration and debugging
3993  * + SLACK_LAND_SCEN_UP(node,land_scenario,year)
3994  ;
3995   
3996  ***
3997  * Equation DYNAMIC_LAND_SCEN_CONSTRAINT_LO
3998  * """"""""""""""""""""""""""""""""""""""""
3999  *
4000  *  .. math::
4001  *     LAND_{n,s,y}
4002  *         \geq & - initial\_land\_scen\_lo_{n,s,y}
4003  *             \cdot \frac{ \Big( 1 + growth\_land\_scen\_lo_{n,s,y} \Big)^{|y|} - 1 }
4004  *                        { growth\_land\_scen\_lo_{n,s,y} } \\
4005  *              & + \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big)
4006  *                  \cdot \Big( 1 + growth\_land\_scen\_lo_{n,s,y} \Big)^{|y|}
4007  *
4008  ***
4009  DYNAMIC_LAND_SCEN_CONSTRAINT_LO(node,land_scenario,year)$( map_land(node,land_scenario,year)
4010          AND is_dynamic_land_scen_lo(node,land_scenario,year) )..
4011  * share of land scenario in
4012      LAND(node,land_scenario,year) =G=
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 78
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4013  * initial 'new' land used for that type (compounded over the duration of the period)
4014          - initial_land_scen_lo(node,land_scenario,year) * (
4015              ( ( POWER( 1 + growth_land_scen_lo(node,land_scenario,year) , duration_period(year) ) - 1 )
4016                  / growth_land_scen_lo(node,land_scenario,year) )$( growth_land_scen_lo(node,land_scenario,year) )
4017                + ( duration_period(year) )$( NOT growth_land_scen_lo(node,land_scenario,year) )
4018              )
4019  * reduction of land scenario from previous period
4020          + SUM((year_all2)$( seq_period(year_all2,year) ),
4021                  ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4022                    + historical_land(node,land_scenario,year_all2) )
4023                  * POWER( 1 + growth_land_scen_lo(node,land_scenario,year) , duration_period(year) )
4024              )
4025  * optional relaxation for calibration and debugging
4026  * - SLACK_LAND_SCEN_LO(node,land_scenario,year)
4027  ;
4028   
4029  ***
4030  * These constraints enforces upper and lower bounds on the change rate per land type
4031  * determined as a linear combination of land use scenarios.
4032  *
4033  * Equation DYNAMIC_LAND_TYPE_CONSTRAINT_UP
4034  * """"""""""""""""""""""""""""""""""""""""
4035  *
4036  *  .. math::
4037  *     \sum_{s \in S} land\_use_{n,s,y,u} &\cdot LAND_{n,s,y}
4038  *         \leq initial\_land\_up_{n,y,u}
4039  *             \cdot \frac{ \Big( 1 + growth\_land\_up_{n,y,u} \Big)^{|y|} - 1 }
4040  *                        { growth\_land\_up_{n,y,u} } \\
4041  *              & + \Big( \sum_{s \in S} \big( land\_use_{n,s,y-1,u}
4042  *                          + dynamic\_land\_up_{n,s,y-1,u} \big) \\
4043  *                            & \quad \quad \cdot \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big) \Big) \\
4044  *                            & \quad \cdot \Big( 1 + growth\_land\_up_{n,y,u} \Big)^{|y|}
4045  *
4046  ***
4047  DYNAMIC_LAND_TYPE_CONSTRAINT_UP(node,year,land_type)$( is_dynamic_land_up(node,year,land_type) )..
4048  * amount of land assigned to specific type in current period
4049      SUM(land_scenario$( map_land(node,land_scenario,year) ),
4050          land_use(node,land_scenario,year,land_type) * LAND(node,land_scenario,year) ) =L=
4051  * initial 'new' land used for that type (compounded over the duration of the period)
4052          initial_land_up(node,year,land_type) * (
4053              ( ( POWER( 1 + growth_land_up(node,year,land_type) , duration_period(year) ) - 1 )
4054                  / growth_land_up(node,year,land_type) )$( growth_land_up(node,year,land_type) )
4055                + ( duration_period(year) )$( NOT growth_land_up(node,year,land_type) )
4056              )
4057  * expansion of previously used land of this type from previous period and upper bound on land use transformation
4058          + SUM((year_all2)$( seq_period(year_all2,year) ),
4059              SUM(land_scenario$( map_land(node,land_scenario,year) ),
4060                  ( land_use(node,land_scenario,year_all2,land_type)
4061                    + dynamic_land_up(node,land_scenario,year_all2,land_type) )
4062                  * ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4063                      + historical_land(node,land_scenario,year_all2) )
4064                  * POWER( 1 + growth_land_up(node,year,land_type) , duration_period(year) )
4065                )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 79
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4066            )
4067  * optional relaxation for calibration and debugging
4068  * + SLACK_LAND_TYPE_UP(node,year,land_type)
4069  ;
4070   
4071  ***
4072  * Equation DYNAMIC_LAND_TYPE_CONSTRAINT_LO
4073  * """"""""""""""""""""""""""""""""""""""""
4074  *
4075  *  .. math::
4076  *     \sum_{s \in S} land\_use_{n,s,y,u} &\cdot LAND_{n,s,y}
4077  *         \geq - initial\_land\_lo_{n,y,u}
4078  *             \cdot \frac{ \Big( 1 + growth\_land\_lo_{n,y,u} \Big)^{|y|} - 1 }
4079  *                        { growth\_land\_lo_{n,y,u} } \\
4080  *              & + \Big( \sum_{s \in S} \big( land\_use_{n,s,y-1,u}
4081  *                          + dynamic\_land\_lo_{n,s,y-1,u} \big) \\
4082  *                            & \quad \quad \cdot \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big) \Big) \\
4083  *                            & \quad \cdot \Big( 1 + growth\_land\_lo_{n,y,u} \Big)^{|y|}
4084  *
4085  ***
4086  DYNAMIC_LAND_TYPE_CONSTRAINT_LO(node,year,land_type)$( is_dynamic_land_lo(node,year,land_type) )..
4087  * amount of land assigned to specific type in current period
4088      SUM(land_scenario$( map_land(node,land_scenario,year) ),
4089          land_use(node,land_scenario,year,land_type) * LAND(node,land_scenario,year) ) =G=
4090  * initial 'new' land used for that type (compounded over the duration of the period)
4091          - initial_land_lo(node,year,land_type) * (
4092              ( ( POWER( 1 + growth_land_up(node,year,land_type) , duration_period(year) ) - 1 )
4093                  / growth_land_lo(node,year,land_type) )$( growth_land_lo(node,year,land_type) )
4094                + ( duration_period(year) )$( NOT growth_land_lo(node,year,land_type) )
4095              )
4096  * expansion of previously used land of this type from previous period and lower bound on land use transformation
4097          + SUM((year_all2)$( seq_period(year_all2,year) ),
4098              SUM(land_scenario$( map_land(node,land_scenario,year) ),
4099                  ( land_use(node,land_scenario,year_all2,land_type)
4100                    + dynamic_land_lo(node,land_scenario,year_all2,land_type) )
4101                  * ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4102                      + historical_land(node,land_scenario,year_all2) )
4103                  * POWER( 1 + growth_land_lo(node,year,land_type) , duration_period(year) )
4104                )
4105            )
4106  * optional relaxation for calibration and debugging
4107  * - SLACK_LAND_TYPE_LO(node,year,land_type)
4108  ;
4109   
4110  *----------------------------------------------------------------------------------------------------------------------*
4111  ***
4112  * .. _section_of_generic_relations:
4113  *
4114  * Section of generic relations (linear constraints)
4115  * -------------------------------------------------
4116  *
4117  * This feature is intended for development and testing only - all new features should be implemented
4118  * as specific new mathematical formulations and associated sets & parameters!
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 80
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4119  *
4120  * Auxiliary variable for left-hand side
4121  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4122  *
4123  * Equation RELATION_EQUIVALENCE
4124  * """""""""""""""""""""""""""""
4125  *   .. math::
4126  *      REL_{r,n,y} = \sum_{t} \Bigg(
4127  *          & \ relation\_new\_capacity_{r,n,y,t} \cdot CAP\_NEW_{n,t,y} \\[4 pt]
4128  *          & + relation\_total\_capacity_{r,n,y,t} \cdot \sum_{y^V \leq y} \ CAP_{n,t,y^V,y} \\
4129  *          & + \sum_{n^L,y',m,h} \ relation\_activity_{r,n,y,n^L,t,y',m} \\
4130  *          & \quad \quad \cdot \Big( \sum_{y^V \leq y'} ACT_{n^L,t,y^V,y',m,h}
4131  *                              + historical\_activity_{n^L,t,y',m,h} \Big) \Bigg)
4132  *
4133  * The parameter :math:`historical\_new\_capacity_{r,n,y}` is not included here, because relations can only be active
4134  * in periods included in the model horizon and there is no "writing" of capacity relation factors across periods.
4135  ***
4136   
4137  RELATION_EQUIVALENCE(relation,node,year)..
4138      REL(relation,node,year)
4139          =E=
4140      SUM(tec,
4141          ( relation_new_capacity(relation,node,year,tec) * CAP_NEW(node,tec,year)
4142            + relation_total_capacity(relation,node,year,tec)
4143              * SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), CAP(node,tec,vintage,year) )
4144            )$( inv_tec(tec) )
4145          + SUM((location,year_all2,mode,time)$( map_tec_act(location,tec,year_all2,mode,time) ),
4146              relation_activity(relation,node,year,location,tec,year_all2,mode)
4147              * ( SUM(vintage$( map_tec_lifetime(location,tec,vintage,year_all2) ),
4148                    ACT(location,tec,vintage,year_all2,mode,time) )
4149                    + historical_activity(location,tec,year_all2,mode,time) )
4150            )
4151        ) ;
4152   
4153  ***
4154  * Upper and lower bounds on user-defined relations
4155  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4156  *
4157  * Equation RELATION_CONSTRAINT_UP
4158  * """""""""""""""""""""""""""""""
4159  *   .. math::
4160  *      REL_{r,n,y} \leq relation\_upper_{r,n,y}
4161  ***
4162  RELATION_CONSTRAINT_UP(relation,node,year)$( is_relation_upper(relation,node,year) )..
4163      REL(relation,node,year)
4164  * - SLACK_RELATION_BOUND_UP(relation,node,year)
4165      =L= relation_upper(relation,node,year) ;
4166   
4167  ***
4168  * Equation RELATION_CONSTRAINT_LO
4169  * """""""""""""""""""""""""""""""
4170  *   .. math::
4171  *      REL_{r,n,y} \geq relation\_lower_{r,n,y}
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 81
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4172  ***
4173  RELATION_CONSTRAINT_LO(relation,node,year)$( is_relation_lower(relation,node,year) )..
4174      REL(relation,node,year)
4175  * + SLACK_RELATION_BOUND_LO(relation,node,year)
4176      =G= relation_lower(relation,node,year) ;
4177   
4178  *----------------------------------------------------------------------------------------------------------------------*
4179  * model statements                                                                                                     *
4180  *----------------------------------------------------------------------------------------------------------------------*
4181   
4182  Model MESSAGE_LP / all / ;
4183   
4184  MESSAGE_LP.holdfixed = 1 ;
4185  MESSAGE_LP.optfile = 1 ;
4186  MESSAGE_LP.optcr = 0 ;
4187   
4188  *----------------------------------------------------------------------------------------------------------------------*
4189  * solve statements (including the loop for myopic or rolling-horizon optimization)                                     *
4190  *----------------------------------------------------------------------------------------------------------------------*
4191   
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_solve.gms
4192  $INCLUDE MESSAGE/model_solve.gms
4193  ***
4194  * Solve statement workflow
4195  * ========================
4196  *
4197  * This part of the code includes the perfect-foresight, myopic and rolling-horizon model solve statements
4198  * including the required accounting of investment costs beyond the model horizon.
4199  ***
4200   
4201  if (0 = 0,
4202  ***
4203  * Perfect-foresight model
4204  * ~~~~~~~~~~~~~~~~~~~~~~~
4205  * For the perfect foresight version of |MESSAGEix|, include all years in the model horizon and solve the entire model.
4206  * This is the standard option; the GAMS global variable ``%foresight%=0`` by default.
4207  *
4208  * .. math::
4209  *    \min_x OBJ = \sum_{y \in Y} OBJ_y(x_y)
4210  ***
4211   
4212  * reset year in case it was set by MACRO to include the base year before
4213      year(year_all) = no ;
4214  * include all model periods in the optimization horizon (excluding historical periods prior to 'first_period')
4215      year(year_all)$( model_horizon(year_all) ) = yes ;
4216   
4217  * write a status update to the log file, solve the model
4218      put_utility 'log' /'+++ Solve the perfect-foresight version of MESSAGEix +++ ' ;
4219      Solve MESSAGE_LP using LP minimizing OBJ ;
4220   
4221  * write model status summary
4222      status('perfect_foresight','modelstat') = MESSAGE_LP.modelstat ;
4223      status('perfect_foresight','solvestat') = MESSAGE_LP.solvestat ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 82
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4224      status('perfect_foresight','resUsd')    = MESSAGE_LP.resUsd ;
4225      status('perfect_foresight','objEst')    = MESSAGE_LP.objEst ;
4226      status('perfect_foresight','objVal')    = MESSAGE_LP.objVal ;
4227   
4228  * write an error message if model did not solve to optimality
4229      IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
4230          put_utility 'log' /'+++ MESSAGEix did not solve to optimality - run is aborted, no output produced! +++ ' ;
4231          ABORT "MESSAGEix did not solve to optimality!"
4232      ) ;
4233   
4234  * rescale the dual of the emission constraint to account that the constraint is defined on the average year, not total
4235  EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)$(
4236          EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) ) =
4237      EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)
4238          / SUM(year$( cat_year(type_year,year) ), duration_period(year) )
4239          * SUM(year$( map_first_period(type_year,year) ), duration_period(year) / df_period(year) * df_year(year) );
4240   
4241   
4242  * assign auxiliary variables DEMAND, PRICE_COMMODITY and PRICE_EMISSION for integration with MACRO and reporting
4243      DEMAND.l(node,commodity,level,year,time) = demand_fixed(node,commodity,level,year,time) ;
4244      PRICE_COMMODITY.l(node,commodity,level,year,time) =
4245          ( COMMODITY_BALANCE_GT.m(node,commodity,level,year,time) + COMMODITY_BALANCE_LT.m(node,commodity,level,year,time) )
4246              / df_period(year) ;
4247      PRICE_EMISSION.l(node,type_emission,type_tec,year)$( SUM(type_year$( cat_year(type_year,year) ), 1 ) ) =
4248          SMAX(type_year$( cat_year(type_year,year) ),
4249                 - EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) )
4250              / df_year(year) ;
4251      PRICE_EMISSION.l(node,type_emission,type_tec,year)$(
4252          PRICE_EMISSION.l(node,type_emission,type_tec,year) = - inf ) = 0 ;
4253   
4254  * AUX_ACT_BOUND_LO(node,tec,year_all,year_all2,mode,time)$( ACT.l(node,tec,year_all,year_all2,mode,time) < 0 AND
4255  *    ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) = yes ;
4256  * AUX_ACT_BOUND_UP(node,tec,year_all,year_all2,mode,time)$( ACT.l(node,tec,year_all,year_all2,mode,time) > 0 AND
4257  *    ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9 ) = yes ;
4258   
4259  else
4260  ***
4261  * Recursive-dynamic and myopic model
4262  * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4263  * For the myopic and rolling-horizon models, loop over horizons and iteratively solve the model, keeping the decision
4264  * variables from prior periods fixed.
4265  * This option is selected by setting the GAMS global variable ``%foresight%`` to a value greater than 0,
4266  * where the value represents the number of years that the model instance is considering when iterating over the periods
4267  * of the optimization horizon.
4268  *
4269  * Loop over :math:`\hat{y} \in Y`, solving
4270  *
4271  * .. math::
4272  *     \min_x \ OBJ = \sum_{y \in \hat{Y}(\hat{y})} OBJ_y(x_y) \\
4273  *     \text{s.t. } x_{y'} = x_{y'}^* \quad \forall \ y' < y
4274  *
4275  * where :math:`\hat{Y}(\hat{y}) = \{y \in Y | \ |\hat{y}| - |y| < optimization\_horizon \}` and
4276  * :math:`x_{y'}^*` is the optimal value of :math:`x_{y'}` in iteration :math:`|y'|` of the iterative loop.
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 83
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4277  *
4278  * The advantage of this implementation is that there is no need to 'store' the optimal values of all decision
4279  * variables in additional reporting parameters - the last model solve automatically includes the results over the
4280  * entire model horizon and can be imported via the ixmp interface.
4281  ***
4282   
4283      year(year_all) = no ;
4284   
4285      LOOP(year_all$( model_horizon(year_all) ),
4286   
4287  * include all past periods and future periods including the period where the %foresight% is reached
4288          year(year_all) = yes ;
4289   
4290  * reset the investment cost scaling parameter
4291          year(year_all2)$( ORD(year_all2) > ORD(year_all)
4292              AND duration_period_sum(year_all,year_all2) < 0 ) = yes ;
4293   
4294  * write a status update and time elapsed to the log file, solve the model
4295          put_utility 'log' /'+++ Solve the recursive-dynamic version of MESSAGEix - iteration ' year_all.tl:0 '  +++ ' ;
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/aux_computation_time.gms
4296          $$INCLUDE includes/aux_computation_time.gms
4297  * elegant reporting of GAMS computing time
4298  * requires aux_computation_time_init.gms
4299   
4300  if ( timeElapsed > 7200 ,
4301      put_utility 'log' / '    Time since GAMS start: ' floor( timeElapsed / 3600 ):0:0 ' hours, ' ( mod( timeElapsed, 3600 ) / 60 ):0:0 ' minutes' ;
4302  elseif timeElapsed > 3720 ,
4303      put_utility 'log' / '    Time since GAMS start: 1 hour, ' ( timeElapsed / 60 - 60 ):0:0 ' minutes' ;
4304  elseif timeElapsed > 3660 ,
4305      put_utility 'log' / '    Time since GAMS start: 1 hour, 1 minute' ;
4306  elseif timeElapsed > 120 ,
4307      put_utility 'log' / '    Time since GAMS start: ' ( timeElapsed / 60 ):0:0 ' minutes' ;
4308  else
4309      put_utility 'log' / '    Give it a bit more time, not even two minutes yet... ' ;
4310  ) ;
4311          Solve MESSAGE_LP using LP minimizing OBJ ;
4312   
4313  * write model status summary
4314          status(year_all,'modelstat') = MESSAGE_LP.modelstat ;
4315          status(year_all,'solvestat') = MESSAGE_LP.solvestat ;
4316          status(year_all,'resUsd')    = MESSAGE_LP.resUsd ;
4317          status(year_all,'objEst')    = MESSAGE_LP.objEst ;
4318          status(year_all,'objVal')    = MESSAGE_LP.objVal ;
4319   
4320  * write an error message AND ABORT THE SOLVE LOOP if model did not solve to optimality
4321          IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
4322              put_utility 'log' /'+++ MESSAGEix did not solve to optimality - run is aborted, no output produced! +++ ' ;
4323              ABORT "MESSAGEix did not solve to optimality!"
4324          ) ;
4325   
4326  * fix all variables of the current iteration period 'year_all' to the optimal levels
4327          EXT.fx(node,commodity,grade,year_all) =  EXT.l(node,commodity,grade,year_all) ;
4328          CAP_NEW.fx(node,tec,year_all) = CAP_NEW.l(node,tec,year_all) ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 84
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4329          CAP.fx(node,tec,year_all2,year_all)$( map_period(year_all2,year_all) ) = CAP.l(node,tec,year_all,year_all2) ;
4330          ACT.fx(node,tec,year_all2,year_all,mode,time)$( map_period(year_all2,year_all) )
4331              = ACT.l(node,tec,year_all2,year_all,mode,time) ;
4332          CAP_NEW_UP.fx(node,tec,year_all) = CAP_NEW_UP.l(node,tec,year_all) ;
4333          CAP_NEW_LO.fx(node,tec,year_all) = CAP_NEW_LO.l(node,tec,year_all) ;
4334          ACT_UP.fx(node,tec,year_all,time) = ACT_UP.l(node,tec,year_all,time) ;
4335          ACT_LO.fx(node,tec,year_all,time) = ACT_LO.l(node,tec,year_all,time) ;
4336   
4337      ) ; # end of the recursive-dynamic loop
4338   
4339  ) ; # end of if statement for the selection betwen perfect-foresight or recursive-dynamic model
4340   
4341  *----------------------------------------------------------------------------------------------------------------------*
4342  * post-processing of trade costs and total costs                                                                       *
4343  *----------------------------------------------------------------------------------------------------------------------*
4344   
4345  * calculation of commodity import costs by node, commodity and year
4346  import_cost(node2, commodity, year) =
4347            SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
4348              AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
4349  * import into node2 from other nodes
4350      input(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
4351      * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
4352      * PRICE_COMMODITY.l(node,commodity,level,year,time) )
4353  ;
4354   
4355  * calculation of commodity export costs by node, commodity and year
4356  export_cost(node2, commodity, year) =
4357            SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
4358              AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
4359  * export from node2 to other market
4360      output(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
4361      * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
4362      * PRICE_COMMODITY.l(node,commodity,level,year,time) )
4363  ;
4364   
4365  * net commodity trade costs by node and year
4366  trade_cost(node2, year) = SUM(commodity, import_cost(node2, commodity, year) - export_cost(node2, commodity, year)) ;
4367   
4368  * total energy system costs excluding taxes by node and time (CAVEAT: lacking regional corrections due to emission trading)
4369  COST_NODAL_NET.L(node, year)$(NOT macro_base_period(year)) = (
4370      COST_NODAL.L(node, year) + trade_cost(node, year)
4371  * subtract emission taxes applied at any higher nodal level (via map_node set)
4372      - sum((type_emission,emission,type_tec,type_year,node2)$( emission_scaling(type_emission,emission)
4373              AND map_node(node2,node) AND cat_year(type_year,year) ),
4374          emission_scaling(type_emission,emission) * tax_emission(node2,type_emission,type_tec,type_year)
4375          * EMISS.L(node,emission,type_tec,year) )
4376  ) / 1000 ;
4377   
4378  *----------------------------------------------------------------------------------------------------------------------*
4379  * post-processing and export to gdx                                                                                    *
4380  *----------------------------------------------------------------------------------------------------------------------*
4381   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 85
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4382  * include MESSAGE GAMS-internal reporting
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/reporting.gms
4383  $INCLUDE MESSAGE/reporting.gms
4384  ***
4385  * Standard output reports
4386  * =======================
4387  *
4388  * This part of the code contains the definitions and scripts for a number of standard output reports.
4389  * These default reports will be created after every MESSAGE run.
4390  ***
4391   
4392  *----------------------------------------------------------------------------------------------------------------------*
4393  * The following parts are quick-and-dirty reporting 'flags'
4394  *----------------------------------------------------------------------------------------------------------------------*
4395   
4396  Set
4397      report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)
4398      report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)
4399  ;
4400   
4401  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time) = no ;
4402  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)$(
4403      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
4404      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9) ) = yes ;
4405   
4406  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time) = no ;
4407  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)$(
4408      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
4409      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) ) = yes ;
4410   
4411  * dump all input data, processed data and results to a gdx file
4412  execute_unload "output/MsgOutput.gdx"
4413   
4414  put_utility 'log' / /"+++ End of MESSAGEix (stand-alone) run - have a nice day! +++ " ;
4415   
4416  *----------------------------------------------------------------------------------------------------------------------*
4417  * end of file - have a nice day!                                                                                       *
4418  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 86
The MESSAGEix Integrated Assessment Model
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_run.gms
     2       65 INCLUDE        1      65  .C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_setup.gms
     3       79 IF EXIST       2      14  .C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/demand.gdx
     4      131 INCLUDE        2      66  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/auxiliary_settings.gms
     5      171 INCLUDE        2      69  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\version.gms
     6      195 INCLUDE        2      70  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/version_check.gms
     7      202 GDXIN          6       7  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/demand.gdx
     8      222 INCLUDE        2      73  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/sets_maps_def.gms
     9      706 INCLUDE        2      74  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/parameter_def.gms
    10     1562 INCLUDE        2      77  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/data_load.gms
    11     1571 GDXIN         10       9  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/demand.gdx
    12     1666 INCLUDE       10     104  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/period_parameter_assignment.gms
    13     1923 INCLUDE        2      80  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/scaling_investment_costs.gms
    14     2109 INCLUDE        2      86  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_core.gms
    15     4192 INCLUDE        1      71  .C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_solve.gms
    16     4296 INCLUDE       15     104  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/aux_computation_time.gms
    17     4383 INCLUDE        1      78  .C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/reporting.gms


COMPILATION TIME     =        0.078 SECONDS      3 MB  29.1.0 rbb4180b WEX-WEI
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 87
The MESSAGEix Integrated Assessment Model
Model Statistics    SOLVE MESSAGE_LP Using LP From line 4219


MODEL STATISTICS

BLOCKS OF EQUATIONS          58     SINGLE EQUATIONS          686
BLOCKS OF VARIABLES           8     SINGLE VARIABLES          606
NON ZERO ELEMENTS         2,508


GENERATION TIME      =        0.079 SECONDS      5 MB  29.1.0 rbb4180b WEX-WEI


EXECUTION TIME       =        0.094 SECONDS      5 MB  29.1.0 rbb4180b WEX-WEI
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 88
The MESSAGEix Integrated Assessment Model
Solution Report     SOLVE MESSAGE_LP Using LP From line 4219


               S O L V E      S U M M A R Y

     MODEL   MESSAGE_LP          OBJECTIVE  OBJ
     TYPE    LP                  DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  4219

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE   101608873583840.6880

 RESOURCE USAGE, LIMIT          0.078   1000000.000
 ITERATION COUNT, LIMIT       144     100000000

IBM ILOG CPLEX   29.1.0 rbb4180b Released Nov 15, 2019 WEI x86 64bit/MS Window
--- GAMS/Cplex licensed for continuous and discrete problems.
Cplex 12.9.0.0

*** Error Cannot open parameter file "C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\cplex.opt"
*** Error Error code = 2; No such file or directory
Space for names approximately 0.06 Mb
Use option 'names no' to turn use of names off
LP status(1): optimal
Cplex Time: 0.03sec (det. 1.98 ticks)
Optimal solution found.
Objective : 101608873583840.687500



**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 23:25:57 Page 89
The MESSAGEix Integrated Assessment Model
E x e c u t i o n


**** REPORT FILE SUMMARY

logfile 


EXECUTION TIME       =        0.032 SECONDS      4 MB  29.1.0 rbb4180b WEX-WEI


USER: Medium MUD - 10 User License                   E190424:0859AO-WIN
      East China University of Science and Technology, School ofDC14915
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_run.gms
Output     C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_run.lst
