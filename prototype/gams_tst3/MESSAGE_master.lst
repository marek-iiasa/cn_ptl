GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 1
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


   2  $ONDOLLAR
   3  $ONTEXT
       
         Copyright 2018 IIASA Energy Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system optimization model MESSAGEix
      For the most recent version of the framework, please visit `github.com/iiasa/message_ix`.
      For a comprehensive documentation of the latest release of the MESSAGEix framework
      and the ix modeling platform, please visit `MESSAGEix.iiasa.ac.at/`.
       
      When using the MESSAGEix framework, please cite as:
       
         Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp, Clara Orthofer,
         Michael Pimmer, Nikolay Kushin, Adriano Vinca, Alessio Mastrucci,
         Keywan Riahi, and Volker Krey.
         "The |MESSAGEix| Integrated Assessment Model and the ix modeling platform".
         Environmental Modelling & Software 112:143-156, 2019.
         doi: 10.1016/j.envsoft.2018.11.012
         electronic pre-print available at pure.iiasa.ac.at/15157/
       
      Please review the NOTICE at `MESSAGEix.iiasa.ac.at/notice.html`
      and included in the GitHub repository for further user guidelines.
      The community forum and mailing list is hosted at `groups.google.com/d/forum/message_ix`.
       
  38  $OFFTEXT
  39   
  40  * activate dollar commands on a global level
  41  $ONGLOBAL
  42   
  43  *----------------------------------------------------------------------------------------------------------------------*
  44  * model setup, data set selection, scenario selection, other settings                                                  *
  45  *----------------------------------------------------------------------------------------------------------------------*
  46   
  47  ** scenario/case selection - this must match the name of the MsgData_<%%%>.gdx input data file **
  48  $SETGLOBAL data "<your datafile name here>"
  49   
  50  ** MACRO mode
  51  * "none": MESSAGEix is run in stand-alone mode
  52  * "linked": MESSAGEix-MACRO is run in iterative mode **
  53  $SETGLOBAL macromode "none"
  54   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 2
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


  55  ** define the time horizon over which the model optimizes (perfect foresight, myopic or rolling horizon) **
  56  * perfect foresight - 0
  57  * myopic optimization (period-by-period, recursive-dynamic without any foresight) - 1
  58  * rolling horizon (period-by-period, recursive-dynamic with limited foresight - 'number of years of foresight'
  59  $SETGLOBAL foresight "0"
  60   
  61  ** add a comment and name extension for model report files (e.g. run-specific info, calibration notes) - optional **
  62  $SETGLOBAL comment ""
  63   
  64  ** specify optional calibration output **
  65  $SETGLOBAL calibration ""
  66  * mark as "*" to include detailed calibration information in outputs and get a longer listing file
  67   
  68  *----------------------------------------------------------------------------------------------------------------------*
  69  * debugging mode settings for support and assistance during model development and calibration                          *
  70  *----------------------------------------------------------------------------------------------------------------------*
  71  * mark as "*" to deactivate, mark as "" to activate
  72   
  73  * set auxiliary upper/lower bounds on the actitivity variables to prevent unbounded rays during model development
  74  $SETGLOBAL AUX_BOUNDS "*"
  75  $SETGLOBAL AUX_BOUND_VALUE "1e9"
  76   
  77  * include relaxations for specific constraint blocks to identify infeasibilities during model development/calibration
  78  * by adding 'slack' variables in the constraints and associated penalty factors in the objective function
  79  $SETGLOBAL SLACK_COMMODITY_EQUIVALENCE "*"
  80   
  81  $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
  82  $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
  83  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "*"
  84  $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "*"
  85  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "*"
  86  $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "*"
  87   
  88  $SETGLOBAL SLACK_ACT_BOUND_UP "*"
  89  $SETGLOBAL SLACK_ACT_BOUND_LO "*"
  90  $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
  91  $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
  92   
  93  $SETGLOBAL SLACK_LAND_SCEN_UP "*"
  94  $SETGLOBAL SLACK_LAND_SCEN_LO "*"
  95  $SETGLOBAL SLACK_LAND_TYPE_UP "*"
  96  $SETGLOBAL SLACK_LAND_TYPE_LO "*"
  97   
  98  $SETGLOBAL SLACK_RELATION_BOUND_UP "*"
  99  $SETGLOBAL SLACK_RELATION_BOUND_LO "*"
 100   
 101  *----------------------------------------------------------------------------------------------------------------------*
 102  * launch the MESSAGEix or MESSAGEix-MACRO run file with the settings as defined above                                      *
 103  *----------------------------------------------------------------------------------------------------------------------*
 104   
 105  $SETGLOBAL in "data/MsgData_<your datafile name here>.gdx"
 106  $IFTHEN ==""
 107  $SETGLOBAL out "output/MsgOutput_<your datafile name here>.gdx"
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 3
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 108  $SETGLOBAL iter "output/MsgIterationReport_<your datafile name here>.gdx"
 109  $ENDIF
 110   
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_run.gms
 111  $INCLUDE MESSAGE_run.gms
 112  $TITLE The MESSAGEix Integrated Assessment Model
 113  $ONDOLLAR
 114  $ONTEXT
       
         Copyright 2017â€“2021 IIASA Energy, Climate, and Environment (ECE) Program
       
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
       
             http://www.apache.org/licenses/LICENSE-2.0
       
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
       
      This is the GAMS implementation of the integrated assessment and system optimization model MESSAGEix
      For the most recent version of the framework, please visit `github.com/iiasa/message_ix`.
      For a comprehensive documentation of the latest release of the MESSAGEix framework
      and the ix modeling platform, please visit `MESSAGEix.iiasa.ac.at/`.
       
      When using the MESSAGEix framework, please cite as:
       
         Daniel Huppmann, Matthew Gidden, Oliver Fricko, Peter Kolp, Clara Orthofer,
         Michael Pimmer, Nikolay Kushin, Adriano Vinca, Alessio Mastrucci,
         Keywan Riahi, and Volker Krey.
         "The |MESSAGEix| Integrated Assessment Model and the ix modeling platform".
         Environmental Modelling & Software 112:143-156, 2019.
         doi: 10.1016/j.envsoft.2018.11.012
         electronic pre-print available at pure.iiasa.ac.at/15157/
       
      Please review the NOTICE at `MESSAGEix.iiasa.ac.at/notice.html`
      and included in the GitHub repository for further user guidelines.
      The community forum and mailing list is hosted at `groups.google.com/d/forum/message_ix`.
       
 149  $OFFTEXT
 150   
 151  ***
 152  * Run script for |MESSAGEix| (stand-alone)
 153  * ========================================
 154  *
 155  * This is |MESSAGEix| version |version|. The version number must match the version number
 156  * of the ``ixmp`` ``MESSAGE``-scheme specifications used for exporting data and importing results.
 157  *
 158  * This file contains the workflow of a |MESSAGEix|-standalone run. It can be called:
 159  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 4
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 160  * - Via the scientific programming API's using the packages/libraries ``ixmp`` and ``message_ix``,
 161  *   calling the method ``solve()`` of the ``message_ix.Scenario`` class (see the tutorials).
 162  * - using the file ``MESSAGE_master.gms`` with the option ``$SETGLOBAL macromode "none"``,
 163  *   where the input data file name and other options are stated explicitly, or
 164  * - directly from the command line, with the input data file name
 165  *   and other options specific as command line parameters, e.g.::
 166  *
 167  *   ``gams MESSAGE_run.gms --in="<data-file>" [--out="<output-file>"]``
 168  *
 169  * By default, the data file (in gdx format) should be located in the ``model/data`` folder
 170  * and be named in the format ``MsgData_<name>.gdx``. Upon completion of the GAMS execution,
 171  * a results file ``<output-file>`` will be written
 172  * (or ``model\output\MsgOutput.gdx`` if ``--out`` is not provided).
 173  ***
 174   
 175  $EOLCOM #
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_setup.gms
 176  $INCLUDE MESSAGE/model_setup.gms
 177  *----------------------------------------------------------------------------------------------------------------------*
 178  * sanity check of model run parameters, set defaults if not specified                                                  *
 179  *----------------------------------------------------------------------------------------------------------------------*
 180   
 181  * set # as end-of-line comment; all text after # is ignored
 182  * (for proper display in GAMS IDE, this needs to be specified in the options, too)
 183   
 184  *----------------------------------------------------------------------------------------------------------------------*
 185  * sanity check of model run parameters, set defaults if not specified                                                  *
 186  *----------------------------------------------------------------------------------------------------------------------*
 187   
 188  * a datastructure name is mandatory to load the gdx file - abort the run if not specified or file does not exist
 189  $IF NOT SET in       $ABORT "no input data file provided!"
 190  $IF NOT EXIST 'data/MsgData_ptl_baseline_baseline_xlsx.gdx' $ABORT "input GDX file 'data/MsgData_ptl_baseline_baseline_xlsx.gdx' does not exist!"
 191  $IF NOT SET iter     $SETGLOBAL iter "output/MsgIterationReport"
 192  $IF NOT SET out      $SETGLOBAL out "output/MsgOutput.gdx"
 193   
 194  ** define the time horizon over which the model optimizes (perfect foresight, myopic or rolling horizon) **
 195  * perfect foresight - 0 (assumed as default if not specified
 196  * myopic optimization (period-by-period, recursive-dynamic without any foresight) - 1
 197  * rolling horizon (period-by-period, recursive-dynamic with limited foresight - 'number of years of foresight'
 198  $IF NOT SET foresight   $SETGLOBAL foresight "0"
 199   
 200  ** specify optional additional calibration output **
 201  $IF NOT SET calibration $SETGLOBAL calibration ""
 202  * mark with * to include detailed calibration information in outputs and get an extended GAMS listing (.lst) file
 203   
 204  ** debugging mode settings for support and assistance during model development and calibration **
 205  * assume that all debugging options are deactivated by default
 206  * mark as "*" to deactivate, mark as "" to activate
 207   
 208  * set auxiliary upper and lower bounds on the actitivity variables to prevent unbounded models
 209  $IF NOT SET AUX_BOUNDS               $SETGLOBAL AUX_BOUNDS "*"
 210  $IF NOT SET AUX_BOUND_VALUE          $SETGLOBAL AUX_BOUND_VALUE "1e9"
 211   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 5
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 212  * include relaxations for specific constraint blocks to identify infeasibilities during model development/calibration
 213  * by adding 'slack' variables in the constraints and associated penalty factors in the objective function
 214  $IF NOT SET SLACK_COMMODITY_EQUIVALENCE  $SETGLOBAL SLACK_COMMODITY_EQUIVALENCE "*"
 215   
 216  $IF NOT SET SLACK_CAP_NEW_BOUND_UP   $SETGLOBAL SLACK_CAP_NEW_BOUND_UP "*"
 217  $IF NOT SET SLACK_CAP_NEW_BOUND_LO   $SETGLOBAL SLACK_CAP_NEW_BOUND_LO "*"
 218  $IF NOT SET SLACK_CAP_TOTAL_BOUND_UP $SETGLOBAL SLACK_CAP_TOTAL_BOUND_UP "*"
 219  $IF NOT SET SLACK_CAP_TOTAL_BOUND_LO $SETGLOBAL SLACK_CAP_TOTAL_BOUND_LO "*"
 220  $IF NOT SET SLACK_CAP_NEW_DYNAMIC_UP $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_UP "*"
 221  $IF NOT SET SLACK_CAP_NEW_DYNAMIC_LO $SETGLOBAL SLACK_CAP_NEW_DYNAMIC_LO "*"
 222   
 223  $IF NOT SET SLACK_ACT_BOUND_UP       $SETGLOBAL SLACK_ACT_BOUND_UP "*"
 224  $IF NOT SET SLACK_ACT_BOUND_LO       $SETGLOBAL SLACK_ACT_BOUND_LO "*"
 225  $IF NOT SET SLACK_ACT_DYNAMIC_UP     $SETGLOBAL SLACK_ACT_DYNAMIC_UP "*"
 226  $IF NOT SET SLACK_ACT_DYNAMIC_LO     $SETGLOBAL SLACK_ACT_DYNAMIC_LO "*"
 227   
 228  $IF NOT SET SLACK_LAND_SCEN_UP       $SETGLOBAL SLACK_LAND_SCEN_UP "*"
 229  $IF NOT SET SLACK_LAND_SCEN_LO       $SETGLOBAL SLACK_LAND_SCEN_LO "*"
 230  $IF NOT SET SLACK_LAND_TYPE_UP       $SETGLOBAL SLACK_LAND_TYPE_UP "*"
 231  $IF NOT SET SLACK_LAND_TYPE_LO       $SETGLOBAL SLACK_LAND_TYPE_LO "*"
 232   
 233  $IF NOT SET SLACK_RELATION_BOUND_UP  $SETGLOBAL SLACK_RELATION_BOUND_UP "*"
 234  $IF NOT SET SLACK_RELATION_BOUND_LO  $SETGLOBAL SLACK_RELATION_BOUND_LO "*"
 235   
 236  *----------------------------------------------------------------------------------------------------------------------*
 237  * initialize sets, mappings, parameters, load data, do pre-processing                                                  *
 238  *----------------------------------------------------------------------------------------------------------------------*
 239   
 240  ** load auxiliary settings from include file (solver options, resource/time limits, prefered solvers) **
 241  * recommended only for advanced users
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/auxiliary_settings.gms
 242  $INCLUDE MESSAGE/auxiliary_settings.gms
 243  *----------------------------------------------------------------------------------------------------------------------*
 244  * auxiliary settings and defintions                                                                                    *
 245  *----------------------------------------------------------------------------------------------------------------------*
 246   
 247  * initialise logfile settings - this allows to write status messages to the logfile
 248  file logfile / '' / ;
 249  put logfile ;
 250   
 251  * get yourself a short listing file
 252  option limrow = 0 ;     # number of rows (equations) reported in lst file
 253  option limcol = 0 ;     # number of columns reported in lst file
 254  option solprint = off ; # solver's solution output printed
 255  option savepoint = 0 ;  # creates a result gdx file after every solve
 256  * this is done manually in this code to have the database name in the gdx file name and to save the file in a sub-folder
 257   
 258  option ITERLIM = 1e8 ;  # iteration limit
 259  option RESLIM = 1e6 ;   # resource limit (in seconds; 1e6 is approximately 11 days)
 260  * solver comments for QCP and PATH:
 261  * - GUROBI, CPLEX and MINOS are fast
 262  * - CONOPT is slower, but (in non-linear problems) usually more helpful to identify the feasibility problems
 263  * general comment: sometimes, first using one solver and then another (using the previous solution as starting point)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 6
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 264  * helps even if the previous run did not solve to optimality
 265  option LP = CPLEX ;
 266  option NLP = CONOPT ;
 267  option MCP = PATH ;
 268   
 269  *option solveopt=clear ;# remove results of previous runs in memory
 270  option solveopt=merge ; # keep results of previous runs in memory
 271  $SETENV GdxCompress 1   # reduces the size of the gdx export file
 272   
 273  $ONTEXT
      $ONLISTING
      option limrow = 1e6 ;   # number of rows (equations) reported in lst file
      option limcol = 1e6 ;   # number of columns reported in lst file
      option solprint = on ;  # solver's solution output printed
      $ONTEXT
 279  $OFFTEXT
 280   
 281  * check that the version of MESSAGEix and the ixToolbox used for exporting the data to gdx match
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\version.gms
 282  $INCLUDE version.gms
 283  * GDX scheme version
 284  *
 285  * !!! DO NOT CHANGE VALUES IN THIS FILE MANUALLY !!!
 286  * Instead, update message_ix and ixmp as described in the documentation.
 287  *
 288  * Technical details:
 289  *
 290  * These numbers describe the contents of the GDX file written by the Java code
 291  * in ixmp.jar. The Java code automatically generates some contents, e.g., set
 292  * elements, in a way that cannot be controlled or overriden by Python ixmp or
 293  * message_ix.
 294  *
 295  * Formerly, these numbers were incremented in ixmp_source, ixmp.jar, and this
 296  * file, with every release. Currently, they will be incremented if (and *only*
 297  * if) there are changes in the behaviour of the Java code that must be synced
 298  * with corresponding changes in the GAMS source files in this directory.
 299  *
 300  * Eventually, all automatic behaviour will be moved from ixmp_source (Java) to
 301  * ixmp (Python); see https://github.com/iiasa/message_ix/issues/254. At that
 302  * point, both this file and MESSAGE/version_check.gms can be removed.
 303   
 304  $SETGLOBAL VERSION_MAJOR "2"
 305  $SETGLOBAL VERSION_MINOR "0"
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/version_check.gms
 306  $INCLUDE MESSAGE/version_check.gms
 307  * Version check                                                                                                 *
 308  *
 309  * See technical description in ../version.gms.
 310   
 311  Parameter MESSAGE_ix_version(*);
 312   
GDXIN   C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/MsgData_ptl_baseline_baseline_xlsx.gdx
 313  $GDXIN 'data/MsgData_ptl_baseline_baseline_xlsx.gdx'
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 7
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


--- LOAD  MESSAGE_ix_version = 1:MESSAGE_ix_version
 314  $LOAD MESSAGE_IX_version
 315  $GDXIN
 316   
 317  IF ( NOT ( MESSAGE_IX_version("major") = 2 AND MESSAGE_IX_version("minor") = 0 ),
 318      logfile.nw = 1;
 319      logfile.nd = 0;
 320   
 321      put_utility 'log' / '***';
 322      put_utility 'log' / '*** ABORT';
 323      put_utility 'log' / '*** GDX file was written by an ixmp.jar incompatible with this version of MESSAGEix:';
 324      put_utility 'log' / '***   data/MsgData_ptl_baseline_baseline_xlsx.gdx';
 325      put_utility 'log' / '***   ...has version ' MESSAGE_IX_version("major") '.' MESSAGE_IX_version("minor")
 326        ' while version.gms has 2.0';
 327      put_utility 'log' / '***';
 328   
 329      abort "GDX file incompatible with current version of MESSAGEix";
 330  ) ;
 331   
 332  ** initialize sets, mappings, parameters
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/sets_maps_def.gms
 333  $INCLUDE MESSAGE/sets_maps_def.gms
 334  ***
 335  * .. _sets_maps_def:
 336  *
 337  * Sets and mappings
 338  * =================
 339  *
 340  * :file:`sets_maps_def.gms` defines all sets and mappings used in |MESSAGEix|. The symbols in the **Notation** column of
 341  * the tables below are used in the equations of the mathematical formulation, while the set names appear in the GAMS
 342  * code.
 343  ***
 344   
 345  * IMPORTANT
 346  * indices to mapping sets will always be in the following order:
 347  * lvl_spatial, lvl_temporal,
 348  * node_location, tec, year_vintage, year_actual, mode, commodity, level, grade,
 349  * node_origin/destination, emission, time_actual), time_origin/destination, rating
 350   
 351  * allows sets to be empty
 352  $ONEMPTY
 353   
 354  *----------------------------------------------------------------------------------------------------------------------*
 355  * Set definitions                                                                                                      *
 356  *----------------------------------------------------------------------------------------------------------------------*
 357   
 358  ***
 359  * .. _section_set_def:
 360  *
 361  * Sets in the |MESSAGEix| implementation
 362  * --------------------------------------
 363  *
 364  * .. list-table::
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 8
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 365  *    :widths: 20 12 68
 366  *    :header-rows: 1
 367  *
 368  *    * - Set name
 369  *      - Notation
 370  *      - Explanatory comments
 371  *    * - node [#node]_
 372  *      - :math:`n \in N`
 373  *      - Regions, countries, grid cells
 374  *    * - commodity
 375  *      - :math:`c \in C`
 376  *      - Resources, electricity, water, land availability, etc.
 377  *    * - level
 378  *      - :math:`l \in L`
 379  *      - Levels of the reference energy system or supply chain (primary, secondary, ... , useful)
 380  *    * - grade
 381  *      - :math:`g \in G`
 382  *      - Grades of resource quality in the extraction & mining sector
 383  *    * - technology [tec]
 384  *      - :math:`t \in T`
 385  *      - | Technologies that use input commodities to produce outputs;
 386  *        | the short-hand notation "tec" is used in the GAMS implementation
 387  *    * - mode [#mode]_
 388  *      - :math:`m \in M`
 389  *      - Modes of operation for specific technologies
 390  *    * - emission
 391  *      - :math:`e \in E`
 392  *      - Greenhouse gases, pollutants, etc.
 393  *    * - land_scenario
 394  *      - :math:`s \in S`
 395  *      - Scenarios of land use (for land-use model emulator)
 396  *    * - land_type
 397  *      - :math:`u \in U`
 398  *      - Land-use types (e.g., field, forest, pasture)
 399  *    * - year [year_all] [#year_all]_ [#period_year]_
 400  *      - :math:`y \in Y`
 401  *      - Periods, denoted by the final year, in the model horizon
 402  *    * - time [#time]_
 403  *      - :math:`h \in H`
 404  *      - Subannual time periods (seasons, days, hours)
 405  *    * - shares [#shares]_
 406  *      - :math:`p \in P`
 407  *      - Set of constraints on shares of technologies and commodities
 408  *    * - relation [#relations]_
 409  *      - :math:`r \in R`
 410  *      - Names of generic relations (linear constraints)
 411  *    * - lvl_spatial
 412  *      -
 413  *      - Spatial hierarchy levels, e.g.  global, region, country, or grid cell.
 414  *    * - lvl_temporal
 415  *      -
 416  *      - Temporal hierarchy levels, e.g. year, season, day, or hour.
 417  *    * - rating
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                               08/30/21 18:50:56 Page 9
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 418  *      - :math:`q \in Q`
 419  *      - Identifies the 'quality' of the renewable energy potential (rating of non-dispatchable
 420  *        technologies relative to aggregate commodity use)
 421  *
 422  * .. [#node] The set ``node`` includes spatial units across all levels of spatial disaggregation
 423  *    (global, regions, countries, basins, grid cells).
 424  *    The hierarchical mapping is implemented via the mapping set ``map_spatial_hierarchy``.
 425  *    This set always includes an element 'World' when initializing a ``MESSAGE``-scheme :class:`message_ix.Scenario`.
 426  *
 427  * .. [#mode] For example, high electricity or high heat production modes of operation for combined heat and power plants.
 428  *
 429  * .. [#year_all] In the |MESSAGEix| implementation in GAMS, the set ``year_all`` denotes the "superset" of the entire
 430  *    horizon (historical and model horizon), and the set ``year`` is a dynamic subset of ``year_all``. This facilitates
 431  *    an efficient implementation of the historical capacity build-up and the (optional) recursive-dynamic solution
 432  *    approach. When working with a :class:`message_ix.Scenario` via the scientific programming API, the set of all
 433  *    periods is called ``year`` for a more concise notation. The specification of the model horizon is implemented
 434  *    using the mapping set ``cat_year`` and the type "firstmodelyear".
 435  *
 436  * .. [#period_year] See :doc:`/time`.
 437  *
 438  * .. [#time] The set ``time`` collects all sub-annual temporal units across all levels of temporal disaggregation.
 439  *    In a ``MESSAGE``-scheme :class:`ixmp.Scenario`, this set always includes an element "year",
 440  *    and the duration of that element is 1 (:math:`duration\_time_{'year'} = 1`).
 441  *
 442  * .. [#shares] A generic formulation of share constraints is implemented in |MESSAGEix|,
 443  *    see :ref:`share_constraints`.
 444  *
 445  * .. [#relations] A generic formulation of linear constraints is implemented in |MESSAGEix|,
 446  *    see :ref:`section_of_generic_relations`. These constraints can be used for testing and development,
 447  *    but specific new features should be implemented by specific equations and parameters.
 448  *
 449  * Index names
 450  * ~~~~~~~~~~~
 451  *
 452  * Where the same set is used 2 or more times to index multiple dimensions of the same :ref:`parameter <parameter_def>`,
 453  * these dimensions are given names (called **index names**) that differ from the name of the set. The table below
 454  * contains a partial list of index names appearing in the documentation.
 455  *
 456  * .. list-table::
 457  *    :widths: 18 18 64
 458  *    :header-rows: 1
 459  *
 460  *    * - Set
 461  *      - Index name
 462  *      - Description
 463  *    * - ``node``
 464  *      - ``node_dest``
 465  *      - Node to which a technology providers commodity output.
 466  *    * - ``node``
 467  *      - ``node_loc``
 468  *      - Node where a technology operates.
 469  *    * - ``node``
 470  *      - ``node_origin``
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 10
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 471  *      - Node from which a technology receives commodity input.
 472  *
 473  ***
 474   
 475  Sets
 476      node            world - regions - countries - grid cells
 477      commodity       resources - electricity - water - land availability - etc.
 478      level           levels of the reference energy system or supply chain ( primary - secondary - ... - useful )
 479      sector          sectors (for integration with MACRO)
 480      grade           grades of extraction of raw materials
 481      tec             technologies
 482      mode            modes of operation
 483      emission        greenhouse gases - pollutants - etc.
 484      land_scenario   scenarios of land use (for land-use model emulator)
 485      land_type       types of land use
 486      year_all        years (over entire model horizon)
 487      year (year_all) years included in a model instance (for myopic or rolling-horizon optimization)
 488      time            subannual time periods (seasons - days - hours)
 489      shares          share constraint relations
 490      relation        generic linear relations
 491      lvl_spatial     hierarchical levels of spatial resolution
 492      lvl_temporal    hierarchical levels of temporal resolution
 493      rating          identifies the 'quality' of the renewable energy potential (bins acc. to Sullivan)
 494  ;
 495   
 496  * definition of aliases
 497  Alias(node,location);
 498  Alias(node,node2);
 499  Alias(node,node_share);
 500  Alias(tec,tec2);
 501  Alias(commodity,commodity2);
 502  Alias(level,level2);
 503  Alias(emission,emission2);
 504  Alias(year_all,vintage);
 505  Alias(year_all,year_all2);
 506  Alias(year_all,year_all3);
 507  Alias(year,year2);
 508  Alias(year,year3);
 509  Alias(time,time2);
 510  Alias(time,time3);
 511  Alias(time,time_act);
 512  Alias(time,time_od);
 513  Alias(mode,mode2);
 514  Alias(commodity,commodity2);
 515   
 516  *----------------------------------------------------------------------------------------------------------------------*
 517  * Category types and mappings                                                                                                       *
 518  *----------------------------------------------------------------------------------------------------------------------*
 519   
 520  ***
 521  *
 522  * .. _mapping-sets:
 523  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 11
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 524  * Category types and mappings
 525  * ---------------------------
 526  *
 527  * This feature is used to easily implement aggregation across groups of set elements.
 528  * For example, by setting an upper bound over an emission type, the constraint enforces
 529  * that the sum over all emission species mapped to that type via the mapping set ``cat_emission``
 530  * satisfies that upper bound.
 531  *
 532  * .. list-table::
 533  *    :widths: 25 15 60
 534  *    :header-rows: 1
 535  *
 536  *    * - Set name
 537  *      - Notation
 538  *      - Explanatory comments
 539  *    * - level_resource (level) [#level_res]_
 540  *      - :math:`l \in L^{RES} \subseteq L`
 541  *      - Levels related to `fossil resources` representation
 542  *    * - level_renewable (level) [#level_res]_
 543  *      - :math:`l \in L^{REN} \subseteq L`
 544  *      - Levels related to `renewables` representation
 545  *    * - level_storage(level)
 546  *      - :math:`l \in L^{STOR} \subseteq L`
 547  *      - Subsets of levels on which commodities are :ref:`stored <gams-storage>`; excluded from :ref:`commodity balances <commodity_balance_lt>`.
 548  *    * - type_node [#type_node]_
 549  *      - :math:`\widehat{n} \in \widehat{N}`
 550  *      - Category types for nodes
 551  *    * - cat_node (type_node,node)
 552  *      - :math:`n \in N(\widehat{n})`
 553  *      - Category mapping between node types and nodes (all nodes that are subnodes of node :math:`\widehat{n}`)
 554  *    * - type_tec [#type_tec]_
 555  *      - :math:`\widehat{t} \in \widehat{T}`
 556  *      - Category types for technologies
 557  *    * - cat_tec (type_tec,tec) [#type_tec]_
 558  *      - :math:`t \in T(\widehat{t})`
 559  *      - Category mapping between tec types and technologies (all technologies mapped to the category ``type_tec`` :math:`\widehat{t}`)
 560  *    * - inv_tec (tec) [#inv_tec]_
 561  *      - :math:`t \in T^{INV} \subseteq T`
 562  *      - Specific subset of investment technologies (all technologies with investment decisions and capacity constraints)
 563  *    * - renewable_tec (tec) [#renewable_tec]_
 564  *      - :math:`t \in T^{REN} \subseteq T`
 565  *      - Specific subset of renewable-energy technologies (all technologies which draw their input from the renewable level)
 566  *    * - storage_tec(tec)
 567  *      - :math:`t \in T^{STOR} \subseteq T`
 568  *      - Subset of technologies that are :ref:`storage <gams-storage>` container technologies (reservoirs)
 569  *    * - addon(tec)
 570  *      - :math:`t^a \in T^{A} \subseteq T`
 571  *      - Specific subset of technologies that are an add-on to other (parent) technologies
 572  *    * - type_addon
 573  *      - :math:`\widehat{t^a} \in \widehat{T^A}`
 574  *      - Category types for add-on technologies (that can be applied mutually exclusive)
 575  *    * - cat_addon(type_addon,addon)
 576  *      - :math:`t^a \in T^A(\widehat{t^a})`
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 12
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 577  *      - Category mapping add-on technologies to respective add-on technology types (all add-on technologies mapped to the category ``type_addon`` :math:`\widehat{t}`)
 578  *    * - type_year
 579  *      - :math:`\widehat{y} \in \widehat{Y}`
 580  *      - Category types for year aggregations
 581  *    * - cat_year(type_year,year_all)
 582  *      - :math:`y \in Y(\widehat{y})`
 583  *      - Category mapping years to respective categories (all years mapped to the category ``type_year`` :math:`\widehat{y}`)
 584  *    * - type_emission
 585  *      - :math:`\widehat{e} \in \widehat{E}`
 586  *      - Category types for emissions (greenhouse gases, pollutants, etc.)
 587  *    * - cat_emission (type_emission,emission)
 588  *      - :math:`e \in E(\widehat{e})`
 589  *      - Category mapping between emission types and emissions (all emissions mapped to the category ``type_emission`` :math:`\widehat{e}`)
 590  *    * - type_tec_land (type_tec) [#type_tec_land]_
 591  *      - :math:`\widehat{t} \in \widehat{T}^{LAND} \subseteq \widehat{T}`
 592  *      - Mapping set of technology types and land use
 593  *    * - balance_equality (commodity,level)
 594  *      - :math:`c \in C, l \in L`
 595  *      - Commodities and level related to :ref:`commodity_balance_lt`
 596  *
 597  * .. [#level_res] The constraint :ref:`extraction_equivalence` is active only for the levels included in this set,
 598  *    and the constraint :ref:`commodity_balance` is deactivated for these levels.
 599  *
 600  * .. [#type_node] The element "economy" is added by default as part of the ``MESSAGE``-scheme :class:`ixmp.Scenario`.
 601  *
 602  * .. [#type_tec] The element "all" in ``type_tec`` and the associated mapping to all technologies in the set ``cat_tec``
 603  *    are added by default as part of the ``MESSAGE``-scheme :class:`message_ix.Scenario`.
 604  *
 605  * .. [#inv_tec] The auxiliary set ``inv_tec`` (subset of ``technology``) is a short-hand notation for all technologies
 606  *    with defined investment costs. This activates the investment cost part in the objective function and the
 607  *    constraints for all technologies where investment decisions are relevant.
 608  *    It is added by default when exporting ``MESSAGE``-scheme :class:`message_ix.Scenario` to gdx.
 609  *
 610  * .. [#renewable_tec] The auxiliary set ``renewable_tec`` (subset of ``technology``) is a short-hand notation
 611  *    for all technologies with defined parameters relevant for the equations in the "Renewable" section.
 612  *    It is added by default when exporting ``MESSAGE``-scheme :class:`message_ix.Scenario` to gdx.
 613  *
 614  * .. [#type_tec_land] The mapping set ``type_tec_land`` is a dynamic subset of ``type_tec`` and specifies whether
 615  *    emissions from the land-use model emulator module are included when aggregrating over a specific technology type.
 616  *    The element "all" is added by default in a ``MESSAGE``-scheme :class:`message_ix.Scenario`.
 617  ***
 618   
 619  * category types and mappings
 620  Sets
 621      level_resource (level)                  subset of 'level' related to make hfossil resources
 622      level_renewable(level)                  subset of 'level' related to renewable resources
 623      level_storage(level)                    subset of 'level' related to storage technologies (excluded from commodity balance)
 624      type_node                               types of nodes
 625      cat_node(type_node,node)                mapping of nodes to respective categories
 626      type_tec                                types of technologies
 627      cat_tec(type_tec,tec)                   mapping of technologies to respective categories
 628      inv_tec(tec)                            technologies that have explicit investment and capacity decision variables
 629      renewable_tec(tec)                      technologies that use renewable energy potentials
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 13
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 630      storage_tec(tec)                        technologies used as storage containers (reservoirs)
 631      addon(tec)                              technologies that are an add-on to other (parent) technologies
 632      type_addon                              types of add-on technologies (that can be applied mutually exclusive)
 633      cat_addon(type_addon,addon)             mapping of add-on technologies to respective add-on technology types
 634      type_year                               types of year aggregations
 635      cat_year(type_year,year_all)            mapping of years to respective categories
 636      type_emission                           types of emission aggregations
 637      cat_emission(type_emission,emission)    mapping of emissions to respective categories
 638      type_tec_land(type_tec)                 dynamic set whether emissions from land use are included in type_tec
 639      balance_equality(commodity,level)       mapping of commodities-level where the supply-demand balance must be maintained with equality
 640  ;
 641   
 642  Alias(type_tec,type_tec_share);
 643  Alias(type_tec,type_tec_total);
 644   
 645  *----------------------------------------------------------------------------------------------------------------------*
 646  * Mapping sets                                                                                                         *
 647  *----------------------------------------------------------------------------------------------------------------------*
 648   
 649  ***
 650  * .. _section_maps_def:
 651  *
 652  * Mapping sets
 653  * ------------
 654  *
 655  * .. note::
 656  *
 657  *    These sets are **generated automatically** when exporting a ``MESSAGE``-scheme :class:`ixmp.Scenario` to gdx using the API.
 658  *    They are used in the GAMS model to reduce model size by excluding non-relevant variables and equations
 659  *    (e.g., activity of a technology outside of its technical lifetime). These are **not** meant to be
 660  *    edited through the API when editing scenarios. Not all the ``Mapping sets`` are shown in the list below, to access
 661  *    the full list of mapping sets, please refer to the documentation file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 662  *
 663  * .. list-table::
 664  *    :widths: 40 60
 665  *    :header-rows: 1
 666  *
 667  *    * - Set name
 668  *      - Explanatory comments
 669  *    * - map_node(node,location)
 670  *      - Mapping of nodes across hierarchy levels (location is in node)
 671  *    * - map_time(time,time2)
 672  *      - Mapping of time periods across hierarchy levels (time2 is in time)
 673  *    * - map_time_period(year_all,lvl_temporal,time,time2)
 674  *      - Mapping of the sequence of sub-annual timesteps (used in :ref:`storage <gams-storage>`)
 675  *    * - map_resource(node,commodity,grade,year_all)
 676  *      - Mapping of resources and grades to node over time
 677  *    * - map_ren_grade(node,commodity,grade,year_all)
 678  *      - Mapping of renewables and grades to node over time
 679  *    * - map_ren_com(node,tec,commodity,year_all)
 680  *      - Mapping of technologies to renewable energy source as input
 681  *    * - map_rating(node,tec,commodity,level,rating,year_all)
 682  *      - Mapping of technologues to ratings bin assignment
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 14
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 683  *    * - map_commodity(node,commodity,level,year_all,time)
 684  *      - Mapping of commodity-level to node and time
 685  *    * - map_stocks(node,commodity,level,year_all)
 686  *      - Mapping of commodity-level to node and time
 687  *    * - map_tec(node,tec,year_all)
 688  *      - Mapping of technology to node and years
 689  *    * - map_tec_time(node,tec,year_all,time)
 690  *      - Mapping of technology to temporal dissagregation (time)
 691  *    * - map_tec_mode(node,tec,year_all,mode)
 692  *      - Mapping of technology to modes
 693  *    * - map_tec_storage(node,tec,tec2,level,commodity)
 694  *      - Mapping of charge-discharge technologies ``tec`` to their storage container ``tec2``, stored ``commodity`` and ``level``.
 695  *    * - map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)
 696  *      - Mapping of storage containers to their input commodity-level (not commodity-level of stored media)
 697  ***
 698   
 699  Sets
 700      map_node(node,location)                            mapping of nodes across hierarchy levels (location is in node)
 701      map_time(time,time2)                               mapping of time periods across hierarchy levels (time2 is in time)
 702      map_time_period(year_all,lvl_temporal,time,time2)  mapping of the sequence of sub-annual timesteps
 703   
 704      map_resource(node,commodity,grade,year_all)  mapping of resources and grades to node over time
 705      map_ren_grade(node,commodity,grade,year_all) mapping of renewables and grades to node over time
 706      map_ren_com(node,tec,commodity,year_all)     mapping of technologies to renewable energy source as input
 707      map_rating(node,tec,commodity,level,rating,year_all) mapping of technologies to ratings bin assignment
 708   
 709      map_commodity(node,commodity,level,year_all,time)    mapping of commodity-level to node and time
 710      map_stocks(node,commodity,level,year_all)    mapping of commodity-level to node and time
 711   
 712      map_tec(node,tec,year_all)                      mapping of technology to node and years
 713      map_tec_time(node,tec,year_all,time)            mapping of technology to temporal dissagregation (time)
 714      map_tec_mode(node,tec,year_all,mode)            mapping of technology to modes
 715      map_tec_act(node,tec,year_all,mode,time)        mapping of technology to modes AND temporal dissagregation
 716      map_tec_addon(tec,type_addon)                   mapping of types of add-on technologies to the underlying parent technology
 717      map_tec_storage(node,tec,tec2,level,commodity)  mapping of charge-discharging technologies to their respective storage container tec and level-commodity
 718   
 719      map_spatial_hierarchy(lvl_spatial,node,node)    mapping of spatial resolution to nodes (last index is 'parent')
 720      map_temporal_hierarchy(lvl_temporal,time,time)  mapping of temporal resolution to time (last index is 'parent')
 721   
 722      map_shares_commodity_share(shares,node,
 723          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (numerator)
 724      map_shares_commodity_total(shares,node,
 725          node,type_tec,mode,commodity,level)   mapping for commodity share constraints (denominator)
 726   
 727      map_land(node,land_scenario,year_all)            mapping of land-use model emulator scenarios to nodes and years
 728      map_relation(relation,node,year_all)             mapping of generic (user-defined) relations to nodes and years
 729   
 730  * Storage
 731      map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)  mapping of storage containers to their input commodity-level (not commodity-level of stored media)
 732  ;
 733   
 734  * additional sets created in GAMS to make notation more concise
 735  Sets
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 15
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 736      map_tec_lifetime(node,tec,vintage,year_all)  mapping of technologies to periods within technical lifetime
 737  ;
 738   
 739  *----------------------------------------------------------------------------------------------------------------------*
 740  * Mapping sets (flags) for bounds                                                                                             *
 741  *----------------------------------------------------------------------------------------------------------------------*
 742   
 743  ***
 744  * .. _section_maps_bounds:
 745  *
 746  * Mapping sets (flags) for bounds
 747  * -------------------------------
 748  *
 749  * There are a number of mappings sets generated when exporting a :class:`message_ix.Scenario` to gdx.
 750  * They are used as 'flags' to indicate whether a constraint is active.
 751  * The names of these sets follow the format ``is_<constraint>_<dir>``.
 752  *
 753  * Such mapping sets are necessary because GAMS does not distinguish between 0 and 'no value assigned',
 754  * i.e., it cannot differentiate between a bound of 0 and 'no bound assigned'.
 755  *
 756  * .. note::
 757  *
 758  *    These sets are also **automatically generated**. To see the full list of mapping sets for bounds, please refer to the documentation
 759  *    file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 760  ***
 761   
 762  Sets
 763      is_bound_extraction_up(node,commodity,grade,year_all) flag whether upper bound exists for extraction of commodity
 764      is_bound_new_capacity_up(node,tec,year_all)      flag whether upper bound exists for new capacity
 765      is_bound_new_capacity_lo(node,tec,year_all)      flag whether lower bound exists for new capacity
 766      is_bound_total_capacity_up(node,tec,year_all)    flag whether upper bound exists for total installed capacity
 767      is_bound_total_capacity_lo(node,tec,year_all)    flag whether lower bound exists for total installed capacity
 768      is_bound_activity_up(node,tec,year_all,mode,time) flag whether upper bound exists for a technology activity
 769  *   is_bound_activity_lo(node,tec,year_all,mode,time) flag whether lower bound exists for a technology activity
 770  * this last flag is not required because the lower bound defaults to zero unless explicitly specified otherwise
 771   
 772      is_dynamic_new_capacity_up(node,tec,year_all)    flag whether upper dynamic constraint exists for new capacity (investment)
 773      is_dynamic_new_capacity_lo(node,tec,year_all)    flag whether lower dynamic constraint exists for new capacity (investment)
 774      is_dynamic_activity_up(node,tec,year_all,time)   flag whether upper dynamic constraint exists for a technology (activity)
 775      is_dynamic_activity_lo(node,tec,year_all,time)   flag whether lower dynamic constraint exists for a technology (activity)
 776   
 777      is_bound_emission(node,type_emission,type_tec,type_year) flag whether emissions bound exists
 778   
 779      is_dynamic_land_scen_up(node,land_scenario,year_all)   flag whether dynamic upper constraint on land-scenario change exists
 780      is_dynamic_land_scen_lo(node,land_scenario,year_all)   flag whether dynamic lower constraint on land-scenario change exists
 781      is_dynamic_land_up(node,year_all,land_type)   flag whether dynamic upper constraint on land-type use change exists
 782      is_dynamic_land_lo(node,year_all,land_type)   flag whether dynamic lower constraint on land-type use change exists
 783   
 784      is_relation_upper(relation,node,year_all)     flag whether upper bounds exists for generic relation
 785      is_relation_lower(relation,node,year_all)     flag whether lower bounds exists for generic relation
 786  ;
 787   
 788  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 16
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 789  * Mapping sets (flags) for fixed variables                                                                             *
 790  *----------------------------------------------------------------------------------------------------------------------*
 791   
 792  ***
 793  * .. _section_maps_fixed:
 794  *
 795  * Mapping sets (flags) for fixed variables
 796  * ----------------------------------------
 797  *
 798  * Similar to the mapping sets for bounds, there are mapping sets to indicate whether decision variables
 799  * are pre-defined to a specific value, usually taken from a solution of another model instance.
 800  * This can be used to represent imperfect foresight where a policy shift or parameter change is introduced in later
 801  * years. The names of these sets follow the format ``is_fixed_<variable>``.
 802  *
 803  * .. note::
 804  *
 805  *    These sets are also **automatically generated**. To see the full list of mapping sets for fixed variables, please refere to the documentation
 806  *    file found in ``message_ix\model\MESSAGE\sets_maps_def.gms``.
 807  ***
 808   
 809  Sets
 810      is_fixed_extraction(node,commodity,grade,year_all)     flag whether extraction variable is fixed
 811      is_fixed_stock(node,commodity,level,year_all)          flag whether stock variable is fixed
 812      is_fixed_new_capacity(node,tec,year_all)               flag whether new capacity variable is fixed
 813      is_fixed_capacity(node,tec,vintage,year_all)           flag whether maintained capacity variable is fixed
 814      is_fixed_activity(node,tec,vintage,year_all,mode,time) flag whether activity variable is fixed
 815      is_fixed_land(node,land_scenario,year_all)             flag whether land level is fixed
 816  ;
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/parameter_def.gms
 817  $INCLUDE MESSAGE/parameter_def.gms
 818  ***
 819  * .. _parameter_def:
 820  *
 821  * Parameter definition
 822  * ====================
 823  *
 824  * This file contains the definition of all parameters used in |MESSAGEix|.
 825  *
 826  * In |MESSAGEix|, all parameters are understood as yearly values, not as per (multi-year) period.
 827  * This provides flexibility when changing the resolution of the model horizon (i.e., the set ``year``).
 828  ***
 829   
 830  ***
 831  * .. _section_parameter_general:
 832  *
 833  * General parameters of the |MESSAGEix| implementation
 834  * ----------------------------------------------------
 835  *
 836  * .. caution::
 837  *
 838  *    Parameters written in **bold** are auxiliary parameters
 839  *    that are either generated automatically when exporting a :class:`message_ix.Scenario` to gdx
 840  *    or that are computed during the *pre-processing* stage in GAMS (see the footnotes for more
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 17
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 841  *    individual details). These are **not** meant to be edited through the API when editing scenarios.
 842  *
 843  * .. list-table::
 844  *    :widths: 25 20 55
 845  *    :header-rows: 1
 846  *
 847  *    * - Parameter name
 848  *      - Index dimensions
 849  *      - Explanatory comments
 850  *    * - interestrate
 851  *      - ``year``
 852  *      - Economy-wide interest rate or social discount rate
 853  *    * - duration_time
 854  *      - ``time``
 855  *      - Duration of sub-annual time slices (relative to 1) [#duration_time_year]_
 856  *    * - **duration_period** (:math:`|y|`) [#short_dur]_
 857  *      - ``year``
 858  *      - Duration of multi-year period (in number of years) [#year_auto]_
 859  *    * - **duration_period_sum**
 860  *      - ``year`` | ``year``
 861  *      - Number of years between two periods [#df_auto]_
 862  *    * - **duration_time_rel**
 863  *      - ``time`` | ``time``
 864  *      - Relative duration between sub-annual time slices [#df_auto]_
 865  *    * - **df_period**
 866  *      - ``year``
 867  *      - Cumulative discount factor over period duration [#df_auto]_
 868  *    * - **df_year**
 869  *      - ``year``
 870  *      - Discount factor of the last year in the period [#df_auto]_
 871  *
 872  * .. [#duration_time_year] The element 'year' in the set of subannual time slices ``time`` has the value of 1.
 873  *    This value is assigned by default when creating a new :class:`ixmp.Scenario` based on the ``MESSAGE`` scheme.
 874  *
 875  * .. [#short_dur] The short-hand notation :math:`|y|` is used for the parameters :math:`duration\_period_y`
 876  *    in the mathematical model documentation for exponents.
 877  *
 878  * .. [#year_auto] The values for this parameter are computed automatically when exporting a ``MESSAGE``-scheme
 879  *    :class:`ixmp.Scenario` to gdx.
 880  *    Note that in |MESSAGEix|, the elements of the ``year`` set are understood to be the last year in a period.
 881  *    See :doc:`/time`.
 882  *
 883  * .. [#df_auto] These parameters are computed during the GAMS execution.
 884  ***
 885   
 886  Parameters
 887  * general parameters
 888      interestrate(year_all)         interest rate (to compute discount factor)
 889      duration_time(time)            duration of one time slice (relative to 1)
 890      duration_period(year_all)      duration of one multi-year period (in years)
 891      duration_period_sum(year_all,year_all2)  number of years between two periods ('year_all' must precede 'year_all2')
 892      duration_time_rel(time,time2)  relative duration of subannual time period ('time2' relative to parent 'time')
 893      df_period(year_all)            cumulative discount factor over period duration
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 18
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 894      df_year(year_all)              discount factor of the last year in the period
 895  ;
 896   
 897  ***
 898  * .. _section_parameter_resources:
 899  *
 900  * Parameters of the `Resources` section
 901  * -------------------------------------
 902  *
 903  * In |MESSAGEix|, the volume of resources at the start of the model horizon is defined by ``resource_volume``. The quantity of the
 904  * resources that are extracted per year is dependent on two parameters. The first is ``bound_extraction_up``, which constraints
 905  * the maximum extraction of the resources (by grade) in a year. The second is ``resource_remaining``, which is the maximum
 906  * extraction of the remaining resources in a certain year, as a percentage. Extraction costs for resources are represented by
 907  * ``resource_cost`` parameter.
 908  *
 909  * .. list-table::
 910  *    :widths: 25 75
 911  *    :header-rows: 1
 912  *
 913  *    * - Parameter name
 914  *      - Index dimensions
 915  *    * - resource_volume
 916  *      - ``node`` | ``commodity`` | ``grade``
 917  *    * - resource_cost
 918  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 919  *    * - resource_remaining
 920  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 921  *    * - bound_extraction_up
 922  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 923  *    * - commodity_stock [#stock]_
 924  *      - ``node`` | ``commodity`` | ``level`` | ``year``
 925  *    * - historical_extraction [#hist]_
 926  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
 927  *
 928  * .. [#stock] Commodity stock refers to an exogenous (initial) quantity of commodity in stock. This parameter allows
 929  *    (exogenous) additions to the commodity stock over the model horizon, e.g., precipitation that replenishes the water table.
 930  *
 931  * .. [#hist] Historical values of new capacity and activity can be used for parametrising the vintage structure
 932  *    of existing capacity and implement dynamic constraints in the first model period.
 933  *
 934  ***
 935   
 936  Parameter
 937  * resource and commodity parameters
 938      resource_volume(node,commodity,grade)               volume of resources in-situ at start of the model horizon
 939      resource_cost(node,commodity,grade,year_all)        extraction costs for resource
 940      resource_remaining(node,commodity,grade,year_all)   maximum extraction relative to remaining resources (by year)
 941      bound_extraction_up(node,commodity,grade,year_all)  upper bound on extraction of resources by grade
 942      commodity_stock(node,commodity,level,year_all)      exogenous (initial) quantity of commodity in stock
 943      historical_extraction(node,commodity,grade,year_all) historical extraction
 944  ;
 945   
 946  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 19
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


 947  * .. _section_parameter_demand:
 948  *
 949  * Parameters of the `Demand` section
 950  * ----------------------------------
 951  *
 952  * .. list-table::
 953  *    :widths: 30 70
 954  *    :header-rows: 1
 955  *
 956  *    * - Parameter name
 957  *      - Index dimensions
 958  *    * - demand [demand_fixed] [#demand]_
 959  *      - ``node`` | ``commodity`` | ``level`` | ``year`` | ``time``
 960  *    * - peak_load_factor [#peakload]_
 961  *      - ``node`` | ``commodity`` | ``year``
 962  *
 963  * .. [#demand] The parameter ``demand`` in a ``MESSAGE``-scheme ``ixmp.Scenario`` is translated
 964  *    to the parameter ``demand_fixed`` in the |MESSAGEix| implementation in GAMS. The variable ``DEMAND`` is introduced
 965  *    as an auxiliary reporting variable; it equals ``demand_fixed`` in a `MESSAGE`-standalone run and reports
 966  *    the final demand including the price response in an iterative `MESSAGE-MACRO` solution.
 967  *
 968  * .. [#peakload] The parameters ``peak_load_factor`` (maximum peak load factor for reliability constraint of firm capacity) and
 969  *    ``reliability_factor`` (reliability of a technology (per rating)) are based on the formulation proposed by Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
 970  *    It is used in :ref:`reliability_constraint`.
 971  *
 972  ***
 973   
 974  Parameter
 975      demand_fixed(node,commodity,level,year_all,time)     exogenous demand levels
 976      peak_load_factor(node,commodity,level,year_all,time) maximum peak load factor for reliability constraint of firm capacity
 977  ;
 978   
 979  ***
 980  * .. _params-tech:
 981  *
 982  * Parameters of the `Technology` section
 983  * --------------------------------------
 984  *
 985  * Input/output mapping, costs and engineering specifications
 986  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 987  *
 988  * .. list-table::
 989  *    :widths: 25 60
 990  *    :header-rows: 1
 991  *
 992  *    * - Parameter name
 993  *      - Index dimensions
 994  *    * - input [#tecvintage]_
 995  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 996  *        ``node_origin`` | ``commodity`` | ``level`` | ``time`` | ``time_origin``
 997  *    * - output [#tecvintage]_
 998  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` |
 999  *        ``node_dest`` | ``commodity`` | ``level`` | ``time`` | ``time_dest``
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 20
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1000  *    * - inv_cost [#tecvintage]_
1001  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1002  *    * - fix_cost [#tecvintage]_
1003  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
1004  *    * - var_cost [#tecvintage]_
1005  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
1006  *    * - levelized_cost [#levelizedcost]_
1007  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``time``
1008  *    * - construction_time [#construction]_
1009  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1010  *    * - technical_lifetime
1011  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1012  *    * - capacity_factor [#tecvintage]_
1013  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``time``
1014  *    * - operation_factor [#tecvintage]_
1015  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
1016  *    * - min_utilization_factor [#tecvintage]_
1017  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act``
1018  *    * - rating_bin [#rating]_
1019  *      - ``node`` | ``tec`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
1020  *    * - reliability_factor [#peakload]_
1021  *      - ``node`` | ``tec`` | ``year_act`` | ``commodity`` | ``level`` | ``time`` | ``rating``
1022  *    * - flexibility_factor [#flexfactor]_
1023  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``commodity`` | ``level`` | ``time`` | ``rating``
1024  *    * - renewable_capacity_factor [#renewables]_
1025  *      - ``node_loc`` | ``commodity`` | ``grade`` | ``level`` | ``year``
1026  *    * - renewable_potential [#renewables]_
1027  *      - ``node`` | ``commodity`` | ``grade`` | ``level`` | ``year``
1028  *    * - emission_factor
1029  *      - ``node_loc`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``emission``
1030  *
1031  * .. [#tecvintage] Fixed and variable cost parameters and technical specifications are indexed over both
1032  *    the year of construction (vintage) and the year of operation (actual).
1033  *    This allows to represent changing technology characteristics depending on the age of the plant.
1034  *
1035  * .. [#levelizedcost] The parameter ``levelized_cost`` is computed in the GAMS pre-processing under the assumption of
1036  *    full capacity utilization until the end of the technical lifetime.
1037  *
1038  * .. [#construction] The construction time only has an effect on the investment costs; in |MESSAGEix|,
1039  *    each unit of new-built capacity is available instantaneously at the beginning of the model period.
1040  *
1041  * .. [#rating] Maximum share of technology in commodity use per rating. The upper bound of a contribution by any technology to the constraints on system reliability
1042  *    (:ref:`reliability_constraint`) and flexibility (:ref:`flexibility_constraint`) can depend on the share of the technology output in the total commodity use at
1043  *    a specific level.
1044  *
1045  * .. [#flexfactor] Contribution of technologies towards operation flexibility constraint. It is used in :ref:`flexibility_constraint`.
1046  *
1047  * .. [#renewables] ``renewable_capacity_factor`` refers to the quality of renewable potential by grade and ``renewable_potential`` refers to the size of the renewable potential per grade.
1048  *
1049  ***
1050   
1051  Parameters
1052  * technology input-output mapping and costs parameters
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 21
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1053      input(node,tec,vintage,year_all,mode,node,commodity,level,time,time)  relative share of input per unit of activity
1054      output(node,tec,vintage,year_all,mode,node,commodity,level,time,time) relative share of output per unit of activity
1055      inv_cost(node,tec,year_all)                         investment costs (per unit of new capacity)
1056      fix_cost(node,tec,vintage,year_all)                 fixed costs per year (per unit of capacity maintained)
1057      var_cost(node,tec,vintage,year_all,mode,time)       variable costs of operation (per unit of capacity maintained)
1058      levelized_cost(node,tec,year_all,time)              levelized costs (per unit of new capacity)
1059   
1060  * engineering parameters
1061      construction_time(node,tec,vintage)                     duration of construction of new capacity (in years)
1062      technical_lifetime(node,tec,vintage)                    maximum technical lifetime (from year of construction)
1063      capacity_factor(node,tec,vintage,year_all,time)         capacity factor by subannual time slice
1064      operation_factor(node,tec,vintage,year_all)             yearly total operation factor
1065      min_utilization_factor(node,tec,vintage,year_all)       yearly minimum utilization factor
1066      rating_bin(node,tec,year_all,commodity,level,time,rating) maximum share of technology in commodity use per rating
1067      reliability_factor(node,tec,year_all,commodity,level,time,rating) reliability of a technology (per rating)
1068      flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time,rating) contribution of technologies towards operation flexibility constraint
1069      renewable_capacity_factor(node,commodity,grade,level,year_all) quality of renewable potential grade (>= 1)
1070      renewable_potential(node,commodity,grade,level,year_all) size of renewable potential per grade
1071      emission_factor(node,tec,year_all,year_all,mode,emission) emission intensity of activity
1072  ;
1073   
1074  ***
1075  * .. _section_parameter_bounds:
1076  *
1077  * Bounds on capacity and activity
1078  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1079  *
1080  * The following parameters specify upper and lower bounds on new capacity, total installed capacity, and activity. The bounds
1081  * on activity are implemented as the aggregate over all vintages in a specific period (:ref:`activity_bound_up` and :ref:`activity_bound_lo`).
1082  *
1083  * .. list-table::
1084  *    :widths: 25 60
1085  *    :header-rows: 1
1086  *
1087  *    * - Parameter name
1088  *      - Index names
1089  *    * - bound_new_capacity_up
1090  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1091  *    * - bound_new_capacity_lo
1092  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1093  *    * - bound_total_capacity_up
1094  *      - ``node_loc`` | ``tec`` | ``year_act``
1095  *    * - bound_total_capacity_lo
1096  *      - ``node_loc`` | ``tec`` | ``year_act``
1097  *    * - bound_activity_up
1098  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1099  *    * - bound_activity_lo
1100  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1101  *
1102  ***
1103   
1104  Parameters
1105      bound_new_capacity_up(node,tec,year_all)         upper bound on new capacity
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 22
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1106      bound_new_capacity_lo(node,tec,year_all)         lower bound on new capacity
1107      bound_total_capacity_up(node,tec,year_all)       upper bound on total installed capacity
1108      bound_total_capacity_lo(node,tec,year_all)       lower bound on total installed capacity
1109      bound_activity_up(node,tec,year_all,mode,time)   upper bound on activity (aggregated over all vintages)
1110      bound_activity_lo(node,tec,year_all,mode,time)   lower bound on activity
1111  ;
1112   
1113  ***
1114  * .. _section_parameter_dynamic_constraints:
1115  *
1116  * Dynamic constraints on new capacity and activity
1117  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1118  *
1119  * These parameters are used in the :ref:`dynamic constraint equations <dynamic_constraints>` to limit the growth (or decline) of activity or of new capacity in each period, relative to the preceding period.
1120  * The ``soft_`` parameters control â€˜softâ€™ relaxation of these dynamic constraints, using the method of Keppo and Strubegger (2010) :cite:`keppo_short_2010`.
1121  *
1122  * The ``growth_`` and ``soft_`` parameters are expressed as *relative annual change* and are unitless.
1123  * Because these are annual values, are compounded in the :ref:`constraint equations <dynamic_constraints>` by ``duration_period`` (:math:`|y|`) to obtain the relative *inter-period* change.
1124  *
1125  * **Example:** a value of 0.05 for ``growth_activity_up`` sets an upper bound of :math:`1 + 0.05 = 105\%` activity in one year relative to activity in the preceding year.
1126  * In a period with duration :math:`|y| = 5 \text{ years}`, the activity in the :doc:`representative year </time>` is bounded at :math:`(1.05)^5 = 128\%` of the activity in the representative year of the preceding period.
1127  *
1128  * Because these parameters do not have a ``mode`` (:math:`m`) dimension, they cannot be used to constraint the activity/new capacity of *single modes* of technologies; only the total across all modes.
1129  *
1130  * .. list-table::
1131  *    :widths: 30 70
1132  *    :header-rows: 1
1133  *
1134  *    * - Parameter name
1135  *      - Index names
1136  *    * - initial_new_capacity_up
1137  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1138  *    * - growth_new_capacity_up
1139  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1140  *    * - soft_new_capacity_up
1141  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1142  *    * - initial_new_capacity_lo
1143  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1144  *    * - growth_new_capacity_lo
1145  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1146  *    * - soft_new_capacity_lo
1147  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1148  *    * - initial_activity_up
1149  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1150  *    * - growth_activity_up
1151  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1152  *    * - soft_activity_up
1153  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1154  *    * - initial_activity_lo
1155  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1156  *    * - growth_activity_lo
1157  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1158  *    * - soft_activity_lo
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 23
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1159  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1160  *
1161  ***
1162   
1163  Parameters
1164      initial_new_capacity_up(node,tec,year_all)     dynamic upper bound on new capacity (fixed initial term)
1165      growth_new_capacity_up(node,tec,year_all)      dynamic upper bound on new capacity (growth rate)
1166      soft_new_capacity_up(node,tec,year_all)        soft relaxation of dynamic upper bound on new capacity (growth rate)
1167   
1168      initial_new_capacity_lo(node,tec,year_all)     dynamic lower bound on new capacity (fixed initial term)
1169      growth_new_capacity_lo(node,tec,year_all)      dynamic lower bound on new capacity (growth rate)
1170      soft_new_capacity_lo(node,tec,year_all)        soft relaxation of dynamic lower bound on new capacity (growth rate)
1171   
1172      initial_activity_up(node,tec,year_all,time)    dynamic upper bound on activity (fixed initial term)
1173      growth_activity_up(node,tec,year_all,time)     dynamic upper bound on activity (growth rate)
1174      soft_activity_up(node,tec,year_all,time)       soft relaxation of dynamic upper bound on activity (growth rate)
1175   
1176      initial_activity_lo(node,tec,year_all,time)    dynamic lower bound on activity (fixed initial term)
1177      growth_activity_lo(node,tec,year_all,time)     dynamic lower bound on activity (growth rate)
1178      soft_activity_lo(node,tec,year_all,time)       soft relaxation of dynamic lower bound on activity (growth rate)
1179  ;
1180   
1181  *----------------------------------------------------------------------------------------------------------------------*
1182  * Add-on technology parameters                                                                                         *
1183  *----------------------------------------------------------------------------------------------------------------------*
1184   
1185  ***
1186  * .. _section_parameter_addon:
1187  *
1188  * Parameters for the add-on technologies
1189  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1190  *
1191  * The implementation of |MESSAGEix| includes the functionality to introduce "add-on technologies" that are specifically
1192  * linked to parent technologies. This feature can be used to model mitigation options (scrubber, cooling). Upper and
1193  * lower bounds of add-on technologies are defined relative to the parent: ``addon_up`` and ``addon_lo``, respectively.
1194  *
1195  * .. note::
1196  *    No default ``addon_conversion`` factor (conversion factor between add-on and parent technology activity) is set.
1197  *    This is to avoid default conversion factors of 1 being set for technologies with multiple modes, of which only a
1198  *    single mode should be linked to the add-on technology.
1199  *
1200  * .. list-table::
1201  *    :widths: 20 80
1202  *    :header-rows: 1
1203  *
1204  *    * - Parameter name
1205  *      - Index names
1206  *    * - addon_conversion
1207  *      - ``node`` | ``tec`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time`` | ``type_addon``
1208  *    * - addon_up
1209  *      - ``node`` | ``tec`` | ``year_act`` | ``mode`` | ``time`` | ``type_addon``
1210  *    * - addon_lo
1211  *      - ``node`` | ``tec`` | ``year_act`` | ``mode`` | ``time`` | ``type_addon``
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 24
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1212  *
1213  ***
1214   
1215  Parameters
1216      addon_conversion(node,tec,vintage,year_all,mode,time,type_addon) conversion factor between add-on and parent technology activity
1217      addon_up(node,tec,year_all,mode,time,type_addon)    upper bound of add-on technologies relative to parent technology
1218      addon_lo(node,tec,year_all,mode,time,type_addon)    lower bound of add-on technologies relative to parent technology
1219  ;
1220   
1221  *----------------------------------------------------------------------------------------------------------------------*
1222  * Storage parameters
1223  *----------------------------------------------------------------------------------------------------------------------*
1224   
1225  ***
1226  * .. _section_parameter_storage:
1227  *
1228  * Parameters for representing storage solutions
1229  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1230  *
1231  * The |MESSAGEix| formulation includes "storage" solutions to model sub-annual, inter-temporal storage of commodities in each period.
1232  * This feature can be used to model electricity storage (pumped hydro, batteries, compressed air energy storage, etc.), thermal energy storage,
1233  * demand side management, and in general any technology for storing commodities (gas, hydrogen, water, etc.) over sub-annual timesteps.
1234  * The user defines the chronological order of sub-annual time steps by assigning a number to them in parameter ``time_order``.
1235  * This order is used by storage equations to shift the stored commodity in a correct timeline, e.g., from Jan through to Dec, and not vice versa.
1236  * The last sub-annual timestep is linked to the first one to close the loop of the year. Parameter ``storage_initial`` is to set an initial amount
1237  * for the content of storage in any desirable timestep (optionally). This initial value is a cost-free stored media that storage can discharge
1238  * in the same or following timesteps. ``storage_self_discharge`` represents the self-discharge (loss) of storage as % of the level of stored media
1239  * in each timestep. This allows to model time-related losses in storage separately, in addition to charging and discharging losses.
1240  *
1241  * .. list-table::
1242  *    :widths: 20 80
1243  *    :header-rows: 1
1244  *
1245  *    * - Parameter name
1246  *      - Index names
1247  *    * - storage_initial
1248  *      - ``node`` | ``tec`` | ``level`` | ``commodity`` | ``year_act`` | ``time``
1249  *    * - storage_self_discharge
1250  *      - ``node`` | ``tec`` | ``level`` | ``commodity`` | ``year_act`` | ``time``
1251  *    * - time_order
1252  *      - ``lvl_temporal`` | ``time``
1253  *
1254  ***
1255   
1256  Parameters
1257      storage_initial(node,tec,level,commodity,year_all,time)                       initial content of storage
1258      storage_self_discharge(node,tec,level,commodity,year_all,time)                self-discharge (loss) of storage as % of storage level in each timestep
1259      time_order(lvl_temporal,time)                                                 sequence of subannual timesteps
1260  ;
1261   
1262  *----------------------------------------------------------------------------------------------------------------------*
1263  * Soft relaxations of dynamic constraints                                                                              *
1264  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 25
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1265   
1266  ***
1267  * .. _section_parameter_soft_constraints:
1268  *
1269  * Cost parameters for 'soft' relaxations of dynamic constraints
1270  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1271  *
1272  * The implementation of |MESSAGEix| includes the functionality for 'soft' relaxations of dynamic constraints on
1273  * new-built capacity and activity (see Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
1274  * Refer to the section :ref:`dynamic_constraints`. Absolute cost and levelized cost multipliers are used
1275  * for the relaxation of upper and lower bounds.
1276  *
1277  * .. list-table::
1278  *    :widths: 20 80
1279  *    :header-rows: 1
1280  *
1281  *    * - Parameter name
1282  *      - Index names
1283  *    * - abs_cost_new_capacity_soft_up
1284  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1285  *    * - abs_cost_new_capacity_soft_lo
1286  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1287  *    * - level_cost_new_capacity_soft_up
1288  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1289  *    * - level_cost_new_capacity_soft_lo
1290  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1291  *    * - abs_cost_activity_soft_up
1292  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1293  *    * - abs_cost_activity_soft_lo
1294  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1295  *    * - level_cost_activity_soft_up
1296  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1297  *    * - level_cost_activity_soft_lo
1298  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``time``
1299  *
1300  ***
1301   
1302  Parameters
1303      abs_cost_new_capacity_soft_up(node,tec,year_all) absolute cost of dynamic new capacity constraint relaxation (upwards)
1304      abs_cost_new_capacity_soft_lo(node,tec,year_all) absolute cost of dynamic new capacity constraint relaxation (downwards)
1305      level_cost_new_capacity_soft_up(node,tec,year_all) levelized cost multiplier of dynamic new capacity constraint relaxation (upwards)
1306      level_cost_new_capacity_soft_lo(node,tec,year_all) levelized cost multiplier of dynamic new capacity constraint relaxation (downwards)
1307   
1308      abs_cost_activity_soft_up(node,tec,year_all,time)  absolute cost of dynamic activity constraint relaxation (upwards)
1309      abs_cost_activity_soft_lo(node,tec,year_all,time)  absolute cost of dynamic activity constraint relaxation (downwards)
1310      level_cost_activity_soft_up(node,tec,year_all,time) levelized cost multiplier of dynamic activity constraint relaxation (upwards)
1311      level_cost_activity_soft_lo(node,tec,year_all,time) levelized cost multiplier of dynamic activity constraint relaxation (downwards)
1312  ;
1313   
1314  ***
1315  * .. _section_parameter_historical:
1316  *
1317  * Historical capacity and activity values
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 26
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1318  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1319  *
1320  * Historical data on new capacity and activity levels are included in |MESSAGEix| for
1321  * correct accounting of the vintage portfolio and a seamless implementation of dynamic constraints from
1322  * historical years to model periods.
1323  *
1324  * .. list-table::
1325  *    :widths: 35 65
1326  *    :header-rows: 1
1327  *
1328  *    * - Parameter name
1329  *      - Index names
1330  *    * - historical_new_capacity [#hist]_
1331  *      - ``node_loc`` | ``tec`` | ``year_vtg``
1332  *    * - historical_activity [#hist]_
1333  *      - ``node_loc`` | ``tec`` | ``year_act`` | ``mode`` | ``time``
1334  *
1335  ***
1336   
1337  Parameters
1338      historical_new_capacity(node,tec,year_all)           historical new capacity
1339      historical_activity(node,tec,year_all,mode,time)     historical activity
1340  ;
1341   
1342  ***
1343  * .. _section_parameter_investment:
1344  *
1345  * Auxiliary investment cost parameters and multipliers
1346  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1347  *
1348  * Auxiliary investment cost parameters include the remaining technical lifetime at the end of model horizon (``beyond_horizon_lifetime``) in addition to the
1349  * different scaling factors and multipliers as listed below. These factors account for remaining capacity (``remaining_capacity``) or construction time of new capacity (``construction_time_factor``),
1350  * the value of investment at the end of model horizon (``end_of_horizon_factor``) or the discount factor of remaining lifetime beyond model horizon (``beyond_horizon_factor``).
1351  *
1352  * .. list-table::
1353  *    :widths: 35 50
1354  *    :header-rows: 1
1355  *
1356  *    * - Parameter name
1357  *      - Index names
1358  *    * - construction_time_factor
1359  *      - ``node`` | ``tec`` | ``year``
1360  *    * -  remaining_capacity
1361  *      - ``node`` | ``tec`` | ``year``
1362  *    * - end_of_horizon_factor
1363  *      - ``node`` | ``tec`` | ``year``
1364  *    * - beyond_horizon_lifetime
1365  *      - ``node`` | ``tec`` | ``year``
1366  *    * - beyond_horizon_factor
1367  *      - ``node`` | ``tec`` | ``year``
1368  *
1369  *
1370  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 27
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1371   
1372  Parameters
1373      construction_time_factor(node,tec,year_all) scaling factor to account for construction time of new capacity
1374      remaining_capacity(node,tec,year_all,year_all) scaling factor to account for remaining capacity in period
1375      end_of_horizon_factor(node,tec,year_all)    multiplier for value of investment at end of model horizon
1376      beyond_horizon_lifetime(node,tec,year_all)  remaining technical lifetime at the end of model horizon
1377      beyond_horizon_factor(node,tec,year_all)    discount factor of remaining lifetime beyond model horizon
1378  ;
1379   
1380  *----------------------------------------------------------------------------------------------------------------------*
1381  * Emissions                                                                                                            *
1382  *----------------------------------------------------------------------------------------------------------------------*
1383   
1384  ***
1385  * .. _section_parameter_emissions:
1386  *
1387  * Parameters of the `Emission` section
1388  * ------------------------------------
1389  *
1390  * The implementation of |MESSAGEix| includes a flexible and versatile accounting of emissions across different
1391  * categories and species, with the option to define upper bounds and taxes on various (aggregates of) emissions
1392  * and pollutants, (sets of) technologies, and (sets of) years.
1393  *
1394  * .. list-table::
1395  *    :widths: 25 75
1396  *    :header-rows: 1
1397  *
1398  *    * - Parameter name
1399  *      - Index dimensions
1400  *    * - historical_emission [#hist]_
1401  *      - ``node`` | ``emission`` | ``type_tec`` | ``year``
1402  *    * - emission_scaling [#em_scaling]_
1403  *      - ``type_emission`` | ``emission``
1404  *    * - bound_emission
1405  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
1406  *    * - tax_emission
1407  *      - ``node`` | ``type_emission`` | ``type_tec`` | ``type_year``
1408  *
1409  * .. [#em_scaling] The parameter ``emission_scaling`` is the scaling factor to harmonize bounds or taxes across types of
1410  *    emissions. It allows to efficiently aggregate different emissions/pollutants and set bounds or taxes on various categories.
1411  *
1412  ***
1413   
1414  Parameters
1415      historical_emission(node,emission,type_tec,year_all)    historical emissions by technology type (including land)
1416      emission_scaling(type_emission,emission)                scaling factor to harmonize bounds or taxes across types
1417      bound_emission(node,type_emission,type_tec,type_year)   upper bound on emissions
1418      tax_emission(node,type_emission,type_tec,type_year)     emission tax
1419  ;
1420   
1421  *----------------------------------------------------------------------------------------------------------------------*
1422  * Land-use model emulator                                                                                              *
1423  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 28
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1424   
1425  ***
1426  * .. _section_parameter_landuse_emulator:
1427  *
1428  * Parameters of the `Land-Use model emulator` section
1429  * ---------------------------------------------------
1430  *
1431  * The implementation of |MESSAGEix| includes a land-use model emulator, which draws on exogenous land-use scenarios
1432  * (provided by another model) to derive supply of commodities (e.g., biomass) and emissions
1433  * from agriculture and forestry. The parameters listed below refer to the assigned land scenario.
1434  *
1435  * .. list-table::
1436  *    :widths: 25 75
1437  *    :header-rows: 1
1438  *
1439  *    * - Parameter name
1440  *      - Index dimensions
1441  *    * - historical_land [#hist]_
1442  *      - ``node`` | ``land_scenario`` | ``year``
1443  *    * - land_cost
1444  *      - ``node`` | ``land_scenario`` | ``year``
1445  *    * - land_input
1446  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1447  *    * - land_output
1448  *      - ``node`` | ``land_scenario`` | ``year`` | ``commodity`` | ``level`` | ``time``
1449  *    * - land_use
1450  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1451  *    * - land_emission
1452  *      - ``node`` | ``land_scenario`` | ``year`` | ``emission``
1453  *    * - initial_land_scen_up
1454  *      - ``node`` | ``land_scenario`` | ``year``
1455  *    * - growth_land_scen_up
1456  *      - ``node`` | ``land_scenario`` | ``year``
1457  *    * - initial_land_scen_lo
1458  *      - ``node`` |  ``land_scenario`` | ``year``
1459  *    * - growth_land_scen_lo
1460  *      - ``node`` | ``land_scenario`` | ``year``
1461  *    * - initial_land_up
1462  *      - ``node`` | ``year`` | ``land_type``
1463  *    * - dynamic_land_up
1464  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1465  *    * - growth_land_up
1466  *      - ``node`` | ``year`` | ``land_type``
1467  *    * - initial_land_lo
1468  *      - ``node`` | ``year`` | ``land_type``
1469  *    * - dynamic_land_lo
1470  *      - ``node`` | ``land_scenario`` | ``year`` | ``land_type``
1471  *    * - growth_land_lo
1472  *      - ``node`` | ``year`` | ``land_type``
1473  *
1474  ***
1475   
1476  Parameters
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 29
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1477      historical_land(node,land_scenario,year_all)            historical land scenario assignment
1478      land_cost(node,land_scenario,year_all)                  costs of land-use scenario
1479      land_input(node,land_scenario,year_all,commodity,level,time) commodity input requirement of land-use scenario
1480      land_output(node,land_scenario,year_all,commodity,level,time) commodity output (yield) of land-use scenario
1481      land_use(node,land_scenario,year_all,land_type)         land type used in specific scenario
1482      land_emission(node,land_scenario,year_all,emission)     emissions from land-use scenario
1483      initial_land_scen_up(node,land_scenario,year_all)       initial bound on land-scenario change (upwards)
1484      growth_land_scen_up(node,land_scenario,year_all)        relative bound on land-scenario change (upwards)
1485      initial_land_scen_lo(node,land_scenario,year_all)       initial bound on land-scenario change (downwards)
1486      growth_land_scen_lo(node,land_scenario,year_all)        relative bound on land-scenario change (downwards)
1487      initial_land_up(node,year_all,land_type)                initial bound on land-type use change (upwards)
1488      dynamic_land_up(node,land_scenario,year_all,land_type)  absolute bound on land-type use change (upwards)
1489      growth_land_up(node,year_all,land_type)                 relative bound on land-type use change (upwards)
1490      initial_land_lo(node,year_all,land_type)                initial bound on land-type use change (downwards)
1491      dynamic_land_lo(node,land_scenario,year_all,land_type)  absolute bound on land-type use change (upwards)
1492      growth_land_lo(node,year_all,land_type)                 relative bound on land-type use change (downwards)
1493  ;
1494   
1495  *----------------------------------------------------------------------------------------------------------------------*
1496  * Share constraints                                                                                                    *
1497  *----------------------------------------------------------------------------------------------------------------------*
1498   
1499  ***
1500  * .. _section_parameter_share_constraints:
1501  *
1502  * Parameters of the `Share Constraints` section
1503  * ---------------------------------------------
1504  *
1505  * Share constraints define the share of a given commodity/mode to be active on a certain level. For the mathematical
1506  * formulation, refer to :ref:`share_constraints`.
1507  *
1508  * .. list-table::
1509  *    :widths: 25 75
1510  *    :header-rows: 1
1511  *
1512  *    * - Parameter name
1513  *      - Index dimensions
1514  *    * - share_commodity_up
1515  *      - ``shares`` | ``node_share`` | ``year_act`` | ``time``
1516  *    * - share_commodity_lo
1517  *      - ``shares`` | ``node`` | ``year_act`` | ``time``
1518  *    * - share_mode_up
1519  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1520  *    * - share_mode_lo
1521  *      - ``shares`` | ``node_loc`` | ``technology`` | ``mode`` | ``year_act`` | ``time``
1522  *
1523  ***
1524   
1525  Parameters
1526      share_commodity_up(shares,node,year_all,time)    upper bound of commodity share constraint
1527      share_commodity_lo(shares,node,year_all,time)    lower bound of commodity share constraint
1528      share_mode_up(shares,node,tec,mode,year_all,time)    upper bound of mode share constraint
1529      share_mode_lo(shares,node,tec,mode,year_all,time)    lower bound of mode share constraint
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 30
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1530  ;
1531   
1532  *----------------------------------------------------------------------------------------------------------------------*
1533  * Generic linear relations                                                                                       *
1534  *----------------------------------------------------------------------------------------------------------------------*
1535   
1536  ***
1537  * .. _section_parameter_generic_relations:
1538  *
1539  * Parameters of the `Relations` section
1540  * -------------------------------------
1541  *
1542  * Generic linear relations are implemented in |MESSAGEix|. This feature is intended for development and testing only - all new features
1543  * should be implemented as specific new mathematical formulations and associated *sets* & *parameters*. For the formulation of the relations,
1544  * refer to :ref:`section_of_generic_relations`.
1545  *
1546  * .. list-table::
1547  *    :widths: 25 75
1548  *    :header-rows: 1
1549  *
1550  *    * - Parameter name
1551  *      - Index dimensions
1552  *    * - relation_upper
1553  *      - ``relation`` | ``node_rel`` | ``year_rel``
1554  *    * - relation_lower
1555  *      - ``relation`` | ``node_rel`` | ``year_rel``
1556  *    * - relation_cost
1557  *      - ``relation`` | ``node_rel`` | ``year_rel``
1558  *    * - relation_new_capacity
1559  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1560  *    * - relation_total_capacity
1561  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``tec``
1562  *    * - relation_activity
1563  *      - ``relation`` | ``node_rel`` | ``year_rel`` | ``node_loc`` | ``tec`` | ``year_act`` | ``mode``
1564  *
1565  ***
1566   
1567  Parameters
1568      relation_upper(relation,node,year_all)    upper bound of generic relation
1569      relation_lower(relation,node,year_all)    lower bound of generic relation
1570      relation_cost(relation,node,year_all)     cost of investment and activities included in generic relation
1571      relation_new_capacity(relation,node,year_all,tec)   new capacity factor (multiplier) of generic relation
1572      relation_total_capacity(relation,node,year_all,tec) total capacity factor (multiplier) of generic relation
1573      relation_activity(relation,node,year_all,node,tec,year_all,mode) activity factor (multiplier) of generic relation
1574  ;
1575   
1576  *----------------------------------------------------------------------------------------------------------------------*
1577  * Fixed variable values                                                                                                *
1578  *----------------------------------------------------------------------------------------------------------------------*
1579   
1580  ***
1581  * .. _section_parameter_fixed:
1582  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 31
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1583  * Fixed variable values
1584  * ---------------------
1585  *
1586  * The following parameters allow to set variable values to a specific value.
1587  * The value is usually taken from a solution of another model instance
1588  * (e.g., scenarios where a shock sets in later to mimic imperfect foresight).
1589  *
1590  * The fixed values do not override any upper or lower bounds that may be defined,
1591  * so fixing variables to values outside of that range will yield an infeasible model.
1592  *
1593  * .. list-table::
1594  *    :widths: 25 75
1595  *    :header-rows: 1
1596  *
1597  *    * - Parameter name
1598  *      - Index dimensions
1599  *    * - fixed_extraction
1600  *      - ``node`` | ``commodity`` | ``grade`` | ``year``
1601  *    * - fixed_stock
1602  *      - ``node`` | ``commodity`` | ``level`` | ``year``
1603  *    * - fixed_new_capacity
1604  *      - ``node`` | ``technology`` | ``year_vtg``
1605  *    * - fixed_capacity
1606  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act``
1607  *    * - fixed_activity
1608  *      - ``node`` | ``technology`` | ``year_vtg`` | ``year_act`` | ``mode`` | ``time``
1609  *    * - fixed_land
1610  *      - ``node`` | ``land_scenario`` | ``year``
1611  *
1612  * Note that the variable :math:`STOCK\_CHG` is determined implicitly by the :math:`STOCK` variable
1613  * and therefore does not need to be explicitly fixed.
1614  ***
1615   
1616  Parameters
1617      fixed_extraction(node,commodity,grade,year_all)     fixed extraction level
1618      fixed_stock(node,commodity,level,year_all)          fixed stock level
1619      fixed_new_capacity(node,tec,year_all)               fixed new-built capacity
1620      fixed_capacity(node,tec,vintage,year_all)           fixed maintained capacity
1621      fixed_activity(node,tec,vintage,year_all,mode,time) fixed activity level
1622      fixed_land(node,land_scenario,year_all)             fixed land level
1623  ;
1624   
1625  *----------------------------------------------------------------------------------------------------------------------*
1626  * Auxiliary reporting parameters                                                                                       *
1627  *----------------------------------------------------------------------------------------------------------------------*
1628   
1629  ***
1630  * .. _section_parameter_auxiliary_reporting:
1631  *
1632  * Auxiliary reporting parameters
1633  * ------------------------------
1634  *
1635  * The following parameters are used for reporting (post-processing) solved models. They assign monetary value to
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 32
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1636  * the `net` total system costs from trading and emission taxes (``total_cost``). Morevoer, they also assign a value
1637  * to the `total` trade of commodities (the difference between the revenues from exports and the costs of imports,
1638  * ``trade_cost``) and to the costs from importing (``import_cost``) and the revenues from exporting (``export_cost``)
1639  * in each node and year.
1640  *
1641  * .. list-table::
1642  *    :widths: 25 75
1643  *    :header-rows: 1
1644  *
1645  *    * - Parameter name
1646  *      - Index dimensions
1647  *    * - total_cost
1648  *      - ``node`` | ``year``
1649  *    * - trade_cost
1650  *      - ``node`` | ``year``
1651  *    * - import_cost
1652  *      - ``node`` | ``commodity`` | ``year``
1653  *    * - export_cost
1654  *      - ``node`` | ``commodity`` | ``year``
1655  ***
1656   
1657  Parameters
1658      trade_cost(node, year_all)              net of commodity import costs and commodity export revenues by node and year
1659      import_cost(node, commodity, year_all)  import costs by commodity and node and year
1660      export_cost(node, commodity, year_all)  export revenues by commodity and node and year
1661  ;
1662   
1663  *----------------------------------------------------------------------------------------------------------------------*
1664  * Auxiliary parameters for GAMS workflow                                                                               *
1665  *----------------------------------------------------------------------------------------------------------------------*
1666   
1667  Parameters
1668      ctr               counter parameter for loops
1669      status(*,*)       model solution status parameter for log writing
1670  ;
1671   
1672  ** load data from gdx, run processing scripts of auxiliary parameters
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/data_load.gms
1673  $INCLUDE MESSAGE/data_load.gms
1674   
1675  *----------------------------------------------------------------------------------------------------------------------*
1676  * load sets and parameters from dataset gdx                                                                            *
1677  *----------------------------------------------------------------------------------------------------------------------*
1678   
1679  put_utility 'log' /"+++ Importing data from 'data/MsgData_ptl_baseline_baseline_xlsx.gdx'... +++ " ;
1680   
1681  * all sets and general parameters from the gdx file
GDXIN   C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/MsgData_ptl_baseline_baseline_xlsx.gdx
1682  $GDXIN 'data/MsgData_ptl_baseline_baseline_xlsx.gdx'
--- LOAD  node = 3:node
--- LOAD  tec = 4:technology
--- LOAD  year_all = 2:year
--- LOAD  commodity = 20:commodity
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 33
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


--- LOAD  level = 19:level
--- LOAD  grade = 18:grade
--- LOAD  mode = 17:mode
--- LOAD  time = 10:time
--- LOAD  rating = 21:rating
1683  $LOAD node, tec=technology, year_all=year, commodity, level, grade, mode, time, rating
--- LOAD  emission = 6:emission
--- LOAD  land_scenario = 7:land_scenario
--- LOAD  land_type = 8:land_type
--- LOAD  relation = 5:relation
1684  $LOAD emission, land_scenario, land_type, relation
--- LOAD  level_resource = 36:level_resource
--- LOAD  level_renewable = 37:level_renewable
1685  $LOAD level_resource, level_renewable
--- LOAD  lvl_spatial = 9:lvl_spatial
--- LOAD  lvl_temporal = 11:lvl_temporal
--- LOAD  map_spatial_hierarchy = 26:map_spatial_hierarchy
--- LOAD  map_temporal_hierarchy = 28:map_temporal_hierarchy
1686  $LOAD lvl_spatial, lvl_temporal, map_spatial_hierarchy, map_temporal_hierarchy
--- LOAD  map_node = 27:map_node
--- LOAD  map_time = 29:map_time
--- LOAD  map_commodity = 48:map_commodity
--- LOAD  map_resource = 46:map_resource
--- LOAD  map_stocks = 47:map_stocks
--- LOAD  map_tec = 49:map_tec
--- LOAD  map_tec_time = 51:map_tec_time
--- LOAD  map_tec_mode = 50:map_tec_mode
1687  $LOAD map_node, map_time, map_commodity, map_resource, map_stocks, map_tec, map_tec_time, map_tec_mode
--- LOAD  map_land = 53:map_land
--- LOAD  map_relation = 52:map_relation
1688  $LOAD map_land, map_relation
--- LOAD  type_tec = 13:type_tec
--- LOAD  cat_tec = 31:cat_tec
--- LOAD  type_year = 14:type_year
--- LOAD  cat_year = 32:cat_year
--- LOAD  type_emission = 15:type_emission
--- LOAD  cat_emission = 33:cat_emission
--- LOAD  type_tec_land = 34:type_tec_land
1689  $LOAD type_tec, cat_tec, type_year, cat_year, type_emission, cat_emission, type_tec_land
--- LOAD  inv_tec = 54:inv_tec
--- LOAD  renewable_tec = 55:renewable_tec
1690  $LOAD inv_tec, renewable_tec
--- LOAD  balance_equality = 44:balance_equality
1691  $LOAD balance_equality
--- LOAD  shares = 22:shares
1692  $LOAD shares
--- LOAD  addon = 41:addon
--- LOAD  type_addon = 23:type_addon
--- LOAD  cat_addon = 42:cat_addon
--- LOAD  map_tec_addon = 43:map_tec_addon
1693  $LOAD addon, type_addon, cat_addon, map_tec_addon
--- LOAD  storage_tec = 25:storage_tec
--- LOAD  level_storage = 24:level_storage
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 34
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


--- LOAD  map_tec_storage = 45:map_tec_storage
1694  $LOAD storage_tec, level_storage, map_tec_storage
1695  $GDXIN
1696   
1697  Execute_load 'data/MsgData_ptl_baseline_baseline_xlsx.gdx'
1698  * general parameters
1699  duration_period, duration_time, interestrate,
1700  * resources parameters
1701  resource_volume, resource_cost, is_bound_extraction_up, bound_extraction_up, resource_remaining,
1702  * technology technical-engineering parameters and economic costs
1703  input, output, construction_time, technical_lifetime
1704  capacity_factor, operation_factor, min_utilization_factor, inv_cost, fix_cost, var_cost,
1705  * upper and lower bounds on new capacity investment, total installed capacity and activity (including mapping sets)
1706  is_bound_new_capacity_up, is_bound_new_capacity_lo, bound_new_capacity_up, bound_new_capacity_lo,
1707  is_bound_total_capacity_up, is_bound_total_capacity_lo, bound_total_capacity_up, bound_total_capacity_lo,
1708  is_bound_activity_up, bound_activity_up, bound_activity_lo,
1709  * dynamic constraints on new capacity investment and activity of technologies
1710  is_dynamic_new_capacity_up, initial_new_capacity_up, growth_new_capacity_up,
1711  is_dynamic_new_capacity_lo, initial_new_capacity_lo, growth_new_capacity_lo,
1712  is_dynamic_activity_up, initial_activity_up, growth_activity_up,
1713  is_dynamic_activity_lo, initial_activity_lo, growth_activity_lo,
1714  * parameters for soft relaxation of dynamic constraints
1715  abs_cost_new_capacity_soft_up, abs_cost_new_capacity_soft_lo, level_cost_new_capacity_soft_up, level_cost_new_capacity_soft_lo,
1716  abs_cost_activity_soft_up, abs_cost_activity_soft_lo, level_cost_activity_soft_up, level_cost_activity_soft_lo,
1717  soft_new_capacity_up, soft_new_capacity_lo, soft_activity_up, soft_activity_lo,
1718  * share constraints
1719  map_shares_commodity_share,map_shares_commodity_total,share_commodity_up,share_commodity_lo
1720  share_mode_up,share_mode_lo,
1721  * addon technologies
1722  addon_conversion, addon_up, addon_lo
1723  * parameters for reliability, flexibility and renewable potential constraints
1724  rating_bin, reliability_factor, peak_load_factor, flexibility_factor
1725  renewable_capacity_factor, renewable_potential
1726  * emission factors, bounds and taxes on emissions (including mapping sets)
1727  historical_emission, emission_factor, emission_scaling, is_bound_emission, bound_emission, tax_emission,
1728  * historical values of new capacity investment, activity and extraction
1729  historical_new_capacity, historical_activity, historical_extraction
1730  * parameters for land-use model emulator
1731  historical_land, land_cost, land_input, land_output, land_use, land_emission,
1732  is_dynamic_land_scen_up, initial_land_scen_up, growth_land_scen_up,
1733  is_dynamic_land_scen_lo, initial_land_scen_lo, growth_land_scen_lo,
1734  is_dynamic_land_up, initial_land_up, dynamic_land_up, growth_land_up,
1735  is_dynamic_land_lo, initial_land_lo, dynamic_land_lo, growth_land_lo, growth_land_lo,
1736  * parameters for generic relations (linear constraints)
1737  is_relation_upper, is_relation_lower, relation_upper, relation_lower,
1738  relation_cost, relation_total_capacity, relation_new_capacity, relation_activity,
1739  * energy stocks
1740  commodity_stock,
1741  * demand parameters
1742  demand_fixed=demand
1743  * fixing variables to pre-specified values
1744  is_fixed_extraction, is_fixed_stock, is_fixed_new_capacity, is_fixed_capacity, is_fixed_activity, is_fixed_land
1745  fixed_extraction, fixed_stock, fixed_new_capacity, fixed_capacity, fixed_activity, fixed_land
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 35
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1746  * storage parameters
1747  storage_initial, storage_self_discharge, time_order
1748  ;
1749   
1750   
1751  *----------------------------------------------------------------------------------------------------------------------*
1752  * ensure that each node is mapped to itself                                                                            *
1753  *----------------------------------------------------------------------------------------------------------------------*
1754   
1755  map_node(node,node) = yes ;
1756   
1757  *----------------------------------------------------------------------------------------------------------------------*
1758  * auxiliary mappings for the implementation of bounds over all modes and system reliability/flexibility constraints    *
1759  *----------------------------------------------------------------------------------------------------------------------*
1760   
1761  Set all_modes (mode) ;
1762  all_modes('all') = yes ;
1763   
1764  Set rating_unfirm(rating) ;
1765  rating_unfirm(rating) = yes ;
1766  rating_unfirm('firm') = no ;
1767   
1768  Set rating_unrated(rating) ;
1769  rating_unrated(rating) = yes ;
1770  rating_unrated('unrated') = no ;
1771   
1772  *----------------------------------------------------------------------------------------------------------------------*
1773  * assignment and computation of MESSAGE-specific auxiliary parameters                                                  *
1774  *----------------------------------------------------------------------------------------------------------------------*
1775   
1776  * get assignment of auxiliary parameter for period mappings and duration
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/period_parameter_assignment.gms
1777  $INCLUDE includes/period_parameter_assignment.gms
1778  *----------------------------------------------------------------------------------------------------------------------*
1779  * assignment and computation of auxiliary parameters                                                                   *
1780  *----------------------------------------------------------------------------------------------------------------------*
1781   
1782  * additional sets and parameters created in GAMS to make notation more concise for myopic/rolling-horizon optimization
1783  Sets
1784      historical(year_all)             set of periods prior to the start of the model horizon
1785      model_horizon(year_all)          set of periods included in the model horizon
1786      macro_horizon(year_all)          set of periods included in the MACRO model horizon
1787      seq_period(year_all,year_all2)    mapping of one period ('year_all') to the next ('year_all2')
1788      map_period(year_all,year_all2)    mapping of one period ('year_all') to itself and all subsequent periods ('year_all2')
1789      map_first_period(type_year, year_all) mapping of a 'type_year' to the first 'year'
1790      first_period(year_all)           flag for first period in model horizon
1791      last_period(year_all)            flag for last period in model horizon
1792      macro_initial_period(year_all)   flag for period in model horizon in which to initialize model parameters in (period prior to first model period) - used in MACRO
1793      macro_base_period(year_all)      flag for base year period in model horizon (period prior to first model period) - used in MACRO
1794  ;
1795   
1796  Parameter
1797      duration_period_sum(year_all,year_all2) number of years between two periods ('year_all' must precede 'year_all2')
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 36
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1798      duration_time_rel(time,time2)         relative duration of subannual time period ('time2' relative to parent 'time')
1799      elapsed_years(year_all)    elapsed years since the start of the model horizon (not including 'year_all' period)
1800      remaining_years(year_all)  remaining years until the end of the model horizon (including last period)
1801      year_order(year_all)       order for members of set 'year_all'
1802  ;
1803  *----------------------------------------------------------------------------------------------------------------------*
1804  * assignment auxiliary dynamic sets                                                                                    *
1805  *----------------------------------------------------------------------------------------------------------------------*
1806   
1807  ** treatment of periods **
1808   
1809  * sanity checks to ensure that not more than one period is assigned to the first- and lastyear categories
1810  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ) > 1 ,
1811      abort "There is more than one period assigned as category 'firstmodelyear'!" ) ;
1812  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ) > 1 ,
1813      abort "There is more than one period assigned as category 'lastmodelyear'!" ) ;
1814  if ( sum(year_all$( cat_year("initializeyear_macro",year_all) ), 1 ) > 1 ,
1815      abort "There is more than one period assigned as category 'initializeyear_macro'!" ) ;
1816   
1817  * mapping of sequence of periods over the model horizon
1818  seq_period(year_all,year_all2)$( ORD(year_all) + 1 = ORD(year_all2) ) = yes ;
1819  map_period(year_all,year_all2)$( ORD(year_all) <= ORD(year_all2) ) = yes ;
1820   
1821  * dynamic sets (singleton) with first and last periods in model horizon of MESSAGEix (for easier reference)
1822  if ( sum(year_all$( cat_year("firstmodelyear",year_all) ), 1 ),
1823      first_period(year_all)$( cat_year("firstmodelyear",year_all) ) = yes ;
1824  else
1825      first_period(year_all)$( ORD(year_all) eq 1 ) = yes ;
1826  ) ;
1827  if ( sum(year_all$( cat_year("lastmodelyear",year_all) ), 1 ),
1828      last_period(year_all)$( cat_year("lastmodelyear",year_all) ) = yes;
1829  else
1830      last_period(year_all)$( ORD(year_all) = CARD(year_all) ) = yes ;
1831  ) ;
1832   
1833  * dynamic sets for MACRO initialization and base periods
1834  macro_initial_period(year_all) = no ;
1835  macro_initial_period(year_all)$( cat_year("initializeyear_macro",year_all) ) = yes ;
1836  macro_base_period(year_all) = no ;
1837  macro_base_period(year_all)$( ORD(year_all) = sum(year_all2$( first_period(year_all2) ), ORD(year_all2) - 1 ) )  = yes ;
1838   
1839  * assign set of historical years, the model horizon and the MACRO hoizon (includes 'macro_base_period')
1840  historical(year_all)$( ORD(year_all) < sum(year_all2$cat_year("firstmodelyear",year_all2), ORD(year_all2) ) ) = yes ;
1841  model_horizon(year_all) = no ;
1842  model_horizon(year_all)$( ORD(year_all) >= sum(year_all2$first_period(year_all2), ORD(year_all2) )
1843      AND ORD(year_all) <= sum(year_all2$last_period(year_all2), ORD(year_all2) ) ) = yes ;
1844  macro_horizon(year_all) = no ;
1845  macro_horizon(year_all)$macro_base_period(year_all) = yes;
1846  macro_horizon(year_all)$model_horizon(year_all) = yes;
1847   
1848  *----------------------------------------------------------------------------------------------------------------------*
1849  * assignment of (cumulative) discount factors over time                                                                *
1850  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 37
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1851   
1852  * simple method to compute discount factor (but this approach implicitly assumes a constant interest rate)
1853  *df_year(year_all) = POWER( 1 / ( 1+interestrate(year_all) ), sum(year_all2$( ORD(year_all2) < ORD(year_all) ),
1854  *    duration_period(year_all2) ) ) ;
1855   
1856  * compute per-year discount factor (using a recursive method) - set to 1 by default (interest rate = 0)
1857  df_year(year_all) = 1 ;
1858   
1859  * recursively compute the per-year discount factor
1860  loop(year_all$( ORD(year_all) > 1 ),
1861      df_year(year_all) =
1862          sum(year_all2$( seq_period(year_all2,year_all) ), df_year(year_all2)
1863              * POWER( 1 / ( 1 + interestrate(year_all) ), duration_period(year_all) ) ) ;
1864  ) ;
1865   
1866  * multiply per-year discount factor by discounted period duration
1867  df_period(year_all) =
1868      df_year(year_all) * (
1869  * multiply the per-year discount factor by the geometric series of over the duration of the period
1870          ( ( POWER( 1 + interestrate(year_all) , duration_period(year_all) ) - 1 )
1871          / interestrate(year_all) )$( interestrate(year_all) )
1872  * if interest rate = 0, multiply by the number of years in that period
1873          + ( duration_period(year_all) )$( interestrate(year_all) eq 0 ) )
1874  ;
1875   
1876  *----------------------------------------------------------------------------------------------------------------------*
1877  * assignment of auxiliary first-period-per-category mapping and parameters for duration of periods                     *
1878  *----------------------------------------------------------------------------------------------------------------------*
1879   
1880  * define order of set 'year_all' (to use as equivalent of ORD operator on the dynamic set year (subset of 'year_all') )
1881  year_order(year_all) = ORD(year_all) ;
1882   
1883  * assign the first year of each category to a specific mapping set for use in computing emissions prices
1884  map_first_period(type_year,year_all)$( cat_year(type_year,year_all)
1885      AND year_order(year_all) = SMIN(year_all2$( cat_year(type_year,year_all2) ), year_order(year_all2) ) ) = yes ;
1886   
1887  * auxiliary parameters for duration between periods (years) - not including the final period 'year_all2'
1888  duration_period_sum(year_all,year_all2) =
1889      SUM(year_all3$( ORD(year_all) <= ORD(year_all3) AND ORD(year_all3) < ORD(year_all2) ) , duration_period(year_all3) ) ;
1890   
1891  * auxiliary parameter for duration since the first year of the model horizon - not including the period 'year_all'
1892  elapsed_years(year_all) = sum(first_period, duration_period_sum(first_period,year_all) ) ;
1893   
1894  * auxiliary parameter for duration until the end of the model horizon - including the last period
1895  remaining_years(year_all) = SUM(year_all2$( ORD(year_all) <= ORD(year_all2) ) , duration_period(year_all2) ) ;
1896   
1897  * compute auxiliary parameters for relative duration of subannual time periods
1898  duration_time_rel(time,time2)$( map_time(time,time2) ) = duration_time(time2) / duration_time(time) ;
1899   
1900  * assign an additional mapping set for technologies to nodes, modes and subannual time slices (for shorter reference)
1901  map_tec_act(node,tec,year_all,mode,time)$( map_tec_time(node,tec,year_all,time) AND
1902     map_tec_mode(node,tec,year_all,mode) ) = yes ;
1903   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 38
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1904  * mapping of technology lifetime to all 'current' periods (for all non-investment technologies)
1905  map_tec_lifetime(node,tec,year_all,year_all)$( map_tec(node,tec,year_all) ) = yes ;
1906   
1907  * mapping of technology lifetime to all periods 'year_all' which are within the economic lifetime
1908  * (if built in period 'vintage')
1909  map_tec_lifetime(node,tec,vintage,year_all)$( map_tec(node,tec,vintage) AND map_tec(node,tec,year_all)
1910      AND map_period(vintage,year_all)
1911      AND duration_period_sum(vintage,year_all) < technical_lifetime(node,tec,vintage) ) = yes ;
1912   
1913  * mapping of technology lifetime to all periods 'year_all' which were built prior to the beginning of the model horizon
1914  map_tec_lifetime(node,tec,historical,year_all)$( map_tec(node,tec,year_all) AND map_period(historical,year_all)
1915      AND historical_new_capacity(node,tec,historical)
1916      AND duration_period_sum(historical,year_all)
1917          < sum(first_period, technical_lifetime(node,tec,first_period) ) ) = yes ;
1918   
1919  * mapping of renewable technologies to their input commodities
1920  map_ren_com(node,renewable_tec,commodity,year_all)$(
1921      SUM((node2,year_all2,mode,level_renewable,time_act,time),
1922          input(node2,renewable_tec,year_all,year_all2,mode,node,commodity,level_renewable,time_act,time) ) ) = yes;
1923   
1924  * mapping of renewable commodities to grades
1925  map_ren_grade(node,commodity,grade,year_all)$(
1926      SUM(level_renewable, renewable_potential(node,commodity,grade,level_renewable,year_all) ) ) = yes;
1927   
1928  * mapping of technologies to commodities and ratings
1929  map_rating(node,inv_tec,commodity,level,rating,year_all)$(
1930      SUM(time, reliability_factor(node,inv_tec,year_all,commodity,level,time,rating) ) ) = yes;
1931   
1932  * set the default capacity factor for technologies where no parameter value is provided in the input data
1933  capacity_factor(node,tec,year_all2,year_all,time)$( map_tec_time(node,tec,year_all,time)
1934      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT capacity_factor(node,tec,year_all2,year_all,time) ) = 1 ;
1935   
1936  * assign the yearly average capacity factor (used in equation OPERATION_CONSTRAINT)
1937  capacity_factor(node,tec,year_all2,year_all,'year') =
1938      sum(time$map_tec_time(node,tec,year_all,time), duration_time(time)
1939          * capacity_factor(node,tec,year_all2,year_all,time) ) ;
1940   
1941  * set the default operation factor for technologies where no parameter value is provided in the input data
1942  operation_factor(node,tec,year_all2,year_all)$( map_tec(node,tec,year_all)
1943      AND map_tec_lifetime(node,tec,year_all2,year_all) AND NOT operation_factor(node,tec,year_all2,year_all) ) = 1 ;
1944   
1945  * set the upper bound on addon-technology activity to 1 by default
1946  addon_up(node,tec,year_all,mode,time,type_addon)$(
1947      map_tec_addon(tec,type_addon)
1948      AND map_tec_act(node,tec,year_all,mode,time)
1949      AND NOT addon_up(node,tec,year_all,mode,time,type_addon) ) = 1 ;
1950   
1951  * set the emission scaling parameter to 1 if only one emission is included in a category
1952  emission_scaling(type_emission,emission)$( cat_emission(type_emission,emission)
1953          and not emission_scaling(type_emission,emission) ) = 1 ;
1954   
1955  * mapping of storage technologies to their level and commodity (can be different from level and commodity of storage media)
1956  map_time_commodity_storage(node,tec,level,commodity,mode,year_all,time)$( storage_tec(tec) AND
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 39
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


1957      SUM( (node2,year_all2,time_act), input(node2,tec,year_all,year_all2,mode,node,commodity,level,time_act,time) ) ) = yes;
1958   
1959  * mapping of sequence of sub-annual timesteps in a period and temporal level
1960  map_time_period(year_all,lvl_temporal,time,time2)$( time_order(lvl_temporal,time) AND
1961       time_order(lvl_temporal,time) + 1 = time_order(lvl_temporal,time2) ) = yes;
1962   
1963  * mapping of sequence of the last sub-annual timestep to the first to create a close the order of timesteps
1964  map_time_period(year_all,lvl_temporal,time,time2)$( time_order(lvl_temporal,time) AND
1965       time_order(lvl_temporal,time) = SMAX(time3,time_order(lvl_temporal,time3) ) AND time_order(lvl_temporal,time2) = 1 ) = yes;
1966  *----------------------------------------------------------------------------------------------------------------------*
1967  * sanity checks on the data set                                                                                        *
1968  *----------------------------------------------------------------------------------------------------------------------*
1969   
1970  Parameter check ;
1971   
1972  * check whether all relevant technology/vintage/year combinations have positove input/output values assigned
1973  *loop((node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ),
1974  *    if ( sum( (mode,node2,commodity,level,time,time2),
1975  *            input(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2)
1976  *            + output(node,tec,vintage,year_all,mode,node2,commodity,level,time,time2) ) eq 0 ,
1977  *        put_utility 'log'/" Warning: No input or output not defined for '"node.tl:0"|"tec.tl:0"|"vintage.tl:0"|"year_all.tl:0"' !" ;
1978  *    ) ;
1979  *) ;
1980   
1981  * check that the economic and technical lifetime are defined and consistent for all investment technologies
1982  loop((node,inv_tec,model_horizon)$( map_tec(node,inv_tec,model_horizon) ),
1983      if ( technical_lifetime(node,inv_tec,model_horizon) <= 0 ,
1984          put_utility 'log'/" Error: Technical lifetime not defined for '"node.tl:0"|"inv_tec.tl:0"|"model_horizon.tl:0"' !" ;
1985          check = 1 ;
1986      ) ;
1987  ) ;
1988  if (check,
1989      abort "There is a problem with the definition of the technical lifetime!" ;
1990  ) ;
1991   
1992  * check for validity of temporal resolution
1993  loop(lvl_temporal,
1994      loop(time2$( sum(time, map_temporal_hierarchy(lvl_temporal,time,time2) ) ),
1995          check = 1$( sum( time$( map_temporal_hierarchy(lvl_temporal,time,time2) ),
1996              duration_time(time) ) ne duration_time(time2) ) ;
1997      ) ;
1998  ) ;
1999  if (check,
2000      abort "There is a problem in the definition of the temporal resolution!" ;
2001  );
2002   
2003  * check that the resources-remaining parameter is in the interval (0,1]
2004  loop( (node,commodity,grade,year_all)$( map_resource(node,commodity,grade,year_all)
2005          AND resource_remaining(node,commodity,grade,year_all) ),
2006      if( ( resource_remaining(node,commodity,grade,year_all) > 1
2007              or resource_remaining(node,commodity,grade,year_all) <= 0 ),
2008          put_utility 'log'/" Error: Inconsistent value of parameter 'resources_remaining' "
2009              "for '"node.tl:0"|"commodity.tl:0"|"grade.tl:0"|"year_all.tl:0 "' !" ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 40
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2010          check = 1 ;
2011      ) ;
2012  ) ;
2013  if (check,
2014      abort "There is a problem with the parameter 'resources_remaining'!" ;
2015  ) ;
2016   
2017  * check that the sum of rating bins (if used for firm-cacpacity or flexibility) is greater than 1
2018  loop( (node,tec,year_all,commodity,level,time)$(
2019      ( sum((vintage,rating_unfirm), reliability_factor(node,tec,year_all,commodity,level,time,rating_unfirm) )
2020      OR sum((vintage,mode,rating_unrated)$(
2021          flexibility_factor(node,tec,vintage,year_all,mode,commodity,level,time,rating_unrated) ), 1 ) )
2022      ),
2023      if ( ( sum( rating, rating_bin(node,tec,year_all,commodity,level,time,rating) ) < 1 ),
2024          put_utility 'log'/" Error: Insufficient rating bin assignment ' "
2025              "for '"node.tl:0"|"tec.tl:0"|"year_all.tl:0 "'" ;
2026          check = 1 ;
2027      ) ;
2028  ) ;
2029  if (check,
2030      abort "There is a problem with assignment of rating bins!" ;
2031  ) ;
2032   
2033  ** compute auxiliary parameters for capacity and investment cost accounting
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/scaling_investment_costs.gms
2034  $INCLUDE MESSAGE/scaling_investment_costs.gms
2035  ***
2036  * Auxiliary investment parameters
2037  * ===============================
2038  *
2039  ***
2040   
2041  * compute the scaling investment parameters for all periods in the model horizon
2042  year(year_all)$( model_horizon(year_all) ) = yes ;
2043   
2044  * compute the technical lifetime remaining beyond the overall model horizon
2045  beyond_horizon_lifetime(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
2046      technical_lifetime(node,inv_tec,vintage) - remaining_years(vintage) ;
2047  beyond_horizon_lifetime(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) < 0 ) = 0 ;
2048   
2049  ***
2050  * Levelized capital costs
2051  * -----------------------
2052  * For the 'soft' relaxations of the dynamic constraints and the associated penalty factor in the objective function,
2053  * we need to compute the parameter :math:`levelized\_cost_{n,t,y}`.
2054  *
2055  * .. math::
2056  *    levelized\_cost_{n,t,m,y,h} := \
2057  *        & inv\_cost_{n,t,y} \cdot \frac{ interestrate_{y} \cdot \left( 1 + interestrate_{y} \right)^{|y|} }
2058  *                                      { \left( 1 + interestrate_{y} \right)^{|y|} - 1 } \\
2059  *        & + fix\_cost_{n,t,y,y} \cdot \frac{ 1 }{ \sum_{h'} duration\_time_{h'} \cdot capacity\_factor_{n,t,y,y,h'} } \\
2060  *        & + var\_cost_{n,t,y,y,m,h}
2061  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 41
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2062  * where :math:`|y| = technical\_lifetime_{n,t,y}`. This formulation implicitly assumes constant fixed
2063  * and variable costs over time.
2064  *
2065  * **Warning:** All soft relaxations of the dynamic activity constraint are
2066  * disabled if the levelized costs are negative!
2067  ***
2068   
2069  levelized_cost(node,tec,year,time)$( map_tec_time(node,tec,year,time) AND inv_tec(tec) ) =
2070      inv_cost(node,tec,year)
2071          * (
2072  * compute discounted annualized investment costs if interest rate > 0
2073              ( interestrate(year)
2074                  * ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year)
2075                  / ( ( 1 + interestrate(year) ) ** technical_lifetime(node,tec,year) - 1 )
2076                )$( interestrate(year) )
2077  * if interest rate = 0, annualized investment costs are total investment costs divided by technical lifetime
2078              + ( 1 / technical_lifetime(node,tec,year) )$( interestrate(year) eq 0 )
2079            )
2080  * add (proportional) fixed and variable costs, assuming that these remain constant over the technical lifetime
2081      + ( fix_cost(node,tec,year,year) /
2082            sum(time2$( map_tec_time(node,tec,year,time2) ),
2083               duration_time(time2) * capacity_factor(node,tec,year,year,time2) )
2084          )$( fix_cost(node,tec,year,year) )
2085      + sum(mode$( map_tec_act(node,tec,year,mode,time) ), var_cost(node,tec,year,year,mode,time) )
2086  ;
2087   
2088  * the soft relaxations of the dynamic activity constraints are disabled if the levelized costs are negative
2089  loop((node,tec,year,time)$( levelized_cost(node,tec,year,time) < 0
2090          AND ( soft_activity_up(node,tec,year,time) + soft_activity_lo(node,tec,year,time) ) > 0 ),
2091      put_utility 'log' /'Remove relaxations for dynamic activity constraints for ',node.tl,'|',tec.tl,'|',year.tl,'!' ;
2092      soft_activity_up(node,tec,year,time) = 0 ;
2093      soft_activity_lo(node,tec,year,time) = 0 ;
2094  ) ;
2095   
2096  ***
2097  * Construction time accounting
2098  * ----------------------------
2099  * If the construction of new capacity takes a significant amount of time,
2100  * investment costs have to be scaled up accordingly to account for the higher capital costs.
2101  *
2102  * .. math::
2103  *    construction\_time\_factor_{n,t,y} = \left( 1 + interestrate_y \right)^{|y|}
2104  *
2105  * where :math:`|y| = construction\_time_{n,t,y}`. If no construction time is specified, the default value of the
2106  * investment cost scaling factor defaults to 1. The model assumes that the construction time only plays a role
2107  * for the investment costs, i.e., each unit of new-built capacity is available instantaneously.
2108  *
2109  * **Comment:** This formulation applies the discount rate of the vintage year
2110  * (i.e., the year in which the new capacity becomes operational).
2111  ***
2112   
2113  * set default construction_time_factor to 1
2114  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) ) = 1;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 42
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2115   
2116  * compute the construction_time_factor
2117  construction_time_factor(node,inv_tec,year)$( map_tec(node,inv_tec,year) AND construction_time(node,inv_tec,year) ) =
2118       ( 1 + interestrate(year) ) ** construction_time(node,inv_tec,year) ;
2119   
2120  ***
2121  * Investment costs beyond the model horizon
2122  * -----------------------------------------
2123  * If the technical lifetime of a technology exceeds the model horizon :math:`Y^{model}`, the model has to add
2124  * a scaling factor to the investment costs (:math:`end\_of\_horizon\_factor_{n,t,y}`). Assuming a constant
2125  * stream of revenue (marginal value of the capacity constraint), this can be computed by annualizing investment costs
2126  * from the condition that in an optimal solution, the investment costs must equal the discounted future revenues,
2127  * if the investment variable :math:`CAP\_NEW_{n,t,y} > 0`:
2128  *
2129  * .. math::
2130  *    inv\_cost_{n,t,y^V} = \sum_{y \in Y^{lifetime}_{n,t,y^V}} df\_year_{y} \cdot \beta_{n,t},
2131  *
2132  * Here, :math:`\beta_{n,t} > 0` is the dual variable to the capacity constraint (assumed constant over future periods)
2133  * and :math:`Y^{lifetime}_{n,t,y^V}` is the set of periods in the lifetime of a plant built in period :math:`y^V`.
2134  * Then, the scaling factor :math:`end\_of\_horizon\_factor_{n,t,y^V}` can be derived as follows:
2135  *
2136  * .. math::
2137  *    end\_of\_horizon\_factor_{n,t,y^V} :=
2138  *    \frac{\sum_{y \in Y^{lifetime}_{n,t,y^V} \cap Y^{model}} df\_year_{y} }
2139  *        {\sum_{y' \in Y^{lifetime}_{n,t,y^V}} df\_year_{y'} + beyond\_horizon\_factor_{n,t,y^V} }
2140  *    \in (0,1],
2141  *
2142  * where the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` accounts for the discount factor beyond the
2143  * overall model horizon (the set :math:`Y` in contrast to the set :math:`Y^{model} \subseteq Y` of the periods
2144  * included in the current model iteration (see the page on the recursive-dynamic model solution approach).
2145  *
2146  * .. math::
2147  *    beyond\_horizon\_lifetime_{n,t,y^V} :=  \max \Big\{ 0,
2148  *        economic\_lifetime_{n,t,y^V} - \sum_{y' \geq y^V} duration\_period_{y'} \Big\}
2149  *
2150  * .. math::
2151  *    beyond\_horizon\_factor_{n,t,y^V} :=
2152  *        df\_year_{\widehat{y}} \cdot \frac{1}{ \left( 1 + interestrate_{\widehat{y}} \right)^{|\widehat{y}|} }
2153  *        \cdot \frac{ 1 - \left( \frac{1}{1 + interestrate_{\widehat{y}}} \right)^{|\widetilde{y}|}}
2154  *                   { 1 - \frac{1}{1 + interestrate_{\widehat{y}}}}
2155  *
2156  * where :math:`\widehat{y}` is the last period included in the overall model horizon,
2157  * :math:`|\widehat{y}| = period\_duration\_period_{\widehat{y}}`
2158  * and :math:`|\widetilde{y}| = beyond\_horizon\_lifetime_{n,t,y^V}`.
2159  *
2160  * If the interest rate is zero, i.e., :math:`interestrate_{\widehat{y}} = 0`,
2161  * the parameter :math:`beyond\_horizon\_factor_{n,t,y^V}` equals the remaining technical lifetime
2162  * beyond the model horizon and the parameter :math:`end\_of\_horizon\_factor_{n,t,y^V}` equals
2163  * the share of technical lifetime within the model horizon.
2164  ***
2165   
2166  * compute the cumulative discount factor of the technical lifetime remaining beyond the model horizon
2167  beyond_horizon_factor(node,inv_tec,vintage)$( beyond_horizon_lifetime(node,inv_tec,vintage) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 43
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2168      = sum(last_period,
2169  * compute the discount factor of the very last year (not period) in the model horizon
2170          df_year(last_period) * (
2171  * multiply this by the geometric series of remaining technical lifetime if interestrate of last model period > 0
2172              (
2173                  ( 1 - POWER( 1 / ( 1 + interestrate(last_period) ), beyond_horizon_lifetime(node,inv_tec,vintage) ) )
2174                  / ( 1 - 1 / ( 1 + interestrate(last_period) ) )
2175              )$( interestrate(last_period) )
2176  * if interest rate = 0, multiply by remaining technical lifetime
2177              + ( beyond_horizon_lifetime(node,inv_tec,vintage) )$( interestrate(last_period) eq 0 )
2178          )
2179      ) ;
2180   
2181  * deterine the parameter end_of_horizon_factor used for scaling investment costs to account for
2182  * technical lifetime beyond the model horizon
2183  end_of_horizon_factor(node,inv_tec,vintage)$( map_tec(node,inv_tec,vintage) ) =
2184      sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), df_period(year_all)  )
2185      / ( sum(year_all$( map_tec_lifetime(node,inv_tec,vintage,year_all) ), df_period(year_all) )
2186          + beyond_horizon_factor(node,inv_tec,vintage) ) ;
2187   
2188  ***
2189  * **Possible extension:** Instead of assuming :math:`\beta_{n,t}` to be constant over time, one could include
2190  * a simple (linear) projection of :math:`\beta_{n,t,y}` beyond the end of the model horizon. However, this would likely
2191  * require to include the computation of dual variables endogenously, and thus a mixed-complementarity formulation of
2192  * the model.
2193  ***
2194   
2195  ***
2196  * Remaining installed capacity
2197  * ----------------------------
2198  * The model has to take into account that the technical lifetime of a technology may not coincide with the cumulative
2199  * period duration. Therefore, the model introduces the parameter :math:`remaining\_capacity_{n,t,y^V,y}`
2200  * as a factor of remaining technical lifetime in the last period of operation divided by the duration of that period.
2201  *
2202  ***
2203   
2204  # set default to 1 (assume that the full capacity is available over the entire period)
2205  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all) ) = 1 ;
2206   
2207  # if technical lifetime ends in the respective period, set remaining_capacity factor as share of lifetime in that period
2208  remaining_capacity(node,tec,vintage,year_all)$( map_tec_lifetime(node,tec,vintage,year_all)
2209          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) < duration_period(year_all) )
2210          AND ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) > 0 ) )
2211      = ( technical_lifetime(node,tec,vintage) - duration_period_sum(vintage,year_all) ) / duration_period(year_all) ;
2212   
2213  * unassign the dynamic set 'year'
2214  year(year_all) = no;
2215   
2216  *----------------------------------------------------------------------------------------------------------------------*
2217  * variable and equation definition, model declaration                                                                  *
2218  *----------------------------------------------------------------------------------------------------------------------*
2219   
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_core.gms
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 44
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2220  $INCLUDE MESSAGE/model_core.gms
2221  ***
2222  * Mathematical formulation (core model)
2223  * =====================================
2224  *
2225  * The |MESSAGEix| systems-optimization model minimizes total costs
2226  * while satisfying given demand levels for commodities/services
2227  * and considering a broad range of technical/engineering constraints and societal restrictions
2228  * (e.g. bounds on greenhouse gas emissions, pollutants, system reliability).
2229  * Demand levels are static (i.e. non-elastic), but the demand response can be integrated by linking |MESSAGEix|
2230  * to the single sector general-economy MACRO model included in this framework.
2231  *
2232  * For the complete list of sets, mappings and parameters,
2233  * refer to the auto-documentation pages :ref:`sets_maps_def` and :ref:`parameter_def`.
2234  ***
2235   
2236  *----------------------------------------------------------------------------------------------------------------------*
2237  * Notation declaration                                                                                                 *
2238  *----------------------------------------------------------------------------------------------------------------------*
2239   
2240  ***
2241  * Notation declaration
2242  * --------------------
2243  * The following short notation is used in the mathematical description relative to the GAMS code:
2244  *
2245  * Mathematical notation of sets
2246  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2247  * ================================== ===================================================================================
2248  * Math notation                      GAMS set & index notation
2249  * ================================== ===================================================================================
2250  * :math:`n \in N`                    node (across spatial hierarchy levels)
2251  * :math:`y \in Y`                    year (all periods including historical and model horizon)
2252  * :math:`y \in Y^M \subset Y`        time periods included in model horizon
2253  * :math:`y \in Y^H \subset Y`        historical time periods (prior to first model period)
2254  * :math:`c \in C`                    commodity
2255  * :math:`l \in L`                    level
2256  * :math:`g \in G`                    grade
2257  * :math:`t \in T`                    technology (a.k.a tec)
2258  * :math:`h \in H`                    time (subannual time periods)
2259  * :math:`m \in M`                    mode
2260  * :math:`q \in Q`                    rating of non-dispatchable technologies relative to aggregate commodity use
2261  * :math:`e \in E`                    emission, pollutants
2262  * :math:`s \in S`                    scenarios of land use (for land-use model emulator)
2263  * :math:`u \in U`                    land-use types
2264  * :math:`r \in R`                    set of generic relations (linear constraints)
2265  * :math:`t \in T^{INV} \subseteq T`  all technologies with investment decisions and capacity constraints
2266  * :math:`t \in T^{REN} \subseteq T`  all technologies which draw their input from the renewable level
2267  * :math:`n \in N(\widehat{n})`       all nodes that are subnodes of node :math:`\widehat{n}`
2268  * :math:`y \in Y(\widehat{y})`       all years mapped to the category ``type_year`` :math:`\widehat{y}`
2269  * :math:`t \in T(\widehat{t})`       all technologies mapped to the category ``type_tec`` :math:`\widehat{t}`
2270  * :math:`e \in E(\widehat{e})`       all emissions mapped to the category ``type_emission`` :math:`\widehat{e}`
2271  * ================================== ===================================================================================
2272  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 45
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2273  ***
2274   
2275  *----------------------------------------------------------------------------------------------------------------------*
2276  * Variable definitions                                                                                                 *
2277  *----------------------------------------------------------------------------------------------------------------------*
2278   
2279  ***
2280  * Decision variables
2281  * ^^^^^^^^^^^^^^^^^^
2282  * ============================================= ========================================================================
2283  * Variable                                      Explanatory text
2284  * ============================================= ========================================================================
2285  * :math:`OBJ \in \mathbb{R}`                    Objective value of the optimization program
2286  * :math:`EXT_{n,c,g,y} \in \mathbb{R}_+`        Extraction of non-renewable/exhaustible resources from reserves
2287  * :math:`STOCK_{n,c,l,y} \in \mathbb{R}_+`      Quantity in stock (storage) at start of period :math:`y`
2288  * :math:`STOCK\_CHG_{n,c,l,y,h} \in \mathbb{R}` Input or output quantity into intertemporal commodity stock (storage)
2289  * :math:`REN_{n,t,c,g,y,h}`                     Activity of renewable technologies per grade
2290  * :math:`CAP\_NEW_{n,t,y} \in \mathbb{R}_+`     Newly installed capacity (yearly average over period duration)
2291  * :math:`CAP_{n,t,y^V,y} \in \mathbb{R}_+`      Maintained capacity in year :math:`y` of vintage :math:`y^V`
2292  * :math:`CAP\_FIRM_{n,t,c,l,y,q}`               Capacity counting towards firm (dispatchable)
2293  * :math:`ACT_{n,t,y^V,y,m,h} \in \mathbb{R}`    Activity of a technology (by vintage, mode, subannual time)
2294  * :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}`       Activity attributed to a particular rating bin [#ACT_RATING]_
2295  * :math:`CAP\_NEW\_UP_{n,t,y} \in \mathbb{R}_+` Relaxation of upper dynamic constraint on new capacity
2296  * :math:`CAP\_NEW\_LO_{n,t,y} \in \mathbb{R}_+` Relaxation of lower dynamic constraint on new capacity
2297  * :math:`ACT\_UP_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of upper dynamic constraint on activity [#ACT_BD]_
2298  * :math:`ACT\_LO_{n,t,y,h} \in \mathbb{R}_+`    Relaxation of lower dynamic constraint on activity [#ACT_BD]_
2299  * :math:`LAND_{n,s,y} \in [0,1]`                Relative share of land-use scenario (for land-use model emulator)
2300  * :math:`EMISS_{n,e,\widehat{t},y}`             Auxiliary variable for aggregate emissions by technology type
2301  * :math:`REL_{r,n,y} \in \mathbb{R}`            Auxiliary variable for left-hand side of relations (linear constraints)
2302  * :math:`COMMODITY\_USE_{n,c,l,y}`              Auxiliary variable for amount of commodity used at specific level
2303  * ============================================= ========================================================================
2304  *
2305  * The index :math:`y^V` is the year of construction (vintage) wherever it is necessary to
2306  * clearly distinguish between year of construction and the year of operation.
2307  *
2308  * All decision variables are by year, not by (multi-year) period, except :math:`STOCK_{n,c,l,y}`.
2309  * In particular, the new capacity variable :math:`CAP\_NEW_{n,t,y}` has to be multiplied by the number of years
2310  * in a period :math:`|y| = duration\_period_{y}` to determine the available capacity in subsequent periods.
2311  * This formulation gives more flexibility when it comes to using periods of different duration
2312  * (more intuitive comparison across different periods).
2313  *
2314  * The current model framework allows both input or output normalized formulation.
2315  * This will affect the parametrization, see Section :ref:`efficiency_output` for more details.
2316  *
2317  * .. [#ACT_RATING] The auxiliary variable :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}` is defined in terms of input or
2318  *    output of the technology.
2319  *
2320  * .. [#ACT_BD] The dynamic activity constraints are implemented as summed over all modes;
2321  *    therefore, the variables for the relaxation are not indexed over the set ``mode``.
2322  *
2323  ***
2324   
2325  Variables
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 46
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2326    OBJ objective value of the optimisation problem
2327    CO2_CUM Total co2
2328    COST_CUM Total cost
2329  ;
2330   
2331  Positive Variables
2332  * resource production/extraction variable
2333      EXT(node,commodity,grade,year_all)   extraction of fossil resources
2334  * commodity in inter-temporal stock
2335      STOCK(node,commodity,level,year_all) total quantity in intertemporal stock (storage)
2336  * use of renewable resources
2337      REN(node, tec, commodity, grade, year_all, time)     activity of renewables specified per renewables grade
2338  * investment and capacity variables
2339      CAP_NEW(node,tec,year_all)       new capacity by year
2340      CAP(node,tec,vintage,year_all)   total installed capacity by year
2341      CAP_FIRM(node,tec,commodity,level,year_all) capacity counting towards system reliability constraints
2342  * auxiliary variable for distributing total activity of a technology to a number of "rating bins"
2343      ACT_RATING(node,tec,vintage,year_all,commodity,level,time,rating)
2344  * variables for soft relaxation of dynamic activity constraints
2345      CAP_NEW_UP(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (upwards)
2346      CAP_NEW_LO(node,tec,year_all)    relaxation variable for dynamic constraints on new capacity (downwards)
2347      ACT_UP(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (upwards)
2348      ACT_LO(node,tec,year_all,time)   relaxation variable for dynamic constraints on activity (downwards)
2349  * land-use model emulator
2350      LAND(node,land_scenario,year_all) relative share of land-use scenario
2351   
2352  Variables
2353  * intertemporal stock variables (input or output quantity into the stock)
2354      STOCK_CHG(node,commodity,level,year_all,time) annual input into and output from stocks of commodities
2355  * technology activity variables (can be negative for some technologies, upper and lower bounds stated explicitly)
2356      ACT(node,tec,vintage,year_all,mode,time)     activity of technology by mode-year-timeperiod
2357  * auxiliary variables for finrm-capacity formulation
2358      COMMODITY_USE(node,commodity,level,year_all) total amount of a commodity & level that was used or consumed
2359  * nodal system costs over time
2360      COST_NODAL(node, year_all)                   system costs at the node level over time
2361  * auxiliary variable for aggregate emissions by technology type and land-use model emulator
2362      EMISS(node,emission,type_tec,year_all)       aggregate emissions by technology type and land-use model emulator
2363  * auxiliary variable for left-hand side of relations (linear constraints)
2364      REL(relation,node,year_all)                  auxiliary variable for left-hand side of user-defined relations
2365  * auxiliary variable for left-hand side of commodity balance
2366      COMM(node,commodity,level,year_all,time)         auxiliary variable for left-hand side of commodity balance
2367  ;
2368   
2369  ***
2370  * Auxiliary variables
2371  * ^^^^^^^^^^^^^^^^^^^
2372  * ============================================= ========================================================================
2373  * Variable                                      Explanatory text
2374  * ============================================= ========================================================================
2375  * :math:`DEMAND_{n,c,l,y,h} \in \mathbb{R}`     Demand level (in equilibrium with MACRO integration)
2376  * :math:`PRICE\_COMMODITY_{n,c,l,y,h}`          Commodity price (undiscounted marginals of the commodity balances)
2377  * :math:`PRICE\_EMISSION_{n,e,\widehat{t},y}`   Emission price (undiscounted marginals of EMISSION_BOUND constraint)
2378  * :math:`COST\_NODAL\_NET_{n,y} \in \mathbb{R}` System costs at the node level net of energy trade revenues/cost
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 47
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2379  * :math:`GDP_{n,y} \in \mathbb{R}`              gross domestic product (GDP) in market exchange rates for MACRO reporting
2380  * ============================================= ========================================================================
2381  *
2382  ***
2383   
2384  Variables
2385  * auxiliary variables for demand, prices, costs and GDP (for reporting when MESSAGE is run with MACRO)
2386      DEMAND(node,commodity,level,year_all,time) demand
2387      PRICE_COMMODITY(node,commodity,level,year_all,time)  commodity price (derived from marginals of COMMODITY_BALANCE constraint)
2388      PRICE_EMISSION(node,type_emission,type_tec,year_all) emission price (derived from marginals of EMISSION_BOUND constraint)
2389      COST_NODAL_NET(node,year_all)              system costs at the node level over time including effects of energy trade
2390      GDP(node,year_all)                         gross domestic product (GDP) in market exchange rates for MACRO reporting
2391  ;
2392   
2393  *----------------------------------------------------------------------------------------------------------------------*
2394  * auxiliary bounds on activity variables (debugging mode, avoid inter-vintage arbitrage, investment technology)                                                        *
2395  *----------------------------------------------------------------------------------------------------------------------*
2396   
2397  * include upper and lower bounds (to avoid unbounded models)
2398  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2399  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = -1e9 ;
2400  * ACT.up(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2401  *    AND map_tec_act(node,tec,year_all2,mode,time) ) = 1e9 ;
2402   
2403  * to avoid "inter-vintage arbitrage" (across different vintages of technologies), all activities that
2404  * have positive lower bounds are assumed to be non-negative
2405  ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2406      AND map_tec_act(node,tec,year_all2,mode,time) AND bound_activity_lo(node,tec,year_all2,mode,time) >= 0 ) = 0 ;
2407  * previous implementation using upper bounds
2408  * ACT.lo(node,tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,tec,year_all,year_all2)
2409  *    AND map_tec_act(node,tec,year_all2,mode,time)
2410  *    AND ( NOT bound_activity_up(node,tec,year_all2,mode,time)
2411  *        OR bound_activity_up(node,tec,year_all2,mode,time) >= 0 ) ) = 0 ;
2412   
2413  * assume that all "investment" technologies must have non-negative activity levels
2414  ACT.lo(node,inv_tec,year_all,year_all2,mode,time)$( map_tec_lifetime(node,inv_tec,year_all,year_all2)
2415      AND map_tec_act(node,inv_tec,year_all2,mode,time) ) = 0 ;
2416   
2417  *----------------------------------------------------------------------------------------------------------------------*
2418  * fixing variables to pre-specified values                                                                             *
2419  *----------------------------------------------------------------------------------------------------------------------*
2420   
2421  EXT.fx(node,commodity,grade,year_all)$( is_fixed_extraction(node,commodity,grade,year_all) ) =
2422      fixed_extraction(node,commodity,grade,year_all);
2423  STOCK.fx(node,commodity,level,year_all)$( is_fixed_stock(node,commodity,level,year_all) ) =
2424      fixed_stock(node,commodity,level,year_all) ;
2425  CAP_NEW.fx(node,tec,year_all)$( is_fixed_new_capacity(node,tec,year_all) ) =
2426      fixed_new_capacity(node,tec,year_all) ;
2427  CAP.fx(node,tec,vintage,year_all)$( is_fixed_capacity(node,tec,vintage,year_all) ) =
2428      fixed_capacity(node,tec,vintage,year_all) ;
2429  ACT.fx(node,tec,vintage,year_all,mode,time)$( is_fixed_activity(node,tec,vintage,year_all,mode,time) ) =
2430      fixed_activity(node,tec,vintage,year_all,mode,time) ;
2431  LAND.fx(node,land_scenario,year_all)$( is_fixed_land(node,land_scenario,year_all) ) =
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 48
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2432      fixed_land(node,land_scenario,year_all) ;
2433   
2434  *----------------------------------------------------------------------------------------------------------------------*
2435  * auxiliary variables for debugging mode (identifying infeasibilities)                                                 *
2436  *----------------------------------------------------------------------------------------------------------------------*
2437   
2438  * report mapping for debugging
2439  Set
2440      AUX_ACT_BOUND_UP(node,tec,year_all,year_all2,mode,time) indicator whether auxiliary upper bound on activity is binding
2441      AUX_ACT_BOUND_LO(node,tec,year_all,year_all2,mode,time) indicator whether auxiliary upper bound on activity is binding
2442  ;
2443   
2444  * slack variables for debugging
2445  Positive variables
2446      SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year_all,time) slack variable for commodity balance (upwards)
2447      SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year_all,time) slack variable for commodity balance (downwards)
2448      SLACK_CAP_NEW_BOUND_UP (node,tec,year_all)        slack variable for bound on new capacity (upwards)
2449      SLACK_CAP_NEW_BOUND_LO (node,tec,year_all)        slack variable for bound on new capacity (downwards)
2450      SLACK_CAP_TOTAL_BOUND_UP (node,tec,year_all)      slack variable for upper bound on total installed capacity
2451      SLACK_CAP_TOTAL_BOUND_LO (node,tec,year_all)      slack variable for lower bound on total installed capacity
2452      SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year_all)       slack variable for dynamic new capacity constraint (upwards)
2453      SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year_all)       slack variable for dynamic new capacity constraint (downwards)
2454      SLACK_ACT_BOUND_UP(node,tec,year_all,mode,time)   slack variable for upper bound on activity
2455      SLACK_ACT_BOUND_LO(node,tec,year_all,mode,time)   slack variable for lower bound on activity
2456      SLACK_ACT_DYNAMIC_UP(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (upwards)
2457      SLACK_ACT_DYNAMIC_LO(node,tec,year_all,time)      slack variable for dynamic activity constraint relaxation (downwards)
2458      SLACK_LAND_SCEN_UP(node,land_scenario,year_all)   slack variable for dynamic land scenario constraint relaxation (upwards)
2459      SLACK_LAND_SCEN_LO(node,land_scenario,year_all)   slack variable for dynamic land scenario constraint relaxation (downwards)
2460      SLACK_LAND_TYPE_UP(node,year_all,land_type)       slack variable for dynamic land type constraint relaxation (upwards)
2461      SLACK_LAND_TYPE_LO(node,year_all,land_type)       slack variable for dynamic land type constraint relaxation (downwards)
2462      SLACK_RELATION_BOUND_UP(relation,node,year_all)   slack variable for upper bound of generic relation
2463      SLACK_RELATION_BOUND_LO(relation,node,year_all)   slack variable for lower bound of generic relation
2464  ;
2465   
2466  *----------------------------------------------------------------------------------------------------------------------*
2467  * equation definitions                                                                                                 *
2468  *----------------------------------------------------------------------------------------------------------------------*
2469   
2470  Equations
2471      OBJECTIVE                       objective value of the optimisation problem
2472      CO2_CUM_DEF                     definition of total CO2 emission
2473      COST_CUM_DEF                    definition of the total cost
2474      COST_ACCOUNTING_NODAL           cost accounting at node level over time
2475      EXTRACTION_EQUIVALENCE          auxiliary equation to simplify the resource extraction formulation
2476      EXTRACTION_BOUND_UP             upper bound on extraction (by grade)
2477      RESOURCE_CONSTRAINT             constraint on resources remaining in each period (maximum extraction per period)
2478      RESOURCE_HORIZON                constraint on extraction over entire model horizon (resource volume in place)
2479      COMMODITY_BALANCE_GT            commodity supply greater than or equal demand
2480      COMMODITY_BALANCE_LT            commodity supply lower than or equal demand
2481      STOCKS_BALANCE                  commodity inter-temporal balance of stocks
2482      CAPACITY_CONSTRAINT             capacity constraint for technology (by sub-annual time slice)
2483      CAPACITY_MAINTENANCE_HIST       constraint for capactiy maintainance  historical installation (built before start of model horizon)
2484      CAPACITY_MAINTENANCE_NEW        constraint for capactiy maintainance of new capacity built in the current period (vintage == year)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 49
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2485      CAPACITY_MAINTENANCE            constraint for capacity maintainance over the technical lifetime
2486      OPERATION_CONSTRAINT            constraint on maximum yearly operation (scheduled down-time for maintainance)
2487      MIN_UTILIZATION_CONSTRAINT      constraint for minimum yearly operation (aggregated over the course of a year)
2488      RENEWABLES_POTENTIAL_CONSTRAINT constraint on renewable resource potential
2489      RENEWABLES_CAPACITY_REQUIREMENT lower bound on required overcapacity when using lower grade potentials
2490      RENEWABLES_EQUIVALENCE          equation to define the renewables extraction
2491      ADDON_ACTIVITY_UP               addon-technology activity upper constraint
2492      ADDON_ACTIVITY_LO               addon technology activity lower constraint
2493      COMMODITY_USE_LEVEL             aggregate use of commodity by level as defined by total input into technologies
2494      ACTIVITY_BY_RATING              constraint on auxiliary rating-specific activity variable by rating bin
2495      ACTIVITY_RATING_TOTAL           equivalence of auxiliary rating-specific activity variables to actual activity
2496      FIRM_CAPACITY_PROVISION         contribution of dispatchable technologies to auxilary firm-capacity variable
2497      SYSTEM_RELIABILITY_CONSTRAINT   constraint on total system reliability (firm capacity)
2498      SYSTEM_FLEXIBILITY_CONSTRAINT   constraint on total system flexibility
2499      NEW_CAPACITY_BOUND_UP           upper bound on technology capacity investment
2500      NEW_CAPACITY_BOUND_LO           lower bound on technology capacity investment
2501      TOTAL_CAPACITY_BOUND_UP         upper bound on total installed capacity
2502      TOTAL_CAPACITY_BOUND_LO         lower bound on total installed capacity
2503      NEW_CAPACITY_CONSTRAINT_UP      dynamic constraint for capacity investment (learning and spillovers upper bound)
2504      NEW_CAPACITY_SOFT_CONSTRAINT_UP bound on soft relaxation of dynamic new capacity constraints (upwards)
2505      NEW_CAPACITY_CONSTRAINT_LO      dynamic constraint on capacity investment (lower bound)
2506      NEW_CAPACITY_SOFT_CONSTRAINT_LO bound on soft relaxation of dynamic new capacity constraints (downwards)
2507      ACTIVITY_BOUND_UP               upper bound on activity summed over all vintages
2508      ACTIVITY_BOUND_LO               lower bound on activity summed over all vintages
2509      ACTIVITY_BOUND_ALL_MODES_UP     upper bound on activity summed over all vintages and modes
2510      ACTIVITY_BOUND_ALL_MODES_LO     lower bound on activity summed over all vintages and modes
2511      SHARE_CONSTRAINT_COMMODITY_UP   upper bounds on share constraints for commodities
2512      SHARE_CONSTRAINT_COMMODITY_LO   lower bounds on share constraints for commodities
2513      SHARE_CONSTRAINT_MODE_UP        upper bounds on share constraints for modes of a given technology
2514      SHARE_CONSTRAINT_MODE_LO        lower bounds on share constraints for modes of a given technology
2515      ACTIVITY_CONSTRAINT_UP          dynamic constraint on the market penetration of a tgeneric_share_factor_upechnology activity (upper bound)
2516      ACTIVITY_SOFT_CONSTRAINT_UP     bound on relaxation of the dynamic constraint on market penetration (upper bound)
2517      ACTIVITY_CONSTRAINT_LO          dynamic constraint on the market penetration of a technology activity (lower bound)
2518      ACTIVITY_SOFT_CONSTRAINT_LO     bound on relaxation of the dynamic constraint on market penetration (lower bound)
2519      EMISSION_EQUIVALENCE            auxiliary equation to simplify the notation of emissions
2520      EMISSION_CONSTRAINT             nodal-regional-global constraints on emissions (by category)
2521      LAND_CONSTRAINT                 constraint on total land use (linear combination of land scenarios adds up to 1)
2522      DYNAMIC_LAND_SCEN_CONSTRAINT_UP dynamic constraint on land scenario change (upper bound)
2523      DYNAMIC_LAND_SCEN_CONSTRAINT_LO dynamic constraint on land scenario change (lower bound)
2524      DYNAMIC_LAND_TYPE_CONSTRAINT_UP dynamic constraint on land-use change (upper bound)
2525      DYNAMIC_LAND_TYPE_CONSTRAINT_LO dynamic constraint on land-use change (lower bound)
2526      RELATION_EQUIVALENCE            auxiliary equation to simplify the implementation of relations
2527      RELATION_CONSTRAINT_UP          upper bound of relations (linear constraints)
2528      RELATION_CONSTRAINT_LO          lower bound of relations (linear constraints)
2529  ;
2530   
2531  *----------------------------------------------------------------------------------------------------------------------*
2532  * equation statements                                                                                                  *
2533  *----------------------------------------------------------------------------------------------------------------------*
2534   
2535  ***
2536  * Objective function
2537  * ------------------
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 50
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2538  *
2539  * The objective function of the |MESSAGEix| core model
2540  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2541  *
2542  * Equation OBJECTIVE
2543  * """"""""""""""""""
2544  *
2545  * The objective function (of the core model) minimizes total discounted systems costs including costs for emissions,
2546  * relaxations of dynamic constraints
2547  *
2548  * .. math::
2549  *    OBJ = \sum_{n,y \in Y^{M}} df\_year_{y} \cdot COST\_NODAL_{n,y}
2550  *
2551  ***
2552   
2553  COST_CUM_DEF..
2554      COST_CUM =E= SUM( (node,year), df_period(year) * COST_NODAL(node,year) ) ;
2555  CO2_CUM_DEF..
2556      CO2_CUM =E= SUM((node,emission,type_tec,year), EMISS(node,emission,type_tec,year)) ;
2557   
2558  $ontext
      CO2_CUM_DEF..
          CO2_CUM =E= SUM((type_emission,emission,type_tec,type_year)$(emission_scaling(type_emission,emission)
                 AND cat_year(type_year,year)),
                 emission_scaling(type_emission,emission)
                 *EMISS(node,emission,type_tec,year)) ;
2564  $offtext
2565  $ontext
      *text may help
      * emission taxes (by parent node, type of technology, type of year and type of emission)
          + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
                  AND cat_year(type_year,year) ),
              emission_scaling(type_emission,emission)
              * tax_emission(node,type_emission,type_tec,type_year)
              * EMISS(node,emission,type_tec,year) )
       *emission contraints       
          SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emission(type_emission,emission) ),
              duration_period(year_all2) * emission_scaling(type_emission,emission) *
                  ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
                      + historical_emission(node,emission,type_tec,year_all2) )
            )
          / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
           =L= bound_emission(node,type_emission,type_tec,type_year) ;
2581  $offtext   
2582  $ontext
      sum( (node,type_emission,type_tec,type_year) $ (SAMEAS(type_emission, 'GHGs') AND SAMEAS(type_year,'cumulative')),
               sum( (location,tec,year_all2,mode,time,emission)$( map_node(node,location) AND cat_tec(type_tec,tec)
                       AND cat_year(type_year,year_all2) AND cat_emission(type_emission,emission)
                       AND map_tec_act(location,tec,year_all2,mode,time) ) ,
                   duration_period(year_all2)
                   * emission_scaling(type_emission,emission) * emission_factor(location,tec,year_all2,mode,emission)
                   * ( sum(vintage$( map_tec_lifetime(location,tec,vintage,year_all2) AND year(year_all2) ),
                       ACT(location,tec,vintage,year_all2,mode,time) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 51
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


                   + historical_activity(location,tec,year_all2,mode,time)
                       )
                   )
               / sum(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
             )
      ;
2597  $offtext
2598  $ontext
      OBJECTIVE..
                 OBJ =E= SUM( (node,year), df_period(year) * COST_NODAL(node,year) ) ;
       
        OBJECTIVE..
                 OBJ =E= sum( (node,type_emission,type_tec,type_year) $ (SAMEAS(type_emission, 'GHGs') AND SAMEAS(type_year,'cumulative')),
               sum( (location,tec,year_all2,mode,time,emission)$( map_node(node,location) AND cat_tec(type_tec,tec)
                       AND cat_year(type_year,year_all2) AND cat_emission(type_emission,emission)
                       AND map_tec_act(location,tec,year_all2,mode,time) ) ,
                   duration_period(year_all2)
                   * emission_scaling(type_emission,emission) * emission_factor(location,tec,year_all2,mode,emission)
                   * ( sum(vintage$( map_tec_lifetime(location,tec,vintage,year_all2) AND year(year_all2) ),
                       ACT(location,tec,vintage,year_all2,mode,time) )
                   + historical_activity(location,tec,year_all2,mode,time)
                       )
                   )
               / sum(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
             )
      ;  
      *    EMI =E= SUM( (node,emission,type_tec,year), df_period(year) * SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
      *           AND cat_year(type_year,year)* EMISS(node,emission,type_tec,year) ),
          
      *    EMISS(node,emission,type_tec,year)
      * emissions from technology activity
      *       SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
      *            AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifetime(location,tec,vintage,year) ),
      *        emission_factor(location,tec,vintage,year,mode,emission) * ACT(location,tec,vintage,year,mode,time) )
      ***
2626  $offtext
2627  OBJECTIVE..
2628       OBJ =E= COST_CUM ;
2629  *    OBJ =E= CO2_CUM ;
2630   
2631   
2632   
2633  ***
2634   
2635  * Regional system cost accounting function
2636  * ----------------------------------------
2637  *
2638  * Accounting of regional system costs over time
2639  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2640  *
2641  * Equation COST_ACCOUNTING_NODAL
2642  * """"""""""""""""""""""""""""""
2643  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 52
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2644  * Accounting of regional systems costs over time as well as costs for emissions (taxes),
2645  * land use (from the model land-use model emulator), relaxations of dynamic constraints,
2646  * and linear relations.
2647  *
2648  * .. math::
2649  *    COST\_NODAL_{n,y} & = \sum_{c,g} \ resource\_cost_{n,c,g,y} \cdot EXT_{n,c,g,y} \\
2650  *      & + \sum_{t} \
2651  *          \bigg( inv\_cost_{n,t,y} \cdot construction\_time\_factor_{n,t,y} \\
2652  *      & \quad \quad \quad \cdot end\_of\_horizon\_factor_{n,t,y} \cdot CAP\_NEW_{n,t,y} \\[4 pt]
2653  *      & \quad \quad + \sum_{y^V \leq y} \ fix\_cost_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y} \\
2654  *      & \quad \quad + \sum_{\substack{y^V \leq y \\ m,h}} \ var\_cost_{n,t,y^V,y,m,h} \cdot ACT_{n,t,y^V,y,m,h} \\
2655  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_up_{n,t,y} \\
2656  *      & \quad \quad \quad
2657  *          + level\_cost\_new\_capacity\_soft\_up_{n,t,y} \cdot\ inv\_cost_{n,t,y}
2658  *          \Big) \cdot CAP\_NEW\_UP_{n,t,y} \\[4pt]
2659  *      & \quad \quad + \Big( abs\_cost\_new\_capacity\_soft\_lo_{n,t,y} \\
2660  *      & \quad \quad \quad
2661  *          + level\_cost\_new\_capacity\_soft\_lo_{n,t,y} \cdot\ inv\_cost_{n,t,y}
2662  *          \Big) \cdot CAP\_NEW\_LO_{n,t,y} \\[4pt]
2663  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_up_{n,t,y,m,h} \\
2664  *      & \quad \quad \quad
2665  *          + level\_cost\_activity\_soft\_up_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
2666  *          \Big) \cdot ACT\_UP_{n,t,y,h} \\
2667  *      & \quad \quad + \sum_{m,h} \ \Big( abs\_cost\_activity\_soft\_lo_{n,t,y,m,h} \\
2668  *      & \quad \quad \quad
2669  *          + level\_cost\_activity\_soft\_lo_{n,t,y,m,h} \cdot\ levelized\_cost_{n,t,y,m,h}
2670  *          \Big) \cdot ACT\_LO_{n,t,y,h} \bigg) \\
2671  *      & + \sum_{\substack{\widehat{e},\widehat{t} \\ e \in E(\widehat{e})}}
2672  *            emission\_scaling_{\widehat{e},e} \cdot \ emission\_tax_{n,\widehat{e},\widehat{t},y}
2673  *            \cdot EMISS_{n,e,\widehat{t},y} \\
2674  *      & + \sum_{s} land\_cost_{n,s,y} \cdot LAND_{n,s,y} \\
2675  *      & + \sum_{r} relation\_cost_{r,n,y} \cdot REL_{r,n,y}
2676  ***
2677   
2678  COST_ACCOUNTING_NODAL(node, year)..
2679      COST_NODAL(node, year) =E=
2680  * resource extration costs
2681      SUM((commodity,grade)$( map_resource(node,commodity,grade,year) ),
2682           resource_cost(node,commodity,grade,year) * EXT(node,commodity,grade,year) )
2683  * technology capacity investment, maintainance, operational cost
2684      + SUM((tec)$( map_tec(node,tec,year) ),
2685              ( inv_cost(node,tec,year) * construction_time_factor(node,tec,year)
2686                  * end_of_horizon_factor(node,tec,year) * CAP_NEW(node,tec,year)
2687              + SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ),
2688                  fix_cost(node,tec,vintage,year) * CAP(node,tec,vintage,year) ) )$( inv_tec(tec) )
2689              + SUM((vintage,mode,time)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
2690                  var_cost(node,tec,vintage,year,mode,time) * ACT(node,tec,vintage,year,mode,time) )
2691              )
2692  * additional cost terms (penalty) for relaxation of 'soft' dynamic new capacity constraints
2693      + SUM((inv_tec)$( map_tec(node,inv_tec,year) ),
2694          SUM((mode,time)$map_tec_act(node,inv_tec,year,mode,time),
2695              ( ( abs_cost_new_capacity_soft_up(node,inv_tec,year)
2696                  + level_cost_new_capacity_soft_up(node,inv_tec,year) * inv_cost(node,inv_tec,year)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 53
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2697                  ) * CAP_NEW_UP(node,inv_tec,year) )$( soft_new_capacity_up(node,inv_tec,year) )
2698              + ( ( abs_cost_new_capacity_soft_lo(node,inv_tec,year)
2699                  + level_cost_new_capacity_soft_lo(node,inv_tec,year) * inv_cost(node,inv_tec,year)
2700                  ) * CAP_NEW_LO(node,inv_tec,year) )$( soft_new_capacity_lo(node,inv_tec,year) )
2701              )
2702          )
2703  * additional cost terms (penalty) for relaxation of 'soft' dynamic activity constraints
2704      + SUM((tec)$( map_tec(node,tec,year) ),
2705          SUM(time$( map_tec_time(node,tec,year,time) ),
2706              ( ( abs_cost_activity_soft_up(node,tec,year,time)
2707                  + level_cost_activity_soft_up(node,tec,year,time) * levelized_cost(node,tec,year,time)
2708                  ) * ACT_UP(node,tec,year,time) )$( soft_activity_up(node,tec,year,time) )
2709              + ( ( abs_cost_activity_soft_lo(node,tec,year,time)
2710                  + level_cost_activity_soft_lo(node,tec,year,time)  * levelized_cost(node,tec,year,time)
2711                  ) * ACT_LO(node,tec,year,time) )$( soft_activity_lo(node,tec,year,time) )
2712              )
2713          )
2714  * emission taxes (by parent node, type of technology, type of year and type of emission)
2715      + SUM((type_emission,emission,type_tec,type_year)$( emission_scaling(type_emission,emission)
2716              AND cat_year(type_year,year) ),
2717          emission_scaling(type_emission,emission)
2718          * tax_emission(node,type_emission,type_tec,type_year)
2719          * EMISS(node,emission,type_tec,year) )
2720  * cost terms from land-use model emulator (only includes valid node-land_scenario-year combinations)
2721      + SUM(land_scenario$( land_cost(node,land_scenario,year) ),
2722          land_cost(node,land_scenario,year) * LAND(node,land_scenario,year) )
2723  * cost terms associated with linear relations
2724      + SUM(relation$( relation_cost(relation,node,year) ),
2725          relation_cost(relation,node,year) * REL(relation,node,year) )
2726  * implementation of slack variables for constraints to aid in debugging
2727      + SUM((commodity,level,time)$( map_commodity(node,commodity,level,year,time) ), ( 0
2728  *   + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2729  *   + SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2730          ) * 1e6 )
2731      + SUM((tec)$( map_tec(node,tec,year) ), ( 0
2732  *    + 10 * SLACK_CAP_NEW_BOUND_UP(node,tec,year)
2733  *    + 10 * SLACK_CAP_NEW_BOUND_LO(node,tec,year)
2734  *  + 10 * SLACK_CAP_NEW_DYNAMIC_UP(node,tec,year)
2735  *  + 10 * SLACK_CAP_NEW_DYNAMIC_LO(node,tec,year)
2736  *  + 10 * SLACK_CAP_TOTAL_BOUND_UP(node,tec,year)
2737  *  + 10 * SLACK_CAP_TOTAL_BOUND_LO(node,tec,year)
2738          ) * ABS( 1000 + inv_cost(node,tec,year) ) )
2739      + SUM((tec,time)$( map_tec_time(node,tec,year,time) ), ( 0
2740  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_UP(node,tec,year,mode,time) )
2741  *   + 10 * SUM(mode$( map_tec_act(node,tec,year,mode,time) ), SLACK_ACT_BOUND_LO(node,tec,year,mode,time) )
2742  * + 10 * SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
2743  * + 10 * SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
2744          ) * ( 1e8
2745              + ABS( SUM(mode$map_tec_act(node,tec,year,mode,time), var_cost(node,tec,year,year,mode,time) ) )
2746              + fix_cost(node,tec,year,year) ) )
2747      + SUM(land_scenario, 0
2748  * + 1e6 * SLACK_LAND_SCEN_UP(node,land_scenario,year)
2749  * + 1e6 * SLACK_LAND_SCEN_LO(node,land_scenario,year)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 54
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2750          )
2751      + SUM(land_type, 0
2752  * + 1e6 * SLACK_LAND_TYPE_UP(node,year,land_type)
2753  * + 1e6 * SLACK_LAND_TYPE_LO(node,year,land_type)
2754          )
2755      + SUM((relation), 0
2756  * + 1e6 * SLACK_RELATION_BOUND_UP(relation,node,year)$( is_relation_upper(relation,node,year) )
2757  * + 1e6 * SLACK_RELATION_BOUND_LO(relation,node,year)$( is_relation_lower(relation,node,year) )
2758          )
2759  ;
2760   
2761  ***
2762  * Here, :math:`n^L \in N(n)` are all nodes :math:`n^L` that are sub-nodes of node :math:`n`.
2763  * The subset of technologies :math:`t \in T(\widehat{t})` are all tecs that belong to category :math:`\widehat{t}`,
2764  * and similar notation is used for emissions :math:`e \in E`.
2765  ***
2766   
2767  *----------------------------------------------------------------------------------------------------------------------*
2768  ***
2769  * Resource and commodity section
2770  * ------------------------------
2771  *
2772  * Constraints on resource extraction
2773  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2774  *
2775  * Equation EXTRACTION_EQUIVALENCE
2776  * """""""""""""""""""""""""""""""
2777  *
2778  * This constraint translates the quantity of resources extracted (summed over all grades) to the input used by
2779  * all technologies (drawing from that node). It is introduced to simplify subsequent notation in input/output relations
2780  * and nodal balance constraints.
2781  *
2782  *  .. math::
2783  *     \sum_{g} EXT_{n,c,g,y} =
2784  *     \sum_{\substack{n^L,t,m,h,h^{OD} \\ y^V \leq y  \\ \ l \in L^{RES} \subseteq L }}
2785  *         input_{n^L,t,y^V,y,m,n,c,l,h,h^{OD}} \cdot ACT_{n^L,t,m,y,h}
2786  *
2787  * The set :math:`L^{RES} \subseteq L` denotes all levels for which the detailed representation of resources applies.
2788  ***
2789  EXTRACTION_EQUIVALENCE(node,commodity,year)..
2790      SUM(grade$( map_resource(node,commodity,grade,year) ), EXT(node,commodity,grade,year) )
2791      =G= SUM((location,tec,vintage,mode,level_resource,time_act,time_od)$( map_tec_act(node,tec,year,mode,time_act)
2792              AND map_tec_lifetime(node,tec,vintage,year) ),
2793          input(location,tec,vintage,year,mode,node,commodity,level_resource,time_act,time_od)
2794          * ACT(location,tec,vintage,year,mode,time_act) ) ;
2795   
2796  ***
2797  * Equation EXTRACTION_BOUND_UP
2798  * """"""""""""""""""""""""""""
2799  *
2800  * This constraint specifies an upper bound on resource extraction by grade.
2801  *
2802  *  .. math::
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 55
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2803  *     EXT_{n,c,g,y} \leq bound\_extraction\_up_{n,c,g,y}
2804  *
2805  ***
2806  EXTRACTION_BOUND_UP(node,commodity,grade,year)$( map_resource(node,commodity,grade,year)
2807          AND is_bound_extraction_up(node,commodity,grade,year) )..
2808      EXT(node,commodity,grade,year) =L= bound_extraction_up(node,commodity,grade,year) ;
2809   
2810  ***
2811  * Equation RESOURCE_CONSTRAINT
2812  * """"""""""""""""""""""""""""
2813  *
2814  * This constraint restricts that resource extraction in a year guarantees the "remaining resources" constraint,
2815  * i.e., only a given fraction of remaining resources can be extracted per year.
2816  *
2817  *  .. math::
2818  *     EXT_{n,c,g,y} \leq
2819  *     resource\_remaining_{n,c,g,y} \cdot
2820  *         \Big( & resource\_volume_{n,c,g} \\
2821  *               & - \sum_{y' < y} duration\_period_{y'} \cdot EXT_{n,c,g,y'} \Big)
2822  *
2823  ***
2824  RESOURCE_CONSTRAINT(node,commodity,grade,year)$( map_resource(node,commodity,grade,year)
2825          AND resource_remaining(node,commodity,grade,year) )..
2826  * extraction per year
2827      EXT(node,commodity,grade,year) =L=
2828  * remaining resources multiplied by remaining-resources-factor
2829      resource_remaining(node,commodity,grade,year)
2830      * ( resource_volume(node,commodity,grade)
2831          - SUM(year2$( year_order(year2) < year_order(year) ),
2832              duration_period(year2) * EXT(node,commodity,grade,year2) ) ) ;
2833   
2834  ***
2835  * Equation RESOURCE_HORIZON
2836  * """""""""""""""""""""""""
2837  * This constraint ensures that total resource extraction over the model horizon does not exceed the available resources.
2838  *
2839  *  .. math::
2840  *     \sum_{y} duration\_period_{y} \cdot EXT_{n,c,g,y} \leq  resource\_volume_{n,c,g}
2841  *
2842  ***
2843  RESOURCE_HORIZON(node,commodity,grade)$( SUM(year$map_resource(node,commodity,grade,year), 1 ) )..
2844      SUM(year, duration_period(year) * EXT(node,commodity,grade,year) ) =L= resource_volume(node,commodity,grade) ;
2845   
2846  *----------------------------------------------------------------------------------------------------------------------*
2847  ***
2848  * Constraints on commodities and stocks
2849  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2850  *
2851  * Auxiliary COMMODITY_BALANCE
2852  * """""""""""""""""""""""""""
2853  * For the commodity balance constraints below, we introduce an auxiliary `COMMODITY_BALANCE`. This is implemented
2854  * as a GAMS `$macro` function.
2855  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 56
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2856  *  .. math::
2857  *     \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} output_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2858  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,y^V,y,m,h^A} \\
2859  *     - \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} input_{n^L,t,y^V,y,m,n,c,l,h^A,h}
2860  *         \cdot duration\_time\_rel_{h,h^A} \cdot & ACT_{n^L,t,m,y,h^A} \\
2861  *     + \ STOCK\_CHG_{n,c,l,y,h} & \\[4pt]
2862  *     + \ \sum_s \Big( land\_output_{n,s,y,c,l,h} - land\_input_{n,s,y,c,l,h} \Big) \cdot & LAND_{n,s,y} \\[4pt]
2863  *     - \ demand\_fixed_{n,c,l,y,h}
2864  *     & = COMMODITY\_BALANCE{n,c,l,y,h} \quad \forall \ l \notin (L^{RES}, l^{REN} \subseteq L
2865  *
2866  * The commodity balance constraint at the resource level is included in the `Equation RESOURCE_CONSTRAINT`_,
2867  * while at the renewable level, it is included in the `Equation RENEWABLES_EQUIVALENCE`_.
2868  ***
2869  $macro COMMODITY_BALANCE(node,commodity,level,year,time) (                                                             \
2870      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 \
2871              AND map_tec_lifetime(location,tec,vintage,year) ),                                                         \
2872  * import into node and output by all technologies located at 'location' sending to 'node' and 'time2' sending to 'time'
2873          output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         \
2874          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                                    \
2875  * export from node and input into technologies located at 'location' taking from 'node' and 'time2' taking from 'time'
2876          - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        \
2877          * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  \
2878  * quantity taken out from ( >0 ) or put into ( <0 ) inter-period stock (storage)
2879      + STOCK_CHG(node,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              \
2880  * yield from land-use model emulator
2881      + SUM(land_scenario,                                                                                               \
2882          ( land_output(node,land_scenario,year,commodity,level,time)                                                    \
2883            - land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node,land_scenario,year) )               \
2884  * final demand (exogenous parameter to be satisfied by the commodity system)
2885      - demand_fixed(node,commodity,level,year,time)                                                                     \
2886      )$( map_commodity(node,commodity,level,year,time) AND NOT level_resource(level) AND NOT level_renewable(level) )
2887   
2888  ***
2889  * Equation COMMODITY_BALANCE_GT
2890  * """""""""""""""""""""""""""""
2891  * This constraint ensures that supply is greater or equal than demand for every commodity-level combination.
2892  *
2893  *  .. math::
2894  *     COMMODITY\_BALANCE_{n,c,l,y,h} \geq 0
2895  *
2896  ***
2897  COMMODITY_BALANCE_GT(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2898          AND NOT level_resource(level) AND NOT level_renewable(level) )..
2899      (                                                             SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 AND map_tec_lifetime(location,tec,vintage,year) ),                  
                                             output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                        
                  - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  + STOCK_CHG(nod
      e,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              + SUM(land_scenario,                                                                                               ( land_output(node,land_scenario,y
      ear,commodity,level,time)                                                    - land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node,land_scenario,year) )               - demand_fixed(node,commodity,level,year,time)                 
                                                          )$( map_commodity(node,commodity,level,year,time) AND NOT level_resource(level) AND NOT level_renewable(level) )
2900  * relaxation of constraints for debugging
2901  * + SLACK_COMMODITY_EQUIVALENCE_UP(node,commodity,level,year,time)
2902       =G= 0 ;
2903   
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 57
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2904  ***
2905  * Equation COMMODITY_BALANCE_LT
2906  * """""""""""""""""""""""""""""
2907  * This constraint ensures the supply is smaller than or equal to the demand for all commodity-level combinatio
2908  * given in the :math:`balance\_equality_{c,l}`. In combination withe constraint above, it ensures that supply
2909  * is (exactly) equal to demand.
2910  *
2911  *  .. math::
2912  *     COMMODITY\_BALANCE_{n,c,l,y,h} \leq 0
2913  *
2914  ***
2915  COMMODITY_BALANCE_LT(node,commodity,level,year,time)$( map_commodity(node,commodity,level,year,time)
2916          AND NOT level_resource(level) AND NOT level_renewable(level)
2917          AND balance_equality(commodity,level) )..
2918      (                                                             SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)                                 AND map_tec_lifetime(location,tec,vintage,year) ),                  
                                             output(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                         * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2)                        
                  - input(location,tec,vintage,year,mode,node,commodity,level,time2,time)                                        * duration_time_rel(time,time2) * ACT(location,tec,vintage,year,mode,time2) )                                  + STOCK_CHG(nod
      e,commodity,level,year,time)$( map_stocks(node,commodity,level,year) )                              + SUM(land_scenario,                                                                                               ( land_output(node,land_scenario,y
      ear,commodity,level,time)                                                    - land_input(node,land_scenario,year,commodity,level,time) ) * LAND(node,land_scenario,year) )               - demand_fixed(node,commodity,level,year,time)                 
                                                          )$( map_commodity(node,commodity,level,year,time) AND NOT level_resource(level) AND NOT level_renewable(level) )
2919  * relaxation of constraints for debugging
2920  * - SLACK_COMMODITY_EQUIVALENCE_LO(node,commodity,level,year,time)
2921      =L= 0 ;
2922   
2923  ***
2924  * Equation STOCKS_BALANCE
2925  * """""""""""""""""""""""
2926  * This constraint ensures the inter-temporal balance of commodity stocks.
2927  * The parameter :math:`commodity\_stocks_{n,c,l}` can be used to model exogenous additions to the stock
2928  *
2929  *  .. math::
2930  *     STOCK_{n,c,l,y} + commodity\_stock_{n,c,l,y} =
2931  *         duration\_period_{y} \cdot & \sum_{h} STOCK\_CHG_{n,c,l,y,h} \\
2932  *                                    & + STOCK_{n,c,l,y+1}
2933  *
2934  ***
2935  STOCKS_BALANCE(node,commodity,level,year)$( map_stocks(node,commodity,level,year) )..
2936      STOCK(node,commodity,level,year)$( NOT first_period(year) )
2937      + commodity_stock(node,commodity,level,year) =E=
2938      duration_period(year) * SUM(time$( map_commodity(node,commodity,level,year,time) ),
2939           STOCK_CHG(node,commodity,level,year,time) )
2940      + SUM(year2$( seq_period(year,year2) ), STOCK(node,commodity,level,year2) ) ;
2941   
2942  *----------------------------------------------------------------------------------------------------------------------*
2943  ***
2944  * Technology section
2945  * ------------------
2946  *
2947  * Technical and engineering constraints
2948  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2949  * The first set of constraints concern technologies that have explicit investment decisions
2950  * and where installed/maintained capacity is relevant for operational decisions.
2951  * The set where :math:`T^{INV} \subseteq T` is the set of all these technologies.
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 58
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


2952   
2953  *
2954  * Equation CAPACITY_CONSTRAINT
2955  * """"""""""""""""""""""""""""
2956  * This constraint ensures that the actual activity of a technology at a node cannot exceed available (maintained)
2957  * capacity summed over all vintages, including the technology capacity factor :math:`capacity\_factor_{n,t,y,t}`.
2958  *
2959  *  .. math::
2960  *     \sum_{m} ACT_{n,t,y^V,y,m,h}
2961  *         \leq duration\_time_{h} \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^V,y}
2962  *         \quad \forall \ t \ \in \ T^{INV}
2963  *
2964  ***
2965  CAPACITY_CONSTRAINT(node,inv_tec,vintage,year,time)$( map_tec_time(node,inv_tec,year,time)
2966          AND map_tec_lifetime(node,inv_tec,vintage,year) )..
2967      SUM(mode$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) )
2968          =L= duration_time(time) * capacity_factor(node,inv_tec,vintage,year,time) * CAP(node,inv_tec,vintage,year) ;
2969   
2970  ***
2971  * Equation CAPACITY_MAINTENANCE_HIST
2972  * """"""""""""""""""""""""""""""""""
2973  * The following three constraints implement technology capacity maintenance over time to allow early retirment.
2974  * The optimization problem determines the optimal timing of retirement, when fixed operation-and-maintenance costs
2975  * exceed the benefit in the objective function.
2976  *
2977  * The first constraint ensures that historical capacity (built prior to the model horizon) is available
2978  * as installed capacity in the first model period.
2979  *
2980  *   .. math::
2981  *      CAP_{n,t,y^V,'first\_period'} & \leq
2982  *          remaining\_capacity_{n,t,y^V,'first\_period'} \cdot
2983  *          duration\_period_{y^V} \cdot
2984  *          historical\_new\_capacity_{n,t,y^V} \\
2985  *      & \text{if } y^V  < 'first\_period' \text{ and } |y| - |y^V| < technical\_lifetime_{n,t,y^V}
2986  *      \quad \forall \ t \in T^{INV}
2987  *
2988  ***
2989  CAPACITY_MAINTENANCE_HIST(node,inv_tec,vintage,first_period)$( map_tec_lifetime(node,inv_tec,vintage,first_period)
2990          AND historical(vintage))..
2991      CAP(node,inv_tec,vintage,first_period)
2992      =L= remaining_capacity(node,inv_tec,vintage,first_period) *
2993          duration_period(vintage) * historical_new_capacity(node,inv_tec,vintage) ;
2994   
2995  ***
2996  * Equation CAPACITY_MAINTENANCE_NEW
2997  * """""""""""""""""""""""""""""""""
2998  * The second constraint ensures that capacity is fully maintained throughout the model period
2999  * in which it was constructed (no early retirement in the period of construction).
3000  *
3001  *   .. math::
3002  *      CAP_{n,t,y^V,y^V} =
3003  *          remaining\_capacity_{n,t,y^V,y^V} \cdot
3004  *          duration\_period_{y^V} \cdot
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 59
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3005  *          CAP\_NEW{n,t,y^V}
3006  *      \quad \forall \ t \in T^{INV}
3007  *
3008  * The current formulation does not account for construction time in the constraints, but only adds a mark-up
3009  * to the investment costs in the objective function.
3010  ***
3011  CAPACITY_MAINTENANCE_NEW(node,inv_tec,vintage,vintage)$( map_tec_lifetime(node,inv_tec,vintage,vintage) )..
3012      CAP(node,inv_tec,vintage,vintage)
3013      =E= remaining_capacity(node,inv_tec,vintage,vintage)
3014          * duration_period(vintage) * CAP_NEW(node,inv_tec,vintage) ;
3015   
3016  ***
3017  * Equation CAPACITY_MAINTENANCE
3018  * """""""""""""""""""""""""""""
3019  * The third constraint implements the dynamics of capacity maintenance throughout the model horizon.
3020  * Installed capacity can be maintained over time until decommissioning, which is irreversible.
3021  *
3022  *   .. math::
3023  *      CAP_{n,t,y^V,y} & \leq
3024  *          remaining\_capacity_{n,t,y^V,y} \cdot
3025  *          CAP_{n,t,y^V,y-1} \\
3026  *      \quad & \text{if } y > y^V \text{ and } y^V  > 'first\_period' \text{ and } |y| - |y^V| < technical\_lifetime_{n,t,y^V}
3027  *      \quad \forall \ t \in T^{INV}
3028  *
3029  ***
3030  CAPACITY_MAINTENANCE(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
3031          AND NOT first_period(year) AND year_order(vintage) < year_order(year))..
3032      CAP(node,inv_tec,vintage,year)
3033      =L= remaining_capacity(node,inv_tec,vintage,year) *
3034          ( SUM(year2$( seq_period(year2,year) ),
3035                CAP(node,inv_tec,vintage,year2) ) ) ;
3036   
3037  ***
3038  * Equation OPERATION_CONSTRAINT
3039  * """""""""""""""""""""""""""""
3040  * This constraint provides an upper bound on the total operation of installed capacity over a year.
3041  * It can be used to represent reuqired scheduled unavailability of installed capacity.
3042  *
3043  *   .. math::
3044  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h}
3045  *          \leq operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,y^V,y,m,\text{'year'}} \cdot CAP_{n,t,y^V,y}
3046  *      \quad \forall \ t \in T^{INV}
3047  *
3048  * This constraint is only active if :math:`operation\_factor_{n,t,y^V,y} < 1`.
3049  ***
3050  OPERATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
3051          AND operation_factor(node,inv_tec,vintage,year) < 1 )..
3052      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =L=
3053          operation_factor(node,inv_tec,vintage,year) * capacity_factor(node,inv_tec,vintage,year,'year')
3054          * CAP(node,inv_tec,vintage,year) ;
3055   
3056  ***
3057  * Equation MIN_UTILIZATION_CONSTRAINT
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 60
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3058  * """""""""""""""""""""""""""""""""""
3059  * This constraint provides a lower bound on the total utilization of installed capacity over a year.
3060  *
3061  *   .. math::
3062  *      \sum_{m,h} ACT_{n,t,y^V,y,m,h} \geq min\_utilization\_factor_{n,t,y^V,y} \cdot CAP_{n,t,y^V,y}
3063  *      \quad \forall \ t \in T^{INV}
3064  *
3065  * This constraint is only active if :math:`min\_utilization\_factor_{n,t,y^V,y}` is defined.
3066  ***
3067  MIN_UTILIZATION_CONSTRAINT(node,inv_tec,vintage,year)$( map_tec_lifetime(node,inv_tec,vintage,year)
3068          AND min_utilization_factor(node,inv_tec,vintage,year) )..
3069      SUM((mode,time)$( map_tec_act(node,inv_tec,year,mode,time) ), ACT(node,inv_tec,vintage,year,mode,time) ) =G=
3070          min_utilization_factor(node,inv_tec,vintage,year) * CAP(node,inv_tec,vintage,year) ;
3071   
3072  *----------------------------------------------------------------------------------------------------------------------*
3073  ***
3074  * Constraints representing renewable integration
3075  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3076  *
3077  * Equation RENEWABLES_EQUIVALENCE
3078  * """""""""""""""""""""""""""""""
3079  * This constraint defines the auxiliary variables :math:`REN`
3080  * to be equal to the output of renewable technologies (summed over grades).
3081  *
3082  *  .. math::
3083  *     \sum_{g} REN_{n,t,c,g,y,h} \leq
3084  *     \sum_{\substack{n,t,m,l,h,h^{OD} \\ y^V \leq y  \\ \ l \in L^{REN} \subseteq L }}
3085  *         input_{n^L,t,y^V,y,m,n,c,l,h,h^{OD}} \cdot ACT_{n^L,t,m,y,h}
3086  *
3087  * The set :math:`L^{REN} \subseteq L` denotes all levels for which the detailed representation of renewables applies.
3088  ***
3089  RENEWABLES_EQUIVALENCE(node,renewable_tec,commodity,year,time)$(
3090          map_tec(node,renewable_tec,year) AND map_ren_com(node,renewable_tec,commodity,year) )..
3091      SUM(grade$( map_ren_grade(node,commodity,grade,year) ), REN(node,renewable_tec,commodity,grade,year,time) )
3092      =E= SUM((location,vintage,mode,level_renewable,time_act)$(
3093                   map_tec_act(node,renewable_tec,year,mode,time)
3094                   AND map_tec_lifetime(node,renewable_tec,vintage,year) ),
3095          input(location,renewable_tec,vintage,year,mode,node,commodity,level_renewable,time_act,time)
3096          * ACT(location,renewable_tec,vintage,year,mode,time) ) ;
3097   
3098  ***
3099  * Equation RENEWABLES_POTENTIAL_CONSTRAINT
3100  * """"""""""""""""""""""""""""""""""""""""
3101  * This constraint sets the potential potential by grade as the upper bound for the auxiliary variable :math:`REN`.
3102  *
3103  *  .. math::
3104  *     \sum_{\substack{t,h \\ \ t \in T^{R} \subseteq t }} REN_{n,t,c,g,y,h}
3105  *         \leq \sum_{\substack{l \\ l \in L^{R} \subseteq L }} renewable\_potential_{n,c,g,l,y}
3106  *
3107  ***
3108  RENEWABLES_POTENTIAL_CONSTRAINT(node,commodity,grade,year)$( map_ren_grade(node,commodity,grade,year) )..
3109      SUM((renewable_tec,time)$( map_ren_com(node,renewable_tec,commodity,year) ),
3110          REN(node,renewable_tec,commodity,grade,year,time) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 61
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3111      =L= SUM(level_renewable, renewable_potential(node,commodity,grade,level_renewable,year) ) ;
3112   
3113  ***
3114  * Equation RENEWABLES_CAPACITY_REQUIREMENT
3115  * """"""""""""""""""""""""""""""""""""""""
3116  * This constraint connects the capacity factor of a renewable grade to the
3117  * installed capacity of a technology. It sets the lower limit for the capacity
3118  * of a renewable technology to the summed activity over all grades (REN) devided
3119  * by the capactiy factor of this grade.
3120  * It represents the fact that different renewable grades require different installed
3121  * capacities to provide their full potential.
3122  *
3123  *  .. math::
3124  *     \sum_{y^V, h} & CAP_{n,t,y^V,y} \cdot operation\_factor_{n,t,y^V,y} \cdot capacity\_factor_{n,t,y^V,y,h} \\
3125  *        & \quad \geq \sum_{g,h,l} \frac{1}{renewable\_capacity\_factor_{n,c,g,l,y}} \cdot REN_{n,t,c,g,y,h}
3126  *
3127  * This constraint is only active if :math:`renewable\_capacity\_factor_{n,c,g,l,y}` is defined.
3128  ***
3129  RENEWABLES_CAPACITY_REQUIREMENT(node,inv_tec,commodity,year)$(
3130          SUM( (vintage,mode,time,grade,level_renewable),
3131              map_tec_lifetime(node,inv_tec,vintage,year) AND map_tec_act(node,inv_tec,year,mode,time)
3132              AND map_ren_com(node,inv_tec,commodity,year)
3133              AND renewable_capacity_factor(node,commodity,grade,level_renewable,year) > 0 ) )..
3134      SUM( (vintage,time)$map_ren_com(node,inv_tec,commodity,year),
3135          CAP(node,inv_tec,vintage,year)
3136          * operation_factor(node,inv_tec,vintage,year)
3137          * capacity_factor(node,inv_tec,vintage,year,time) )
3138      =G= SUM((grade,time,level_renewable)$(renewable_capacity_factor(node,commodity,grade,level_renewable,year) > 0),
3139              REN(node,inv_tec,commodity,grade,year,time)
3140                   / renewable_capacity_factor(node,commodity,grade,level_renewable,year)) ;
3141   
3142  *----------------------------------------------------------------------------------------------------------------------*
3143  ***
3144  * Constraints for addon technologies
3145  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3146  *
3147  * Equation ADDON_ACTIVITY_UP
3148  * """"""""""""""""""""""""""
3149  * This constraint provides an upper bound on the activity of an addon technology that can only be operated
3150  * jointly with a parent technology (e.g., abatement option, SO2 scrubber, power plant cooling technology).
3151  *
3152  *   .. math::
3153  *      \sum_{\substack{t' \sim t^A, y^V \leq y}} ACT_{n,t',y^V,y,m,h}
3154  *      \leq
3155  *      \sum_{\substack{t, y^V \leq y}}
3156  *          addon\_up_{n,t^a,y,m,h,t^A} \cdot
3157  *          addon\_conversion_{n,t',y^V,y,m,h} \cdot
3158  *          ACT_{n,t,y^V,y,m,h}
3159  *
3160  ***
3161  ADDON_ACTIVITY_UP(node,type_addon,year,mode,time)..
3162  * activity of addon technology
3163      sum( (addon,vintage)$(
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 62
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3164              cat_addon(type_addon,addon) AND
3165              map_tec_act(node,addon,year,mode,time) AND
3166              map_tec_lifetime(node,addon,vintage,year) ),
3167          ACT(node,addon,vintage,year,mode,time) )
3168      =L=
3169  * activity of corresponding parent-technology multiplied by upper bound of share
3170        sum((tec,vintage)$(
3171            map_tec_addon(tec,type_addon) AND
3172            map_tec_act(node,tec,year,mode,time) AND
3173            map_tec_lifetime(node,tec,vintage,year)
3174        ),
3175            addon_up(node,tec,year,mode,time,type_addon)
3176            * addon_conversion(node,tec,vintage,year,mode,time,type_addon)
3177            * ACT(node,tec,vintage,year,mode,time) )
3178  ;
3179   
3180  ***
3181  * Equation ADDON_ACTIVITY_LO
3182  * """"""""""""""""""""""""""
3183  * This constraint provides a lower bound on the activity of an addon technology that has to be operated
3184  * jointly with a parent technology (e.g., power plant cooling technology). The parameter `addon_lo` allows to define
3185  * a minimum level of operation of addon technologies relative to the activity of the parent technology.
3186  * If `addon_minimum = 1`, this means that it is mandatory to operate the addon technology at the same level as the
3187  * parent technology (i.e., full mitigation).
3188  *
3189  *   .. math::
3190  *      \sum_{\substack{t' \sim t^A, y^V \leq y}} ACT_{n,t',y^V,y,m,h}
3191  *      \geq
3192  *      \sum_{\substack{t, y^V \leq y}}
3193  *          addon\_lo_{n,t^a,y,m,h,t^A} \cdot
3194  *          addon\_conversion_{n,t',y^V,y,m,h} \cdot
3195  *          ACT_{n,t,y^V,y,m,h}
3196  *
3197  ***
3198  ADDON_ACTIVITY_LO(node,type_addon,year,mode,time)..
3199  * activity of addon technology
3200      sum( (addon,vintage)$(
3201              cat_addon(type_addon,addon) AND
3202              map_tec_act(node,addon,year,mode,time) AND
3203              map_tec_lifetime(node,addon,vintage,year) ),
3204          ACT(node,addon,vintage,year,mode,time) )
3205      =G=
3206  * activity of corresponding parent-technology times lower bound of share
3207        sum((tec,vintage)$(
3208            map_tec_addon(tec,type_addon) AND
3209            map_tec_act(node,tec,year,mode,time) AND
3210            map_tec_lifetime(node,tec,vintage,year)
3211        ),
3212            addon_lo(node,tec,year,mode,time,type_addon)
3213            * addon_conversion(node,tec,vintage,year,mode,time,type_addon)
3214            * ACT(node,tec,vintage,year,mode,time) ) ;
3215   
3216  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 63
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3217  ***
3218  * System reliability and flexibility requirements
3219  * -----------------------------------------------
3220  * This section followi allows to include system-wide reliability and flexility considerations.
3221  * The current formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
3222  *
3223  * Aggregate use of a commodity
3224  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3225  * The system reliability and flexibility constraints are implemented using an auxiliary variable representing
3226  * the total use (i.e., input of each commodity per level).
3227  *
3228  * Equation COMMODITY_USE_LEVEL
3229  * """"""""""""""""""""""""""""
3230  * This constraint defines the auxiliary variable :math:`COMMODITY\_USE_{n,c,l,y}`, which is used to define
3231  * the rating bins and the peak-load that needs to be offset with firm (dispatchable) capacity.
3232  *
3233  *   .. math::
3234  *      COMMODITY\_USE_{n,c,l,y}
3235  *      = & \sum_{n^L,t,y^V,m,h} input_{n^L,t,y^V,y,m,n,c,l,h,h} \\
3236  *        & \quad    \cdot duration\_time\_rel_{h,h} \cdot ACT_{n^L,t,y^V,y,m,h}
3237  *
3238  * This constraint and the auxiliary variable is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` or
3239  * :math:`flexibility\_factor_{n,t,y^V,y,m,c,l,h,r}` is defined.
3240  ***
3241  COMMODITY_USE_LEVEL(node,commodity,level,year,time)$(
3242           peak_load_factor(node,commodity,level,year,time) OR
3243           SUM( (tec,vintage,mode,rating), flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating) ) )..
3244      COMMODITY_USE(node,commodity,level,year)
3245      =E=
3246      SUM( (location,tec,vintage,mode,time2)$( map_tec_act(location,tec,year,mode,time2)
3247                                               AND map_tec_lifetime(location,tec,vintage,year) ),
3248          input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3249          * duration_time_rel(time,time2)
3250          * ACT(location,tec,vintage,year,mode,time2) ) ;
3251   
3252  ***
3253  * .. _rating_bin:
3254  *
3255  * Auxilary variables for technology activity by "rating bins"
3256  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3257  * The capacity and activity of certain (usually non-dispatchable) technologies
3258  * can be assumed to only partially contribute to the system reliability and flexibility requirements.
3259  *
3260  * Equation ACTIVITY_RATING_BIN
3261  * """"""""""""""""""""""""""""
3262  * The auxiliary variable for rating-specific activity of each technology cannot exceed
3263  * the share of the rating bin in relation to the total commodity use.
3264  *
3265  * .. math::
3266  *    ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3267  *    \leq rating\_bin_{n,t,y,c,l,h,q} \cdot COMMODITY\_USE_{n,c,l,y}
3268  *
3269  ***
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 64
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3270  ACTIVITY_BY_RATING(node,tec,year,commodity,level,time,rating)$(
3271           rating_bin(node,tec,year,commodity,level,time,rating) )..
3272     sum(vintage$( sum(mode,map_tec_act(node,tec,year,mode,time) ) AND map_tec_lifetime(node,tec,vintage,year) ),
3273              ACT_RATING(node,tec,vintage,year,commodity,level,time,rating) )
3274      =L= rating_bin(node,tec,year,commodity,level,time,rating) * COMMODITY_USE(node,commodity,level,year)
3275  ;
3276   
3277  ***
3278  * Equation ACTIVITY_SHARE_TOTAL
3279  * """""""""""""""""""""""""""""
3280  * The sum of the auxiliary rating-specific activity variables need to equal the total input and/or output
3281  * of the technology.
3282  *
3283  * .. math::
3284  *    \sum_q ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3285  *    = \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3286  *         ( input_{n^L,t,y^V,y,m,n,c,l,h^A,h} + output_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3287  *      & \quad    \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
3288  *
3289  ***
3290  ACTIVITY_RATING_TOTAL(node,tec,vintage,year,commodity,level,time)$(
3291          sum(rating$( rating_bin(node,tec,year,commodity,level,time,rating) ), 1 )
3292          AND sum(mode, map_tec_act(node,tec,year,mode,time))
3293          AND map_tec_lifetime(node,tec,vintage,year) )..
3294      sum(rating$( rating_bin(node,tec,year,commodity,level,time,rating) ),
3295          ACT_RATING(node,tec,vintage,year,commodity,level,time,rating) )
3296      =E=
3297          SUM((location,mode,time2)$(
3298                map_tec_act(location,tec,year,mode,time2)
3299                AND map_tec_lifetime(location,tec,vintage,year) ),
3300              ( output(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3301                + input(location,tec,vintage,year,mode,node,commodity,level,time2,time) )
3302                  * duration_time_rel(time,time2)
3303                  * ACT(location,tec,vintage,year,mode,time2) ) ;
3304   
3305  ***
3306  * .. _reliability_constraint:
3307  *
3308  * Reliability of installed capacity
3309  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3310  * The "firm capacity" that a technology can contribute to system reliability depends on its dispatch characteristics.
3311  * For dispatchable technologies, the total installed capacity counts toward the firm capacity constraint.
3312  * This is active if the parameter is defined over :math:`reliability\_factor_{n,t,y,c,l,h,'firm'}`.
3313  * For non-dispatchable technologies, or those that do not have explicit investment decisions,
3314  * the contribution to system reliability is calculated
3315  * by using the auxiliary variable :math:`ACT\_RATING_{n,t,y^V,y,c,l,h,q}` as a proxy,
3316  * with the :math:`reliability\_factor_{n,t,y,c,l,h,q}` defined per rating bin :math:`q`.
3317  *
3318  * Equation FIRM_CAPACITY_PROVISION
3319  * """"""""""""""""""""""""""""""""
3320  * Technologies where the reliability factor is defined with the rating `firm`
3321  * have an auxiliary variable :math:`CAP\_FIRM_{n,t,c,l,y,q}`, defined in terms of output.
3322  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 65
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3323  *   .. math::
3324  *      \sum_q CAP\_FIRM_{n,t,c,l,y,q}
3325  *      = \sum_{y^V \leq y} & output_{n^L,t,y^V,y,m,n,c,l,h^A,h} \cdot duration\_time_h \\
3326  *        & \quad    \cdot capacity\_factor_{n,t,y^V,y,h} \cdot CAP_{n,t,y^Y,y}
3327  *      \quad \forall \ t \in T^{INV}
3328  *
3329  ***
3330  FIRM_CAPACITY_PROVISION(node,inv_tec,year,commodity,level,time)$(
3331          reliability_factor(node,inv_tec,year,commodity,level,time,'firm') )..
3332      CAP_FIRM(node,inv_tec,commodity,level,year) =E=
3333      SUM( (location,vintage,mode,time2)$(
3334             map_tec_act(location,inv_tec,year,mode,time2)
3335             AND map_tec_lifetime(location,inv_tec,vintage,year) ),
3336          output(location,inv_tec,vintage,year,mode,node,commodity,level,time2,time)
3337          * duration_time(time)
3338          * capacity_factor(node,inv_tec,vintage,year,time)
3339          * CAP(node,inv_tec,vintage,year) ) ;
3340   
3341  ***
3342  * Equation SYSTEM_RELIABILITY_CONSTRAINT
3343  * """"""""""""""""""""""""""""""""""""""
3344  * This constraint ensures that there is sufficient firm (dispatchable) capacity in each period.
3345  * The formulation is based on Sullivan et al., 2013 :cite:`sullivan_VRE_2013`.
3346  *
3347  *   .. math::
3348  *      \sum_{t, q \substack{t \in T^{INV} \\ y^V \leq y} } &
3349  *          reliability\_factor_{n,t,y,c,l,h,'firm'}
3350  *          \cdot CAP\_FIRM_{n,t,c,l,y} \\
3351  *      + \sum_{t,q,y^V \leq y} &
3352  *          reliability\_factor_{n,t,y,c,l,h,q}
3353  *         \cdot ACT\_RATING_{n,t,y^V,y,c,l,h,q} \\
3354  *         & \quad \geq peak\_load\_factor_{n,c,l,y,h} \cdot COMMODITY\_USE_{n,c,l,y}
3355  *
3356  * This constraint is only active if :math:`peak\_load\_factor_{n,c,l,y,h}` is defined.
3357  ***
3358  SYSTEM_RELIABILITY_CONSTRAINT(node,commodity,level,year,time)$( peak_load_factor(node,commodity,level,year,time) )..
3359      SUM(inv_tec$( reliability_factor(node,inv_tec,year,commodity,level,time,'firm') ),
3360          reliability_factor(node,inv_tec,year,commodity,level,time,'firm')
3361          * CAP_FIRM(node,inv_tec,commodity,level,year) )
3362      + SUM((tec, mode, vintage, rating_unfirm)$(
3363          reliability_factor(node,tec,year,commodity,level,time,rating_unfirm)
3364              AND map_tec_act(node,tec,year,mode,time)
3365              AND map_tec_lifetime(node,tec,vintage,year) ),
3366          reliability_factor(node,tec,year,commodity,level,time,rating_unfirm)
3367          * ACT_RATING(node,tec,vintage,year,commodity,level,time,rating_unfirm) )
3368      =G= peak_load_factor(node,commodity,level,year,time) * COMMODITY_USE(node,commodity,level,year) ;
3369   
3370  ***
3371  * .. _flexibility_constraint:
3372  *
3373  * Equation SYSTEM_FLEXIBILITY_CONSTRAINT
3374  * """"""""""""""""""""""""""""""""""""""
3375  * This constraint ensures that, in each sub-annual time slice, there is a sufficient
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 66
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3376  * contribution from flexible technologies to ensure smooth system operation.
3377  *
3378  *   .. math::
3379  *      \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3380  *          flexibility\_factor_{n^L,t,y^V,y,m,c,l,h,'unrated'} \\
3381  *      & \quad   \cdot ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3382  *      & \quad   \cdot duration\_time\_rel_{h,h^A}
3383  *                \cdot ACT_{n,t,y^V,y,m,h} \\
3384  *      + \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y}} &
3385  *         flexibility\_factor_{n^L,t,y^V,y,m,c,l,h,1} \\
3386  *      & \quad   \cdot ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3387  *      & \quad   \cdot duration\_time\_rel_{h,h^A}
3388  *                \cdot ACT\_RATING_{n,t,y^V,y,c,l,h,q}
3389  *      \geq 0
3390  *
3391  ***
3392  SYSTEM_FLEXIBILITY_CONSTRAINT(node,commodity,level,year,time)$(
3393          SUM( (tec, vintage, mode, rating),
3394                  flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating) ) )..
3395      SUM( (tec, vintage, mode)$( flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,'unrated') ),
3396          flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,'unrated')
3397          * SUM((location,time2)$(
3398                map_tec_act(location,tec,year,mode,time2)
3399                AND map_tec_lifetime(location,tec,vintage,year) ),
3400              ( output(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3401                + input(location,tec,vintage,year,mode,node,commodity,level,time2,time) )
3402                  * duration_time_rel(time,time2)
3403                  * ACT(location,tec,vintage,year,mode,time2) ) )
3404      + SUM((tec, vintage, mode, rating_unrated)$(
3405              flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating_unrated)
3406              AND map_tec_act(node,tec,year,mode,time)
3407              AND map_tec_lifetime(node,tec,vintage,year)),
3408          flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating_unrated)
3409          * ACT_RATING(node,tec,vintage,year,commodity,level,time,rating_unrated) )
3410      =G= 0 ;
3411   
3412  ACT.LO(node,tec,vintage,year,mode,time)$sum(
3413      (commodity,level,rating), flexibility_factor(node,tec,vintage,year,mode,commodity,level,time,rating) ) = 0 ;
3414   
3415  ***
3416  * Bounds on capacity and activity
3417  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3418  *
3419  * Equation NEW_CAPACITY_BOUND_UP
3420  * """"""""""""""""""""""""""""""
3421  * This constraint provides upper bounds on new capacity installation.
3422  *
3423  *   .. math::
3424  *      CAP\_NEW_{n,t,y} \leq bound\_new\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3425  *
3426  ***
3427  NEW_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_new_capacity_up(node,inv_tec,year) )..
3428      CAP_NEW(node,inv_tec,year) =L= bound_new_capacity_up(node,inv_tec,year)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 67
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3429  * + SLACK_CAP_NEW_BOUND_UP(node,inv_tec,year)
3430  ;
3431   
3432  ***
3433  * Equation NEW_CAPACITY_BOUND_LO
3434  * """"""""""""""""""""""""""""""
3435  * This constraint provides lower bounds on new capacity installation.
3436  *
3437  *   .. math::
3438  *      CAP\_NEW_{n,t,y} \geq bound\_new\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3439  *
3440  ***
3441  NEW_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_new_capacity_lo(node,inv_tec,year) )..
3442      CAP_NEW(node,inv_tec,year) =G= bound_new_capacity_lo(node,inv_tec,year)
3443  * - SLACK_CAP_NEW_BOUND_LO(node,inv_tec,year)
3444  ;
3445   
3446  ***
3447  * Equation TOTAL_CAPACITY_BOUND_UP
3448  * """"""""""""""""""""""""""""""""
3449  * This constraint gives upper bounds on the total installed capacity of a technology in a specific year of operation
3450  * summed over all vintages.
3451  *
3452  *   .. math::
3453  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \leq bound\_total\_capacity\_up_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3454  *
3455  ***
3456  TOTAL_CAPACITY_BOUND_UP(node,inv_tec,year)$( is_bound_total_capacity_up(node,inv_tec,year) )..
3457      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
3458          CAP(node,inv_tec,vintage,year) )
3459      =L= bound_total_capacity_up(node,inv_tec,year)
3460  * + SLACK_CAP_TOTAL_BOUND_UP(node,inv_tec,year)
3461  ;
3462   
3463  ***
3464  * Equation TOTAL_CAPACITY_BOUND_LO
3465  * """"""""""""""""""""""""""""""""
3466  * This constraint gives lower bounds on the total installed capacity of a technology.
3467  *
3468  *   .. math::
3469  *      \sum_{y^V \leq y} CAP_{n,t,y,y^V} \geq bound\_total\_capacity\_lo_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3470  *
3471  ***
3472  TOTAL_CAPACITY_BOUND_LO(node,inv_tec,year)$( is_bound_total_capacity_lo(node,inv_tec,year) )..
3473      SUM(vintage$( map_period(vintage,year) AND map_tec_lifetime(node,inv_tec,vintage,year) ),
3474          CAP(node,inv_tec,vintage,year) )
3475       =G= bound_total_capacity_lo(node,inv_tec,year)
3476  * - SLACK_CAP_TOTAL_BOUND_LO(node,inv_tec,year)
3477  ;
3478   
3479  ***
3480  * Equation ACTIVITY_BOUND_UP
3481  * """"""""""""""""""""""""""
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 68
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3482  * This constraint provides upper bounds by mode of a technology activity, summed over all vintages.
3483  *
3484  *   .. math::
3485  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t,m,y,h}
3486  *
3487  ***
3488  ACTIVITY_BOUND_UP(node,tec,year,mode,time)$(
3489      is_bound_activity_up(node,tec,year,mode,time) AND map_tec_act(node,tec,year,mode,time)
3490  )..
3491      SUM(
3492          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3493          ACT(node,tec,vintage,year,mode,time)
3494      )
3495      =L=
3496      bound_activity_up(node,tec,year,mode,time)
3497  * + SLACK_ACT_BOUND_UP(node,tec,year,mode,time)
3498  ;
3499   
3500  ***
3501  * Equation ACTIVITY_BOUND_ALL_MODES_UP
3502  * """"""""""""""""""""""""""""""""""""
3503  * This constraint provides upper bounds of a technology activity across all modes and vintages.
3504  *
3505  *   .. math::
3506  *      \sum_{y^V \leq y, m} ACT_{n,t,y^V,y,m,h} \leq bound\_activity\_up_{n,t,y,'all',h}
3507  *
3508  ***
3509  ACTIVITY_BOUND_ALL_MODES_UP(node,tec,year,time)$( is_bound_activity_up(node,tec,year,'all',time) )..
3510      SUM(
3511          (vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3512          ACT(node,tec,vintage,year,mode,time)
3513      )
3514      =L=
3515      bound_activity_up(node,tec,year,'all',time)
3516  * + SLACK_ACT_BOUND_UP(node,tec,year,'all',time)
3517  ;
3518   
3519  ***
3520  * Equation ACTIVITY_BOUND_LO
3521  * """"""""""""""""""""""""""
3522  * This constraint provides lower bounds by mode of a technology activity, summed over
3523  * all vintages.
3524  *
3525  *   .. math::
3526  *      \sum_{y^V \leq y} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t,y,m,h}
3527  *
3528  * We assume that :math:`bound\_activity\_lo_{n,t,y,m,h} = 0`
3529  * unless explicitly stated otherwise.
3530  ***
3531  ACTIVITY_BOUND_LO(node,tec,year,mode,time)$( map_tec_act(node,tec,year,mode,time) )..
3532      SUM(
3533          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3534          ACT(node,tec,vintage,year,mode,time)
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 69
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3535      )
3536      =G=
3537      bound_activity_lo(node,tec,year,mode,time)
3538  * - SLACK_ACT_BOUND_LO(node,tec,year,mode,time)
3539  ;
3540   
3541  ***
3542  * Equation ACTIVITY_BOUND_ALL_MODES_LO
3543  * """"""""""""""""""""""""""""""""""""
3544  * This constraint provides lower bounds of a technology activity across all modes and vintages.
3545  *
3546  *   .. math::
3547  *      \sum_{y^V \leq y, m} ACT_{n,t,y^V,y,m,h} \geq bound\_activity\_lo_{n,t,y,'all',h}
3548  *
3549  * We assume that :math:`bound\_activity\_lo_{n,t,y,'all',h} = 0`
3550  * unless explicitly stated otherwise.
3551  ***
3552  ACTIVITY_BOUND_ALL_MODES_LO(node,tec,year,time)$( bound_activity_lo(node,tec,year,'all',time) )..
3553      SUM(
3554          (vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3555          ACT(node,tec,vintage,year,mode,time)
3556      )
3557      =G=
3558      bound_activity_lo(node,tec,year,'all',time)
3559  * - SLACK_ACT_BOUND_LO(node,tec,year,'all',time)
3560  ;
3561   
3562  *----------------------------------------------------------------------------------------------------------------------*
3563  ***
3564  * Constraints on shares of technologies and commodities
3565  * -----------------------------------------------------
3566  * This section allows to include upper and lower bounds on the shares of modes used by a technology
3567  * or the shares of commodities produced or consumed by groups of technologies.
3568  *
3569  * Share constraints on activity by mode
3570  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3571  * Equation SHARES_MODE_UP
3572  * """""""""""""""""""""""
3573  * This constraint provides upper bounds of the share of the activity of one mode
3574  * of a technology. For example, it could limit the share of heat that can be produced
3575  * in a combined heat and electricity power plant.
3576  *
3577  *   .. math::
3578  *     ACT_{n^L,t,y^V,y,m,h^A}
3579  *     \leq share\_mode\_up_{s,n,y,m,h} \cdot
3580  *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
3581  *
3582  ***
3583  SHARE_CONSTRAINT_MODE_UP(shares,node,tec,mode,year,time)$(
3584      map_tec_act(node,tec,year,mode,time) AND
3585      share_mode_up(shares,node,tec,mode,year,time)
3586  )..
3587  * activity of mode to be constrained
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 70
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3588      SUM(
3589          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3590          ACT(node,tec,vintage,year,mode,time)
3591      )
3592      =L=
3593      share_mode_up(shares,node,tec,mode,year,time) *
3594  * activity aggregated over all modes
3595      SUM(
3596          (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
3597          ACT(node,tec,vintage,year,mode2,time)
3598      ) ;
3599   
3600  ***
3601  * Equation SHARES_MODE_LO
3602  * """""""""""""""""""""""
3603  * This constraint provides lower bounds of the share of the activity of one mode of a technology.
3604  *
3605  *   .. math::
3606  *     ACT_{n^L,t,y^V,y,m,h^A}
3607  *     \geq share\_mode\_lo_{s,n,y,m,h} \cdot
3608  *     \sum_{m\prime} ACT_{n^L,t,y^V,y,m\prime,h^A}
3609  *
3610  ***
3611  SHARE_CONSTRAINT_MODE_LO(shares,node,tec,mode,year,time)$(
3612      map_tec_act(node,tec,year,mode,time) AND
3613      share_mode_lo(shares,node,tec,mode,year,time)
3614  )..
3615  * activity of mode to be constrained
3616      SUM(
3617          vintage$( map_tec_lifetime(node,tec,vintage,year) ),
3618          ACT(node,tec,vintage,year,mode,time)
3619      )
3620      =G=
3621      share_mode_lo(shares,node,tec,mode,year,time) *
3622  * activity aggregated over all modes
3623      SUM(
3624          (vintage,mode2)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode2) ),
3625          ACT(node,tec,vintage,year,mode2,time)
3626      ) ;
3627   
3628  ***
3629  * Share constraints on commodities
3630  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3631  * These constraints allow to set upper and lower bound on the quantity of commodities produced or consumed by a group
3632  * of technologies relative to the commodities produced or consumed by another group.
3633  *
3634  * The implementation is generic and flexible, so that any combination of commodities, levels, technologies and nodes
3635  * can be put in relation to any other combination.
3636  *
3637  * The notation :math:`S^{share}` represents the mapping set `map_shares_commodity_share` denoting all technology types,
3638  * nodes, commodities and levels to be included in the numerator, and :math:`S^{total}` is
3639  * the equivalent mapping set `map_shares_commodity_total` for the denominator.
3640  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 71
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3641  * Equation SHARE_CONSTRAINT_COMMODITY_UP
3642  * """"""""""""""""""""""""""""""""""""""
3643  *   .. math::
3644  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
3645  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3646  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
3647  *      & \geq
3648  *        share\_commodity\_up_{s,n,y,h} \cdot
3649  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
3650  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3651  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
3652  *
3653  * This constraint is only active if :math:`share\_commodity\_up_{s,n,y,h}` is defined.
3654  ***
3655  SHARE_CONSTRAINT_COMMODITY_UP(shares,node_share,year,time)$( share_commodity_up(shares,node_share,year,time) )..
3656  * activity by type_tec_share technologies with map_shares_generic_share entries and a specific mode
3657      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
3658          ( map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level) OR
3659            map_shares_commodity_share(shares,node_share,node,type_tec_share,'all',commodity,level) ) AND
3660          cat_tec(type_tec_share,tec) AND
3661          map_tec_act(location,tec,year,mode,time2) AND
3662          map_tec_lifetime(location,tec,vintage,year)
3663      ),
3664          (
3665              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3666              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3667          ) *
3668          duration_time_rel(time,time2) *
3669          ACT(location,tec,vintage,year,mode,time2)
3670      )
3671      =L=
3672      share_commodity_up(shares,node_share,year,time) * (
3673  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
3674      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
3675          ( map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level) OR
3676             map_shares_commodity_total(shares,node_share,node,type_tec_total,'all',commodity,level) ) AND
3677          cat_tec(type_tec_total,tec) AND
3678          map_tec_act(location,tec,year,mode,time2) AND
3679          map_tec_lifetime(location,tec,vintage,year)
3680      ),
3681          (
3682              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3683              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3684          ) *
3685          duration_time_rel(time,time2) *
3686          ACT(location,tec,vintage,year,mode,time2)
3687      ) ) ;
3688   
3689  ***
3690  * Equation SHARE_CONSTRAINT_COMMODITY_LO
3691  * """"""""""""""""""""""""""""""""""""""
3692  *   .. math::
3693  *      & \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{share}}}
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 72
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3694  *         ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3695  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A} \\
3696  *      & \leq
3697  *        share\_commodity\_lo_{s,n,y,h} \cdot
3698  *        \sum_{\substack{n^L,t,m,h^A \\ y^V \leq y, (n,\widehat{t},m,c,l) \sim S^{total}}}
3699  *            ( output_{n^L,t,y^V,y,m,n,c,l,h^A,h} + input_{n^L,t,y^V,y,m,n,c,l,h^A,h} ) \\
3700  *      & \quad \cdot duration\_time\_rel_{h,h^A} \cdot ACT_{n^L,t,y^V,y,m,h^A}
3701  *
3702  * This constraint is only active if :math:`share\_commodity\_lo_{s,n,y,h}` is defined.
3703  ***
3704  SHARE_CONSTRAINT_COMMODITY_LO(shares,node_share,year,time)$( share_commodity_lo(shares,node_share,year,time) )..
3705  * total input and output by `type_tec_share` technologies mapped to respective commodity, level and node
3706      SUM( (node,location,type_tec_share,tec,vintage,mode,commodity,level,time2)$(
3707          ( map_shares_commodity_share(shares,node_share,node,type_tec_share,mode,commodity,level) OR
3708             map_shares_commodity_share(shares,node_share,node,type_tec_share,'all',commodity,level) ) AND
3709          cat_tec(type_tec_share,tec) AND
3710          map_tec_act(location,tec,year,mode,time2) AND
3711          map_tec_lifetime(location,tec,vintage,year)
3712      ),
3713          (
3714              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3715              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3716          ) *
3717          duration_time_rel(time,time2) *
3718          ACT(location,tec,vintage,year,mode,time2)
3719      )
3720      =G=
3721      share_commodity_lo(shares,node_share,year,time) * (
3722  * total input and output by `type_tec_total` technologies mapped to respective commodity, level and node
3723      SUM( (node,location,type_tec_total,tec,vintage,mode,commodity,level,time2)$(
3724          ( map_shares_commodity_total(shares,node_share,node,type_tec_total,mode,commodity,level) OR
3725             map_shares_commodity_total(shares,node_share,node,type_tec_total,'all',commodity,level) ) AND
3726          cat_tec(type_tec_total,tec) AND
3727          map_tec_act(location,tec,year,mode,time2) AND
3728          map_tec_lifetime(location,tec,vintage,year)
3729      ),
3730          (
3731              output(location,tec,vintage,year,mode,node,commodity,level,time2,time) +
3732              input(location,tec,vintage,year,mode,node,commodity,level,time2,time)
3733          ) *
3734          duration_time_rel(time,time2) *
3735          ACT(location,tec,vintage,year,mode,time2)
3736      ) ) ;
3737   
3738  ***
3739  * .. _dynamic_constraints:
3740  *
3741  * Dynamic constraints on market penetration
3742  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3743  * The constraints in this section specify dynamic upper and lower bounds on new capacity and activity,
3744  * i.e., constraints on market penetration and rate of expansion or phase-out of a technology.
3745  *
3746  * The formulation directly includes the option for 'soft' relaxations of dynamic constraints
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 73
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3747  * (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
3748  *
3749  * Equation NEW_CAPACITY_CONSTRAINT_UP
3750  * """""""""""""""""""""""""""""""""""
3751  * The level of new capacity additions cannot be greater than an initial value (compounded over the period duration),
3752  * annual growth of the existing 'capital stock', and a "soft" relaxation of the upper bound.
3753  *
3754  *  .. math::
3755  *     CAP\_NEW_{n,t,y}
3756  *         \leq & ~ initial\_new\_capacity\_up_{n,t,y}
3757  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} - 1 }
3758  *                        { growth\_new\_capacity\_up_{n,t,y} } \\
3759  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
3760  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_up_{n,t,y} \Big)^{|y|} \\
3761  *              & + CAP\_NEW\_UP_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_up_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
3762  *         & \quad \forall \ t \ \in \ T^{INV}
3763  *
3764  * Here, :math:`|y|` is the number of years in period :math:`y`, i.e., :math:`duration\_period_{y}`.
3765  ***
3766  NEW_CAPACITY_CONSTRAINT_UP(node,inv_tec,year)$( map_tec(node,inv_tec,year)
3767          AND is_dynamic_new_capacity_up(node,inv_tec,year) )..
3768  * actual new capacity
3769      CAP_NEW(node,inv_tec,year) =L=
3770  * initial new capacity (compounded over the duration of the period)
3771          initial_new_capacity_up(node,inv_tec,year) * (
3772              ( ( POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) ) - 1 )
3773                  / growth_new_capacity_up(node,inv_tec,year) )$( growth_new_capacity_up(node,inv_tec,year) )
3774                + ( duration_period(year) )$( NOT growth_new_capacity_up(node,inv_tec,year) )
3775              )
3776  * growth of 'capital stock' from previous period
3777          + SUM(year_all2$( seq_period(year_all2,year) ),
3778              CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
3779                + historical_new_capacity(node,inv_tec,year_all2) )
3780                # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3781              * POWER( 1 + growth_new_capacity_up(node,inv_tec,year) , duration_period(year) )
3782  * 'soft' relaxation of dynamic constraints
3783          + ( CAP_NEW_UP(node,inv_tec,year)
3784              * ( POWER( 1 + soft_new_capacity_up(node,inv_tec,year) , duration_period(year) ) - 1 )
3785             )$( soft_new_capacity_up(node,inv_tec,year) )
3786  * optional relaxation for calibration and debugging
3787  * + SLACK_CAP_NEW_DYNAMIC_UP(node,inv_tec,year)
3788  ;
3789   
3790  * GAMS implementation comment:
3791  * The sums in the constraint have to be over `year_all2` (not `year2`) to also get the dynamic effect from historical
3792  * new capacity. If one would sum over `year2`, periods prior to the first model year would be ignored.
3793   
3794  ***
3795  * Equation NEW_CAPACITY_SOFT_CONSTRAINT_UP
3796  * """"""""""""""""""""""""""""""""""""""""
3797  * This constraint ensures that the relaxation of the dynamic constraint on new capacity (investment) does not exceed
3798  * the level of the investment in the same period (cf. Keppo and Strubegger, 2010 :cite:`keppo_short_2010`).
3799  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 74
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3800  *  .. math::
3801  *     CAP\_NEW\_UP_{n,t,y} \leq CAP\_NEW_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3802  *
3803  ***
3804  NEW_CAPACITY_SOFT_CONSTRAINT_UP(node,inv_tec,year)$( soft_new_capacity_up(node,inv_tec,year) )..
3805      CAP_NEW_UP(node,inv_tec,year) =L= CAP_NEW(node,inv_tec,year) ;
3806   
3807  ***
3808  * Equation NEW_CAPACITY_CONSTRAINT_LO
3809  * """""""""""""""""""""""""""""""""""
3810  * This constraint gives dynamic lower bounds on new capacity.
3811  *
3812  *  .. math::
3813  *     CAP\_NEW_{n,t,y}
3814  *         \geq & - initial\_new\_capacity\_lo_{n,t,y}
3815  *             \cdot \frac{ \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} }
3816  *                        { growth\_new\_capacity\_lo_{n,t,y} } \\
3817  *              & + \Big( CAP\_NEW_{n,t,y-1} + historical\_new\_capacity_{n,t,y-1} \Big) \\
3818  *              & \hspace{2 cm} \cdot \Big( 1 + growth\_new\_capacity\_lo_{n,t,y} \Big)^{|y|} \\
3819  *              & - CAP\_NEW\_LO_{n,t,y} \cdot \Bigg( \Big( 1 + soft\_new\_capacity\_lo_{n,t,y}\Big)^{|y|} - 1 \Bigg) \\
3820  *         & \quad \forall \ t \ \in \ T^{INV}
3821  *
3822  ***
3823  NEW_CAPACITY_CONSTRAINT_LO(node,inv_tec,year)$( map_tec(node,inv_tec,year)
3824          AND is_dynamic_new_capacity_lo(node,inv_tec,year) )..
3825  * actual new capacity
3826      CAP_NEW(node,inv_tec,year) =G=
3827  * initial new capacity (compounded over the duration of the period)
3828          - initial_new_capacity_lo(node,inv_tec,year) * (
3829              ( ( POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) ) - 1 )
3830                  / growth_new_capacity_lo(node,inv_tec,year) )$( growth_new_capacity_lo(node,inv_tec,year) )
3831                + ( duration_period(year) )$( NOT growth_new_capacity_lo(node,inv_tec,year) )
3832              )
3833  * growth of 'capital stock' from previous period
3834          + SUM(year_all2$( seq_period(year_all2,year) ),
3835                  CAP_NEW(node,inv_tec,year_all2)$( map_tec(node,inv_tec,year_all2) AND model_horizon(year_all2) )
3836                  + historical_new_capacity(node,inv_tec,year_all2)
3837                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3838              ) * POWER( 1 + growth_new_capacity_lo(node,inv_tec,year) , duration_period(year) )
3839  * 'soft' relaxation of dynamic constraints
3840          - ( CAP_NEW_LO(node,inv_tec,year)
3841              * ( POWER( 1 + soft_new_capacity_lo(node,inv_tec,year) , duration_period(year) ) - 1 )
3842             )$( soft_new_capacity_lo(node,inv_tec,year) )
3843  * optional relaxation for calibration and debugging
3844  * - SLACK_CAP_NEW_DYNAMIC_LO(node,inv_tec,year)
3845  ;
3846   
3847  ***
3848  * Equation NEW_CAPACITY_SOFT_CONSTRAINT_LO
3849  * """"""""""""""""""""""""""""""""""""""""
3850  * This constraint ensures that the relaxation of the dynamic constraint on new capacity does not exceed
3851  * level of the investment in the same year.
3852  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 75
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3853  *   .. math::
3854  *      CAP\_NEW\_LO_{n,t,y} \leq CAP\_NEW_{n,t,y} \quad \forall \ t \ \in \ T^{INV}
3855  *
3856  ***
3857  NEW_CAPACITY_SOFT_CONSTRAINT_LO(node,inv_tec,year)$( soft_new_capacity_lo(node,inv_tec,year) )..
3858      CAP_NEW_LO(node,inv_tec,year) =L= CAP_NEW(node,inv_tec,year) ;
3859   
3860  ***
3861  * Equation ACTIVITY_CONSTRAINT_UP
3862  * """""""""""""""""""""""""""""""
3863  * This constraint gives dynamic upper bounds on the market penetration of a technology activity.
3864  *
3865  *  .. math::
3866  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3867  *         \leq & ~ initial\_activity\_up_{n,t,y,h}
3868  *             \cdot \frac{ \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 }
3869  *                        { growth\_activity\_up_{n,t,y,h} } \\
3870  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
3871  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
3872  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_up_{n,t,y,h} \Big)^{|y|} \\
3873  *             & + ACT\_UP_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_up_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
3874  *
3875  ***
3876  ACTIVITY_CONSTRAINT_UP(node,tec,year,time)$( map_tec_time(node,tec,year,time)
3877          AND is_dynamic_activity_up(node,tec,year,time) )..
3878  * actual activity (summed over modes)
3879      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3880              ACT(node,tec,vintage,year,mode,time) ) =L=
3881  * initial activity (compounded over the duration of the period)
3882          initial_activity_up(node,tec,year,time) * (
3883              ( ( POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) ) - 1 )
3884                  / growth_activity_up(node,tec,year,time) )$( growth_activity_up(node,tec,year,time) )
3885                + ( duration_period(year) )$( NOT growth_activity_up(node,tec,year,time) )
3886              )
3887  * growth of 'capital stock' from previous period
3888          + SUM((year_all2)$( seq_period(year_all2,year) ),
3889              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
3890                                   AND model_horizon(year_all2) ),
3891                          ACT(node,tec,vintage,year_all2,mode,time) )
3892                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
3893                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3894                  )
3895              * POWER( 1 + growth_activity_up(node,tec,year,time) , duration_period(year) )
3896  * 'soft' relaxation of dynamic constraints
3897          + ( ACT_UP(node,tec,year,time)
3898                  * ( POWER( 1 + soft_activity_up(node,tec,year,time) , duration_period(year) ) - 1 )
3899              )$( soft_activity_up(node,tec,year,time) )
3900  * optional relaxation for calibration and debugging
3901  * + SLACK_ACT_DYNAMIC_UP(node,tec,year,time)
3902  ;
3903   
3904  ***
3905  * Equation ACTIVITY_SOFT_CONSTRAINT_UP
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 76
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3906  * """"""""""""""""""""""""""""""""""""
3907  * This constraint ensures that the relaxation of the dynamic activity constraint does not exceed the
3908  * level of the activity.
3909  *
3910  *   .. math::
3911  *      ACT\_UP_{n,t,y,h} \leq \sum_{y^V \leq y,m} ACT_{n^L,t,y^V,y,m,h}
3912  *
3913  ***
3914  ACTIVITY_SOFT_CONSTRAINT_UP(node,tec,year,time)$( soft_activity_up(node,tec,year,time) )..
3915      ACT_UP(node,tec,year,time) =L=
3916          SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
3917              ACT(node,tec,vintage,year,mode,time) ) ;
3918   
3919  ***
3920  * Equation ACTIVITY_CONSTRAINT_LO
3921  * """""""""""""""""""""""""""""""
3922  * This constraint gives dynamic lower bounds on the market penetration of a technology activity.
3923  *
3924  *  .. math::
3925  *     \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3926  *         \geq & - initial\_activity\_lo_{n,t,y,h}
3927  *             \cdot \frac{ \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 }
3928  *                        { growth\_activity\_lo_{n,t,y,h} } \\
3929  *             & + \bigg( \sum_{y^V \leq y-1,m} ACT_{n,t,y^V,y-1,m,h}
3930  *                         + \sum_{m} historical\_activity_{n,t,y-1,m,h} \bigg) \\
3931  *             & \hspace{2 cm} \cdot \Big( 1 + growth\_activity\_lo_{n,t,y,h} \Big)^{|y|} \\
3932  *             & - ACT\_LO_{n,t,y,h} \cdot \Bigg( \Big( 1 + soft\_activity\_lo_{n,t,y,h} \Big)^{|y|} - 1 \Bigg)
3933  *
3934  ***
3935  ACTIVITY_CONSTRAINT_LO(node,tec,year,time)$( map_tec_time(node,tec,year,time)
3936          AND is_dynamic_activity_lo(node,tec,year,time) )..
3937  * actual activity (summed over modes)
3938      SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_mode(node,tec,year,mode) ),
3939              ACT(node,tec,vintage,year,mode,time) ) =G=
3940  * initial activity (compounded over the duration of the period)
3941          - initial_activity_lo(node,tec,year,time) * (
3942              ( ( POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) ) - 1 )
3943                  / growth_activity_lo(node,tec,year,time) )$( growth_activity_lo(node,tec,year,time) )
3944                + ( duration_period(year) )$( NOT growth_activity_lo(node,tec,year,time) )
3945              )
3946  * growth of 'capital stock' from previous period
3947          + SUM((year_all2)$( seq_period(year_all2,year) ),
3948              SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year_all2) AND map_tec_mode(node,tec,year_all2,mode)
3949                                   AND model_horizon(year_all2)),
3950                          ACT(node,tec,vintage,year_all2,mode,time) )
3951                  + SUM(mode, historical_activity(node,tec,year_all2,mode,time) )
3952                  # placeholder for spillover across nodes, technologies, periods (other than immediate predecessor)
3953                  )
3954              * POWER( 1 + growth_activity_lo(node,tec,year,time) , duration_period(year) )
3955  * 'soft' relaxation of dynamic constraints
3956          - ( ACT_LO(node,tec,year,time)
3957              * ( POWER( 1 + soft_activity_lo(node,tec,year,time) , duration_period(year) ) - 1 )
3958              )$( soft_activity_lo(node,tec,year,time) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 77
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


3959  * optional relaxation for calibration and debugging
3960  * - SLACK_ACT_DYNAMIC_LO(node,tec,year,time)
3961  ;
3962   
3963  ***
3964  * Equation ACTIVITY_SOFT_CONSTRAINT_LO
3965  * """"""""""""""""""""""""""""""""""""
3966  * This constraint ensures that the relaxation of the dynamic activity constraint does not exceed the
3967  * level of the activity.
3968  *
3969  *   .. math::
3970  *      ACT\_LO_{n,t,y,h} \leq \sum_{y^V \leq y,m} ACT_{n,t,y^V,y,m,h}
3971  *
3972  ***
3973  ACTIVITY_SOFT_CONSTRAINT_LO(node,tec,year,time)$( soft_activity_lo(node,tec,year,time) )..
3974      ACT_LO(node,tec,year,time) =L=
3975          SUM((vintage,mode)$( map_tec_lifetime(node,tec,vintage,year) AND map_tec_act(node,tec,year,mode,time) ),
3976              ACT(node,tec,vintage,year,mode,time) ) ;
3977   
3978  *----------------------------------------------------------------------------------------------------------------------*
3979   
3980  ***
3981  * Emission section
3982  * ----------------
3983  *
3984  * Auxiliary variable for aggregate emissions
3985  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3986  *
3987  * Equation EMISSION_EQUIVALENCE
3988  * """""""""""""""""""""""""""""
3989  * This constraint simplifies the notation of emissions aggregated over different technology types
3990  * and the land-use model emulator. The formulation includes emissions from all sub-nodes :math:`n^L` of :math:`n`.
3991  *
3992  *   .. math::
3993  *      EMISS_{n,e,\widehat{t},y} =
3994  *          \sum_{n^L \in N(n)} \Bigg(
3995  *              \sum_{t \in T(\widehat{t}),y^V \leq y,m,h }
3996  *                  emission\_factor_{n^L,t,y^V,y,m,e} \cdot ACT_{n^L,t,y^V,y,m,h} \\
3997  *              + \sum_{s} \ land\_emission_{n^L,s,y,e} \cdot LAND_{n^L,s,y}
3998  *                   \text{ if } \widehat{t} \in \widehat{T}^{LAND} \Bigg)
3999  *
4000  ***
4001  EMISSION_EQUIVALENCE(node,emission,type_tec,year)..
4002      EMISS(node,emission,type_tec,year)
4003      =E=
4004      SUM(location$( map_node(node,location) ),
4005  * emissions from technology activity
4006          SUM((tec,vintage,mode,time)$( cat_tec(type_tec,tec)
4007              AND map_tec_act(location,tec,year,mode,time) AND map_tec_lifetime(location,tec,vintage,year) ),
4008          emission_factor(location,tec,vintage,year,mode,emission) * ACT(location,tec,vintage,year,mode,time) )
4009  * emissions from land use if 'type_tec' is included in the dynamic set 'type_tec_land'
4010          + SUM(land_scenario$( type_tec_land(type_tec) ),
4011              land_emission(location,land_scenario,year,emission) * LAND(location,land_scenario,year) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 78
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4012        ) ;
4013   
4014  ***
4015  * Bound on emissions
4016  * ^^^^^^^^^^^^^^^^^^
4017  *
4018  * Equation EMISSION_CONSTRAINT
4019  * """"""""""""""""""""""""""""
4020  * This constraint enforces upper bounds on emissions (by emission type). For all bounds that include multiple periods,
4021  * the parameter :math:`bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}` is scaled to represent average annual
4022  * emissions over all years included in the year-set :math:`\widehat{y}`.
4023  *
4024  * The formulation includes historical emissions and allows to model constraints ranging over both the model horizon
4025  * and historical periods.
4026  *
4027  *   .. math::
4028  *      \frac{
4029  *          \sum_{y' \in Y(\widehat{y}), e \in E(\widehat{e})}
4030  *              \begin{array}{l}
4031  *                  duration\_period_{y'} \cdot emission\_scaling_{\widehat{e},e} \cdot \\
4032  *                  \Big( EMISS_{n,e,\widehat{t},y'} + \sum_{m} historical\_emission_{n,e,\widehat{t},y'} \Big)
4033  *              \end{array}
4034  *          }
4035  *        { \sum_{y' \in Y(\widehat{y})} duration\_period_{y'} }
4036  *      \leq bound\_emission_{n,\widehat{e},\widehat{t},\widehat{y}}
4037  *
4038  ***
4039  EMISSION_CONSTRAINT(node,type_emission,type_tec,type_year)$is_bound_emission(node,type_emission,type_tec,type_year)..
4040      SUM( (year_all2,emission)$( cat_year(type_year,year_all2) AND cat_emission(type_emission,emission) ),
4041          duration_period(year_all2) * emission_scaling(type_emission,emission) *
4042              ( EMISS(node,emission,type_tec,year_all2)$( year(year_all2) )
4043                  + historical_emission(node,emission,type_tec,year_all2) )
4044        )
4045      / SUM(year_all2$( cat_year(type_year,year_all2) ), duration_period(year_all2) )
4046      =L= bound_emission(node,type_emission,type_tec,type_year) ;
4047   
4048   
4049  *----------------------------------------------------------------------------------------------------------------------*
4050  ***
4051  * Land-use model emulator section
4052  * -------------------------------
4053  *
4054  * Bounds on total land use
4055  * ^^^^^^^^^^^^^^^^^^^^^^^^
4056  *
4057  * Equation LAND_CONSTRAINT
4058  * """"""""""""""""""""""""
4059  * This constraint enforces a meaningful result of the land-use model emulator,
4060  * in particular a bound on the total land used in |MESSAGEix|.
4061  * The linear combination of land scenarios must be equal to 1.
4062  *
4063  *  .. math::
4064  *     \sum_{s \in S} LAND_{n,s,y} = 1
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 79
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4065  *
4066  ***
4067  LAND_CONSTRAINT(node,year)$( SUM(land_scenario$( map_land(node,land_scenario,year) ), 1 ) ) ..
4068      SUM(land_scenario$( map_land(node,land_scenario,year) ), LAND(node,land_scenario,year) ) =E= 1 ;
4069   
4070  ***
4071  * Dynamic constraints on land use
4072  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4073  * These constraints enforces upper and lower bounds on the change rate per land scenario.
4074  *
4075  * Equation DYNAMIC_LAND_SCEN_CONSTRAINT_UP
4076  * """"""""""""""""""""""""""""""""""""""""
4077  *
4078  *  .. math::
4079  *     LAND_{n,s,y}
4080  *         \leq & initial\_land\_scen\_up_{n,s,y}
4081  *             \cdot \frac{ \Big( 1 + growth\_land\_scen\_up_{n,s,y} \Big)^{|y|} - 1 }
4082  *                        { growth\_land\_scen\_up_{n,s,y} } \\
4083  *              & + \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big)
4084  *                  \cdot \Big( 1 + growth\_land\_scen\_up_{n,s,y} \Big)^{|y|}
4085  *
4086  ***
4087  DYNAMIC_LAND_SCEN_CONSTRAINT_UP(node,land_scenario,year)$( map_land(node,land_scenario,year)
4088          AND is_dynamic_land_scen_up(node,land_scenario,year) )..
4089  * share of land scenario in
4090      LAND(node,land_scenario,year) =L=
4091  * initial 'new' land used for that type (compounded over the duration of the period)
4092          initial_land_scen_up(node,land_scenario,year) * (
4093              ( ( POWER( 1 + growth_land_scen_up(node,land_scenario,year) , duration_period(year) ) - 1 )
4094                  / growth_land_scen_up(node,land_scenario,year) )$( growth_land_scen_up(node,land_scenario,year) )
4095                + ( duration_period(year) )$( NOT growth_land_scen_up(node,land_scenario,year) )
4096              )
4097  * expansion of land scenario from previous period
4098          + SUM((year_all2)$( seq_period(year_all2,year) ),
4099                  ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4100                    + historical_land(node,land_scenario,year_all2) )
4101                  * POWER( 1 + growth_land_scen_up(node,land_scenario,year) , duration_period(year) )
4102              )
4103  * optional relaxation for calibration and debugging
4104  * + SLACK_LAND_SCEN_UP(node,land_scenario,year)
4105  ;
4106   
4107  ***
4108  * Equation DYNAMIC_LAND_SCEN_CONSTRAINT_LO
4109  * """"""""""""""""""""""""""""""""""""""""
4110  *
4111  *  .. math::
4112  *     LAND_{n,s,y}
4113  *         \geq & - initial\_land\_scen\_lo_{n,s,y}
4114  *             \cdot \frac{ \Big( 1 + growth\_land\_scen\_lo_{n,s,y} \Big)^{|y|} - 1 }
4115  *                        { growth\_land\_scen\_lo_{n,s,y} } \\
4116  *              & + \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big)
4117  *                  \cdot \Big( 1 + growth\_land\_scen\_lo_{n,s,y} \Big)^{|y|}
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 80
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4118  *
4119  ***
4120  DYNAMIC_LAND_SCEN_CONSTRAINT_LO(node,land_scenario,year)$( map_land(node,land_scenario,year)
4121          AND is_dynamic_land_scen_lo(node,land_scenario,year) )..
4122  * share of land scenario in
4123      LAND(node,land_scenario,year) =G=
4124  * initial 'new' land used for that type (compounded over the duration of the period)
4125          - initial_land_scen_lo(node,land_scenario,year) * (
4126              ( ( POWER( 1 + growth_land_scen_lo(node,land_scenario,year) , duration_period(year) ) - 1 )
4127                  / growth_land_scen_lo(node,land_scenario,year) )$( growth_land_scen_lo(node,land_scenario,year) )
4128                + ( duration_period(year) )$( NOT growth_land_scen_lo(node,land_scenario,year) )
4129              )
4130  * reduction of land scenario from previous period
4131          + SUM((year_all2)$( seq_period(year_all2,year) ),
4132                  ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4133                    + historical_land(node,land_scenario,year_all2) )
4134                  * POWER( 1 + growth_land_scen_lo(node,land_scenario,year) , duration_period(year) )
4135              )
4136  * optional relaxation for calibration and debugging
4137  * - SLACK_LAND_SCEN_LO(node,land_scenario,year)
4138  ;
4139   
4140  ***
4141  * These constraints enforces upper and lower bounds on the change rate per land type
4142  * determined as a linear combination of land use scenarios.
4143  *
4144  * Equation DYNAMIC_LAND_TYPE_CONSTRAINT_UP
4145  * """"""""""""""""""""""""""""""""""""""""
4146  *
4147  *  .. math::
4148  *     \sum_{s \in S} land\_use_{n,s,y,u} &\cdot LAND_{n,s,y}
4149  *         \leq initial\_land\_up_{n,y,u}
4150  *             \cdot \frac{ \Big( 1 + growth\_land\_up_{n,y,u} \Big)^{|y|} - 1 }
4151  *                        { growth\_land\_up_{n,y,u} } \\
4152  *              & + \Big( \sum_{s \in S} \big( land\_use_{n,s,y-1,u}
4153  *                          + dynamic\_land\_up_{n,s,y-1,u} \big) \\
4154  *                            & \quad \quad \cdot \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big) \Big) \\
4155  *                            & \quad \cdot \Big( 1 + growth\_land\_up_{n,y,u} \Big)^{|y|}
4156  *
4157  ***
4158  DYNAMIC_LAND_TYPE_CONSTRAINT_UP(node,year,land_type)$( is_dynamic_land_up(node,year,land_type) )..
4159  * amount of land assigned to specific type in current period
4160      SUM(land_scenario$( map_land(node,land_scenario,year) ),
4161          land_use(node,land_scenario,year,land_type) * LAND(node,land_scenario,year) ) =L=
4162  * initial 'new' land used for that type (compounded over the duration of the period)
4163          initial_land_up(node,year,land_type) * (
4164              ( ( POWER( 1 + growth_land_up(node,year,land_type) , duration_period(year) ) - 1 )
4165                  / growth_land_up(node,year,land_type) )$( growth_land_up(node,year,land_type) )
4166                + ( duration_period(year) )$( NOT growth_land_up(node,year,land_type) )
4167              )
4168  * expansion of previously used land of this type from previous period and upper bound on land use transformation
4169          + SUM((year_all2)$( seq_period(year_all2,year) ),
4170              SUM(land_scenario$( map_land(node,land_scenario,year) ),
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 81
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4171                  ( land_use(node,land_scenario,year_all2,land_type)
4172                    + dynamic_land_up(node,land_scenario,year_all2,land_type) )
4173                  * ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4174                      + historical_land(node,land_scenario,year_all2) )
4175                  * POWER( 1 + growth_land_up(node,year,land_type) , duration_period(year) )
4176                )
4177            )
4178  * optional relaxation for calibration and debugging
4179  * + SLACK_LAND_TYPE_UP(node,year,land_type)
4180  ;
4181   
4182  ***
4183  * Equation DYNAMIC_LAND_TYPE_CONSTRAINT_LO
4184  * """"""""""""""""""""""""""""""""""""""""
4185  *
4186  *  .. math::
4187  *     \sum_{s \in S} land\_use_{n,s,y,u} &\cdot LAND_{n,s,y}
4188  *         \geq - initial\_land\_lo_{n,y,u}
4189  *             \cdot \frac{ \Big( 1 + growth\_land\_lo_{n,y,u} \Big)^{|y|} - 1 }
4190  *                        { growth\_land\_lo_{n,y,u} } \\
4191  *              & + \Big( \sum_{s \in S} \big( land\_use_{n,s,y-1,u}
4192  *                          + dynamic\_land\_lo_{n,s,y-1,u} \big) \\
4193  *                            & \quad \quad \cdot \big( LAND_{n,s,y-1} + historical\_land_{n,s,y-1} \big) \Big) \\
4194  *                            & \quad \cdot \Big( 1 + growth\_land\_lo_{n,y,u} \Big)^{|y|}
4195  *
4196  ***
4197  DYNAMIC_LAND_TYPE_CONSTRAINT_LO(node,year,land_type)$( is_dynamic_land_lo(node,year,land_type) )..
4198  * amount of land assigned to specific type in current period
4199      SUM(land_scenario$( map_land(node,land_scenario,year) ),
4200          land_use(node,land_scenario,year,land_type) * LAND(node,land_scenario,year) ) =G=
4201  * initial 'new' land used for that type (compounded over the duration of the period)
4202          - initial_land_lo(node,year,land_type) * (
4203              ( ( POWER( 1 + growth_land_up(node,year,land_type) , duration_period(year) ) - 1 )
4204                  / growth_land_lo(node,year,land_type) )$( growth_land_lo(node,year,land_type) )
4205                + ( duration_period(year) )$( NOT growth_land_lo(node,year,land_type) )
4206              )
4207  * expansion of previously used land of this type from previous period and lower bound on land use transformation
4208          + SUM((year_all2)$( seq_period(year_all2,year) ),
4209              SUM(land_scenario$( map_land(node,land_scenario,year) ),
4210                  ( land_use(node,land_scenario,year_all2,land_type)
4211                    + dynamic_land_lo(node,land_scenario,year_all2,land_type) )
4212                  * ( LAND(node,land_scenario,year_all2)$( model_horizon(year_all2) )
4213                      + historical_land(node,land_scenario,year_all2) )
4214                  * POWER( 1 + growth_land_lo(node,year,land_type) , duration_period(year) )
4215                )
4216            )
4217  * optional relaxation for calibration and debugging
4218  * - SLACK_LAND_TYPE_LO(node,year,land_type)
4219  ;
4220   
4221  *----------------------------------------------------------------------------------------------------------------------*
4222  ***
4223  * .. _section_of_generic_relations:
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 82
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4224  *
4225  * Section of generic relations (linear constraints)
4226  * -------------------------------------------------
4227  *
4228  * This feature is intended for development and testing only - all new features should be implemented
4229  * as specific new mathematical formulations and associated sets & parameters!
4230  *
4231  * Auxiliary variable for left-hand side
4232  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4233  *
4234  * Equation RELATION_EQUIVALENCE
4235  * """""""""""""""""""""""""""""
4236  *   .. math::
4237  *      REL_{r,n,y} = \sum_{t} \Bigg(
4238  *          & \ relation\_new\_capacity_{r,n,y,t} \cdot CAP\_NEW_{n,t,y} \\[4 pt]
4239  *          & + relation\_total\_capacity_{r,n,y,t} \cdot \sum_{y^V \leq y} \ CAP_{n,t,y^V,y} \\
4240  *          & + \sum_{n^L,y',m,h} \ relation\_activity_{r,n,y,n^L,t,y',m} \\
4241  *          & \quad \quad \cdot \Big( \sum_{y^V \leq y'} ACT_{n^L,t,y^V,y',m,h}
4242  *                              + historical\_activity_{n^L,t,y',m,h} \Big) \Bigg)
4243  *
4244  * The parameter :math:`historical\_new\_capacity_{r,n,y}` is not included here, because relations can only be active
4245  * in periods included in the model horizon and there is no "writing" of capacity relation factors across periods.
4246  ***
4247   
4248  RELATION_EQUIVALENCE(relation,node,year)..
4249      REL(relation,node,year)
4250          =E=
4251      SUM(tec,
4252          ( relation_new_capacity(relation,node,year,tec) * CAP_NEW(node,tec,year)
4253            + relation_total_capacity(relation,node,year,tec)
4254              * SUM(vintage$( map_tec_lifetime(node,tec,vintage,year) ), CAP(node,tec,vintage,year) )
4255            )$( inv_tec(tec) )
4256          + SUM((location,year_all2,mode,time)$( map_tec_act(location,tec,year_all2,mode,time) ),
4257              relation_activity(relation,node,year,location,tec,year_all2,mode)
4258              * ( SUM(vintage$( map_tec_lifetime(location,tec,vintage,year_all2) ),
4259                    ACT(location,tec,vintage,year_all2,mode,time) )
4260                    + historical_activity(location,tec,year_all2,mode,time) )
4261            )
4262        ) ;
4263   
4264  ***
4265  * Upper and lower bounds on user-defined relations
4266  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4267  *
4268  * Equation RELATION_CONSTRAINT_UP
4269  * """""""""""""""""""""""""""""""
4270  *   .. math::
4271  *      REL_{r,n,y} \leq relation\_upper_{r,n,y}
4272  ***
4273  RELATION_CONSTRAINT_UP(relation,node,year)$( is_relation_upper(relation,node,year) )..
4274      REL(relation,node,year)
4275  * - SLACK_RELATION_BOUND_UP(relation,node,year)
4276      =L= relation_upper(relation,node,year) ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 83
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4277   
4278  ***
4279  * Equation RELATION_CONSTRAINT_LO
4280  * """""""""""""""""""""""""""""""
4281  *   .. math::
4282  *      REL_{r,n,y} \geq relation\_lower_{r,n,y}
4283  ***
4284  RELATION_CONSTRAINT_LO(relation,node,year)$( is_relation_lower(relation,node,year) )..
4285      REL(relation,node,year)
4286  * + SLACK_RELATION_BOUND_LO(relation,node,year)
4287      =G= relation_lower(relation,node,year) ;
4288   
4289  *----------------------------------------------------------------------------------------------------------------------*
4290  * model statements                                                                                                     *
4291  *----------------------------------------------------------------------------------------------------------------------*
4292   
4293  Model MESSAGE_LP / all / ;
4294   
4295  MESSAGE_LP.holdfixed = 1 ;
4296  MESSAGE_LP.optfile = 1 ;
4297  MESSAGE_LP.optcr = 0 ;
4298   
4299  *----------------------------------------------------------------------------------------------------------------------*
4300  * solve statements (including the loop for myopic or rolling-horizon optimization)                                     *
4301  *----------------------------------------------------------------------------------------------------------------------*
4302   
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_solve.gms
4303  $INCLUDE MESSAGE/model_solve.gms
4304  ***
4305  * Solve statement workflow
4306  * ========================
4307  *
4308  * This part of the code includes the perfect-foresight, myopic and rolling-horizon model solve statements
4309  * including the required accounting of investment costs beyond the model horizon.
4310  ***
4311   
4312  if (0 = 0,
4313  ***
4314  * Perfect-foresight model
4315  * ~~~~~~~~~~~~~~~~~~~~~~~
4316  * For the perfect foresight version of |MESSAGEix|, include all years in the model horizon and solve the entire model.
4317  * This is the standard option; the GAMS global variable ``%foresight%=0`` by default.
4318  *
4319  * .. math::
4320  *    \min_x OBJ = \sum_{y \in Y} OBJ_y(x_y)
4321  ***
4322   
4323  * reset year in case it was set by MACRO to include the base year before
4324      year(year_all) = no ;
4325  * include all model periods in the optimization horizon (excluding historical periods prior to 'first_period')
4326      year(year_all)$( model_horizon(year_all) ) = yes ;
4327   
4328  * write a status update to the log file, solve the model
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 84
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4329      put_utility 'log' /'+++ Solve the perfect-foresight version of MESSAGEix +++ ' ;
4330      Solve MESSAGE_LP using LP minimizing OBJ ;
4331   
4332  * write model status summary
4333      status('perfect_foresight','modelstat') = MESSAGE_LP.modelstat ;
4334      status('perfect_foresight','solvestat') = MESSAGE_LP.solvestat ;
4335      status('perfect_foresight','resUsd')    = MESSAGE_LP.resUsd ;
4336      status('perfect_foresight','objEst')    = MESSAGE_LP.objEst ;
4337      status('perfect_foresight','objVal')    = MESSAGE_LP.objVal ;
4338   
4339  * write an error message if model did not solve to optimality
4340      IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
4341          put_utility 'log' /'+++ MESSAGEix did not solve to optimality - run is aborted, no output produced! +++ ' ;
4342          ABORT "MESSAGEix did not solve to optimality!"
4343      ) ;
4344   
4345  * rescale the dual of the emission constraint to account that the constraint is defined on the average year, not total
4346  EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)$(
4347          EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) ) =
4348      EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year)
4349          / SUM(year$( cat_year(type_year,year) ), duration_period(year) )
4350          * SUM(year$( map_first_period(type_year,year) ), duration_period(year) / df_period(year) * df_year(year) );
4351   
4352   
4353  * assign auxiliary variables DEMAND, PRICE_COMMODITY and PRICE_EMISSION for integration with MACRO and reporting
4354      DEMAND.l(node,commodity,level,year,time) = demand_fixed(node,commodity,level,year,time) ;
4355      PRICE_COMMODITY.l(node,commodity,level,year,time) =
4356          ( COMMODITY_BALANCE_GT.m(node,commodity,level,year,time) + COMMODITY_BALANCE_LT.m(node,commodity,level,year,time) )
4357              / df_period(year) ;
4358      PRICE_EMISSION.l(node,type_emission,type_tec,year)$( SUM(type_year$( cat_year(type_year,year) ), 1 ) ) =
4359          SMAX(type_year$( cat_year(type_year,year) ),
4360                 - EMISSION_CONSTRAINT.m(node,type_emission,type_tec,type_year) )
4361              / df_year(year) ;
4362      PRICE_EMISSION.l(node,type_emission,type_tec,year)$(
4363          PRICE_EMISSION.l(node,type_emission,type_tec,year) = - inf ) = 0 ;
4364   
4365  * AUX_ACT_BOUND_LO(node,tec,year_all,year_all2,mode,time)$( ACT.l(node,tec,year_all,year_all2,mode,time) < 0 AND
4366  *    ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) = yes ;
4367  * AUX_ACT_BOUND_UP(node,tec,year_all,year_all2,mode,time)$( ACT.l(node,tec,year_all,year_all2,mode,time) > 0 AND
4368  *    ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9 ) = yes ;
4369   
4370  else
4371  ***
4372  * Recursive-dynamic and myopic model
4373  * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4374  * For the myopic and rolling-horizon models, loop over horizons and iteratively solve the model, keeping the decision
4375  * variables from prior periods fixed.
4376  * This option is selected by setting the GAMS global variable ``%foresight%`` to a value greater than 0,
4377  * where the value represents the number of years that the model instance is considering when iterating over the periods
4378  * of the optimization horizon.
4379  *
4380  * Loop over :math:`\hat{y} \in Y`, solving
4381  *
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 85
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4382  * .. math::
4383  *     \min_x \ OBJ = \sum_{y \in \hat{Y}(\hat{y})} OBJ_y(x_y) \\
4384  *     \text{s.t. } x_{y'} = x_{y'}^* \quad \forall \ y' < y
4385  *
4386  * where :math:`\hat{Y}(\hat{y}) = \{y \in Y | \ |\hat{y}| - |y| < optimization\_horizon \}` and
4387  * :math:`x_{y'}^*` is the optimal value of :math:`x_{y'}` in iteration :math:`|y'|` of the iterative loop.
4388  *
4389  * The advantage of this implementation is that there is no need to 'store' the optimal values of all decision
4390  * variables in additional reporting parameters - the last model solve automatically includes the results over the
4391  * entire model horizon and can be imported via the ixmp interface.
4392  ***
4393   
4394      year(year_all) = no ;
4395   
4396      LOOP(year_all$( model_horizon(year_all) ),
4397   
4398  * include all past periods and future periods including the period where the %foresight% is reached
4399          year(year_all) = yes ;
4400   
4401  * reset the investment cost scaling parameter
4402          year(year_all2)$( ORD(year_all2) > ORD(year_all)
4403              AND duration_period_sum(year_all,year_all2) < 0 ) = yes ;
4404   
4405  * write a status update and time elapsed to the log file, solve the model
4406          put_utility 'log' /'+++ Solve the recursive-dynamic version of MESSAGEix - iteration ' year_all.tl:0 '  +++ ' ;
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/aux_computation_time.gms
4407          $$INCLUDE includes/aux_computation_time.gms
4408  * elegant reporting of GAMS computing time
4409  * requires aux_computation_time_init.gms
4410   
4411  if ( timeElapsed > 7200 ,
4412      put_utility 'log' / '    Time since GAMS start: ' floor( timeElapsed / 3600 ):0:0 ' hours, ' ( mod( timeElapsed, 3600 ) / 60 ):0:0 ' minutes' ;
4413  elseif timeElapsed > 3720 ,
4414      put_utility 'log' / '    Time since GAMS start: 1 hour, ' ( timeElapsed / 60 - 60 ):0:0 ' minutes' ;
4415  elseif timeElapsed > 3660 ,
4416      put_utility 'log' / '    Time since GAMS start: 1 hour, 1 minute' ;
4417  elseif timeElapsed > 120 ,
4418      put_utility 'log' / '    Time since GAMS start: ' ( timeElapsed / 60 ):0:0 ' minutes' ;
4419  else
4420      put_utility 'log' / '    Give it a bit more time, not even two minutes yet... ' ;
4421  ) ;
4422          Solve MESSAGE_LP using LP minimizing OBJ ;
4423   
4424  * write model status summary
4425          status(year_all,'modelstat') = MESSAGE_LP.modelstat ;
4426          status(year_all,'solvestat') = MESSAGE_LP.solvestat ;
4427          status(year_all,'resUsd')    = MESSAGE_LP.resUsd ;
4428          status(year_all,'objEst')    = MESSAGE_LP.objEst ;
4429          status(year_all,'objVal')    = MESSAGE_LP.objVal ;
4430   
4431  * write an error message AND ABORT THE SOLVE LOOP if model did not solve to optimality
4432          IF( NOT ( MESSAGE_LP.modelstat = 1 OR MESSAGE_LP.modelstat = 8 ),
4433              put_utility 'log' /'+++ MESSAGEix did not solve to optimality - run is aborted, no output produced! +++ ' ;
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 86
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4434              ABORT "MESSAGEix did not solve to optimality!"
4435          ) ;
4436   
4437  * fix all variables of the current iteration period 'year_all' to the optimal levels
4438          EXT.fx(node,commodity,grade,year_all) =  EXT.l(node,commodity,grade,year_all) ;
4439          CAP_NEW.fx(node,tec,year_all) = CAP_NEW.l(node,tec,year_all) ;
4440          CAP.fx(node,tec,year_all2,year_all)$( map_period(year_all2,year_all) ) = CAP.l(node,tec,year_all,year_all2) ;
4441          ACT.fx(node,tec,year_all2,year_all,mode,time)$( map_period(year_all2,year_all) )
4442              = ACT.l(node,tec,year_all2,year_all,mode,time) ;
4443          CAP_NEW_UP.fx(node,tec,year_all) = CAP_NEW_UP.l(node,tec,year_all) ;
4444          CAP_NEW_LO.fx(node,tec,year_all) = CAP_NEW_LO.l(node,tec,year_all) ;
4445          ACT_UP.fx(node,tec,year_all,time) = ACT_UP.l(node,tec,year_all,time) ;
4446          ACT_LO.fx(node,tec,year_all,time) = ACT_LO.l(node,tec,year_all,time) ;
4447   
4448      ) ; # end of the recursive-dynamic loop
4449   
4450  ) ; # end of if statement for the selection betwen perfect-foresight or recursive-dynamic model
4451   
4452  *----------------------------------------------------------------------------------------------------------------------*
4453  * post-processing of trade costs and total costs                                                                       *
4454  *----------------------------------------------------------------------------------------------------------------------*
4455   
4456  * calculation of commodity import costs by node, commodity and year
4457  import_cost(node2, commodity, year) =
4458            SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
4459              AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
4460  * import into node2 from other nodes
4461      input(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
4462      * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
4463      * PRICE_COMMODITY.l(node,commodity,level,year,time) )
4464  ;
4465   
4466  * calculation of commodity export costs by node, commodity and year
4467  export_cost(node2, commodity, year) =
4468            SUM( (node,tec,vintage,mode,level,time,time2)$( (NOT sameas(node,node2)) AND map_tec_act(node2,tec,year,mode,time2)
4469              AND map_tec_lifetime(node2,tec,vintage,year) AND map_commodity(node,commodity,level,year,time) ),
4470  * export from node2 to other market
4471      output(node2,tec,vintage,year,mode,node,commodity,level,time2,time)
4472      * duration_time_rel(time,time2) * ACT.L(node2,tec,vintage,year,mode,time2)
4473      * PRICE_COMMODITY.l(node,commodity,level,year,time) )
4474  ;
4475   
4476  * net commodity trade costs by node and year
4477  trade_cost(node2, year) = SUM(commodity, import_cost(node2, commodity, year) - export_cost(node2, commodity, year)) ;
4478   
4479  * total energy system costs excluding taxes by node and time (CAVEAT: lacking regional corrections due to emission trading)
4480  COST_NODAL_NET.L(node, year)$(NOT macro_base_period(year)) = (
4481      COST_NODAL.L(node, year) + trade_cost(node, year)
4482  * subtract emission taxes applied at any higher nodal level (via map_node set)
4483      - sum((type_emission,emission,type_tec,type_year,node2)$( emission_scaling(type_emission,emission)
4484              AND map_node(node2,node) AND cat_year(type_year,year) ),
4485          emission_scaling(type_emission,emission) * tax_emission(node2,type_emission,type_tec,type_year)
4486          * EMISS.L(node,emission,type_tec,year) )
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 87
The MESSAGEix Integrated Assessment Model
C o m p i l a t i o n


4487  ) / 1000 ;
4488   
4489  *----------------------------------------------------------------------------------------------------------------------*
4490  * post-processing and export to gdx                                                                                    *
4491  *----------------------------------------------------------------------------------------------------------------------*
4492   
4493  * include MESSAGE GAMS-internal reporting
INCLUDE    C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/reporting.gms
4494  $INCLUDE MESSAGE/reporting.gms
4495  ***
4496  * Standard output reports
4497  * =======================
4498  *
4499  * This part of the code contains the definitions and scripts for a number of standard output reports.
4500  * These default reports will be created after every MESSAGE run.
4501  ***
4502   
4503  *----------------------------------------------------------------------------------------------------------------------*
4504  * The following parts are quick-and-dirty reporting 'flags'
4505  *----------------------------------------------------------------------------------------------------------------------*
4506   
4507  Set
4508      report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)
4509      report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)
4510  ;
4511   
4512  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time) = no ;
4513  report_aux_bounds_up(node,tec,year_all,year_all2,mode,time)$(
4514      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
4515      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = 1e9) ) = yes ;
4516   
4517  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time) = no ;
4518  report_aux_bounds_lo(node,tec,year_all,year_all2,mode,time)$(
4519      map_tec_lifetime(node,tec,year_all,year_all2) AND map_tec_act(node,tec,year_all2,mode,time)
4520      AND ( ACT.l(node,tec,year_all,year_all2,mode,time) = -1e9 ) ) = yes ;
4521   
4522  * dump all input data, processed data and results to a gdx file
4523  execute_unload "output/MsgOutput_<your datafile name here>.gdx"
4524   
4525  put_utility 'log' / /"+++ End of MESSAGEix (stand-alone) run - have a nice day! +++ " ;
4526   
4527  *----------------------------------------------------------------------------------------------------------------------*
4528  * end of file - have a nice day!                                                                                       *
4529  *----------------------------------------------------------------------------------------------------------------------*
4530  $ENDIF
4531   
4532  *----------------------------------------------------------------------------------------------------------------------*
4533  * end of file - have a nice day!                                                                                       *
4534  *----------------------------------------------------------------------------------------------------------------------*
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 88
The MESSAGEix Integrated Assessment Model
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_master.gms
     2      111 INCLUDE        1     114  .C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_run.gms
     3      176 INCLUDE        2      65  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_setup.gms
     4      190 IF EXIST       3      14  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/MsgData_ptl_baseline_baseline_xlsx.gdx
     5      242 INCLUDE        3      66  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/auxiliary_settings.gms
     6      282 INCLUDE        3      69  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\version.gms
     7      306 INCLUDE        3      70  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/version_check.gms
     8      313 GDXIN          7       7  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/MsgData_ptl_baseline_baseline_xlsx.gdx
     9      333 INCLUDE        3      73  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/sets_maps_def.gms
    10      817 INCLUDE        3      74  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/parameter_def.gms
    11     1673 INCLUDE        3      77  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/data_load.gms
    12     1682 GDXIN         11       9  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\data/MsgData_ptl_baseline_baseline_xlsx.gdx
    13     1777 INCLUDE       11     104  ....C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/period_parameter_assignment.gms
    14     2034 INCLUDE        3      80  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/scaling_investment_costs.gms
    15     2220 INCLUDE        3      86  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_core.gms
    16     4303 INCLUDE        2      71  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/model_solve.gms
    17     4407 INCLUDE       16     104  ...C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\includes/aux_computation_time.gms
    18     4494 INCLUDE        2      78  ..C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE/reporting.gms


COMPILATION TIME     =        0.156 SECONDS      3 MB  29.1.0 rbb4180b WEX-WEI
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 89
The MESSAGEix Integrated Assessment Model
Model Statistics    SOLVE MESSAGE_LP Using LP From line 4330


MODEL STATISTICS

BLOCKS OF EQUATIONS          58     SINGLE EQUATIONS          672
BLOCKS OF VARIABLES           8     SINGLE VARIABLES          592
NON ZERO ELEMENTS         2,480


GENERATION TIME      =        0.125 SECONDS      5 MB  29.1.0 rbb4180b WEX-WEI


EXECUTION TIME       =        0.172 SECONDS      5 MB  29.1.0 rbb4180b WEX-WEI
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 90
The MESSAGEix Integrated Assessment Model
Solution Report     SOLVE MESSAGE_LP Using LP From line 4330


               S O L V E      S U M M A R Y

     MODEL   MESSAGE_LP          OBJECTIVE  OBJ
     TYPE    LP                  DIRECTION  MINIMIZE
     SOLVER  CPLEX               FROM LINE  4330

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE                0.0000

 RESOURCE USAGE, LIMIT          0.110   1000000.000
 ITERATION COUNT, LIMIT        17     100000000

IBM ILOG CPLEX   29.1.0 rbb4180b Released Nov 15, 2019 WEI x86 64bit/MS Window
--- GAMS/Cplex licensed for continuous and discrete problems.
Cplex 12.9.0.0

*** Error Cannot open parameter file "C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\cplex.opt"
*** Error Error code = 2; No such file or directory
Space for names approximately 0.06 Mb
Use option 'names no' to turn use of names off
LP status(1): optimal
Cplex Time: 0.05sec (det. 1.15 ticks)
Optimal solution found.
Objective :           0.000000



**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 29.1.0  rbb4180b Released Nov 15, 2019 WEX-WEI x86 64bit/MS Windows                                                                                                                                                              08/30/21 18:50:56 Page 91
The MESSAGEix Integrated Assessment Model
E x e c u t i o n


**** GDX ERROR AT LINE 4523 - Open write failed C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\output/MsgOutput_<your datafile name here>.gdx

**** GDX ERROR AT LINE 4523 - Msg: Permission denied

**** REPORT FILE SUMMARY

logfile 


EXECUTION TIME       =        0.015 SECONDS      4 MB  29.1.0 rbb4180b WEX-WEI


USER: Medium MUD - 10 User License                   E190424:0859AO-WIN
      East China University of Science and Technology, School ofDC14915
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_master.gms
Output     C:\Users\zaoji\Desktop\program\cn_ptl\prototype\gams_tst3\MESSAGE_master.lst

**** USER ERROR(S) ENCOUNTERED
